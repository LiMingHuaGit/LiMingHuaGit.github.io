<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>About Me</title>
    <url>/2020/04/17/aboutMe/</url>
    <content><![CDATA[<blockquote>
<p>A Coder, live in XuZhou, China .  </p>
</blockquote>
<ul>
<li>姓名：李明华</li>
<li>现居：江苏徐州</li>
<li>GitHub：<a href="https://github.com/LiMingHuaGit" target="_blank" rel="noopener">LiMingHuaGit</a></li>
<li>QQ：<a href="qq.com/">2290320152</a></li>
<li>微信：<a href="wechat.com/">someonelover0</a></li>
</ul>
<img src="/2020/04/17/aboutMe/self.jpg" class="">
]]></content>
  </entry>
  <entry>
    <title>jdk1.8_Base64</title>
    <url>/2020/10/07/jdk1-8-Base64/</url>
    <content><![CDATA[<h1 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h1><h2 id="static-class-Base64-Encoder"><a href="#static-class-Base64-Encoder" class="headerlink" title="static class Base64.Encoder"></a>static class Base64.Encoder</h2><blockquote>
<p>该类实现一个编码器，使用 Base64 编码来编码字节数据。</p>
</blockquote>
<h2 id="static-class-Base64-Decoder"><a href="#static-class-Base64-Decoder" class="headerlink" title="static class Base64.Decoder"></a>static class Base64.Decoder</h2><blockquote>
<p>该类实现一个解码器，使用 Base64 编码来解码字节数据。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 使用基本编码</span></span><br><span class="line">            String base64encodedString = Base64.getEncoder().encodeToString(<span class="string">"runoob?java8"</span>.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">            System.out.println(<span class="string">"Base64 编码字符串 (基本) :"</span> + base64encodedString);</span><br><span class="line">			<span class="comment">//Base64 编码字符串 (基本) :cnVub29iP2phdmE4</span></span><br><span class="line">			</span><br><span class="line">            <span class="comment">// 解码</span></span><br><span class="line">            <span class="keyword">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(base64encodedString);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"原始字符串: "</span> + <span class="keyword">new</span> String(base64decodedBytes, <span class="string">"utf-8"</span>));</span><br><span class="line">			<span class="comment">//原始字符串: runoob?java8</span></span><br><span class="line">			</span><br><span class="line">            base64encodedString = Base64.getUrlEncoder().encodeToString(<span class="string">"runoob?java8"</span>.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">            System.out.println(<span class="string">"Base64 编码字符串 (URL) :"</span> + base64encodedString);</span><br><span class="line">			<span class="comment">//Base64 编码字符串 (URL) :cnVub29iP2phdmE4</span></span><br><span class="line"></span><br><span class="line">            StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">                stringBuilder.append(UUID.randomUUID().toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] mimeBytes = stringBuilder.toString().getBytes(<span class="string">"utf-8"</span>);</span><br><span class="line">            String mimeEncodedString = Base64.getMimeEncoder().encodeToString(mimeBytes);</span><br><span class="line">            System.out.println(<span class="string">"Base64 编码字符串 (MIME) :"</span> + mimeEncodedString);</span><br><span class="line">			<span class="comment">//Base64 编码字符串 (MIME) :</span></span><br><span class="line">			<span class="comment">//ZTA4NjkwNzktYTcxZi00NWQwLWE0MmMtOTVlN2Y5NDZhNjNmNzRkMDIzZGEtZjI3Zi00NDhkLTlk</span></span><br><span class="line">			<span class="comment">//YzMtYzNlYmJkNjFjMzA2NDNhZjhhOWMtYTVlZC00YzIwLTgxMTItMjhkZTRiYjMxZjc2NzBjMzMy</span></span><br><span class="line">			<span class="comment">//MjctZTQyZC00MzYzLWE1ZDItMjM3MjM5ZTM0ZTQyYTYxMzFlMDUtOWJlZC00MGQ4LThjNTgtYWYy</span></span><br><span class="line">			<span class="comment">//ZWNmODgwNjBkYjEzOGM3OTYtOGRjYi00ODA4LWE5MmEtOWEyZDllOWI1ODVlNDBjNTMwYjctYjJj</span></span><br><span class="line">			<span class="comment">//NC00MDM4LWE5NjEtMzcwZjgyZDY0ZDU1MWY0OTNjMTEtYzc2NC00MmIxLTg4OTQtOTI5M2ZjMjA2</span></span><br><span class="line">			<span class="comment">//OWUyOTgzZDM4YmMtMjZkZC00OTg2LWJhYWUtNjdjMTkxMjkzMDllMTI4MGQwMjQtM2JmZi00MTA1</span></span><br><span class="line">			<span class="comment">//LTllZTItMTkxMjVkMTAzYWZk</span></span><br><span class="line">			</span><br><span class="line">        &#125;<span class="keyword">catch</span>(UnsupportedEncodingException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Error :"</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jkd1.8</tag>
        <tag>Base64</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk1.8_lambda</title>
    <url>/2020/09/24/jdk1-8-lambda/</url>
    <content><![CDATA[<blockquote>
<p>参考Haskell-函数式编程</p>
</blockquote>
<h1 id="核心功能性函数接口（有且只有一个抽象方法的接口）"><a href="#核心功能性函数接口（有且只有一个抽象方法的接口）" class="headerlink" title="核心功能性函数接口（有且只有一个抽象方法的接口）"></a>核心功能性函数接口（有且只有一个抽象方法的接口）</h1><ul>
<li>Consumer<T> :消费型接口    void acept(T t);<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//消费型接口Consumer，输入一个参数，对其进行打印输出</span></span><br><span class="line"> Consumer&lt;String&gt; consumer = (x) -&gt; System.out.println(x);</span><br><span class="line"> <span class="comment">//打印字符串</span></span><br><span class="line"> consumer.accept(<span class="string">"Hello world!"</span>);</span><br></pre></td></tr></table></figure></li>
<li>Supplier<T> :供给型接口    T get();<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//供给型接口Supplier，返回指定字符串</span></span><br><span class="line">Supplier&lt;String&gt; supplier = () -&gt; <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="comment">//获取字符串</span></span><br><span class="line">supplier.get();</span><br></pre></td></tr></table></figure></li>
<li>Function&lt;T,R&gt; :函数型接口 R apply(T t);<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;String, Integer&gt; function = (x) -&gt; x.length();</span><br><span class="line"><span class="comment">//获取字符串长度</span></span><br><span class="line">function.apply(<span class="string">"Hello world!"</span>);</span><br></pre></td></tr></table></figure></li>
<li>Predicate<T> :断言型接口 boolean test(T t);<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//断言型接口Predicate，输入数字，判断是否大于0</span></span><br><span class="line">Predicate&lt;Integer&gt; predicate = (x) -&gt; x &gt; <span class="number">0</span>;</span><br><span class="line"><span class="comment">//获取判断结果</span></span><br><span class="line">predicate.test(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="1-Iterable-forEach-Consumer-lt-super-T-gt-action"><a href="#1-Iterable-forEach-Consumer-lt-super-T-gt-action" class="headerlink" title="1.Iterable.forEach(Consumer&lt;? super T&gt; action)"></a>1.Iterable.forEach(Consumer&lt;? super T&gt; action)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; soutList = Arrays.asList(<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>);</span><br><span class="line">soutList.forEach(out-&gt; System.out.println(out));</span><br><span class="line">soutList.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">Page p = <span class="keyword">new</span> Page(<span class="string">"content"</span>);</span><br><span class="line">Page p = Page.<span class="keyword">new</span>(<span class="string">"content"</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Page&gt; <span class="title">createPagesFrom</span><span class="params">(Stream&lt;String&gt;; contents)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> contents.map(Page::<span class="keyword">new</span>).</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <img src="1.jpg" alt="Iterable接口"><br> <img src="2.jpg" alt="forEach方法"></p>
<h3 id="1-Iterable接口允许一个对象成为forEach的目标"><a href="#1-Iterable接口允许一个对象成为forEach的目标" class="headerlink" title="1). Iterable接口允许一个对象成为forEach的目标"></a>1). Iterable接口允许一个对象成为forEach的目标</h3><h3 id="2-这里的forEach被声明为一个默认方法，并接收了一个消费者类型的函数接口，先查找匹配对应的操作，若不为空则执行操作"><a href="#2-这里的forEach被声明为一个默认方法，并接收了一个消费者类型的函数接口，先查找匹配对应的操作，若不为空则执行操作" class="headerlink" title="2). 这里的forEach被声明为一个默认方法，并接收了一个消费者类型的函数接口，先查找匹配对应的操作，若不为空则执行操作"></a>2). 这里的forEach被声明为一个默认方法，并接收了一个消费者类型的函数接口，先查找匹配对应的操作，若不为空则执行操作</h3><h3 id="3-接口中的默认方法可以不被实现类实现"><a href="#3-接口中的默认方法可以不被实现类实现" class="headerlink" title="3). 接口中的默认方法可以不被实现类实现"></a>3). 接口中的默认方法可以不被实现类实现</h3><h3 id="4-如上代码中，输出集合soutList调用了foreach方法，箭头左边是参数，右边是抽象方法的实现内容或已有方法的引用"><a href="#4-如上代码中，输出集合soutList调用了foreach方法，箭头左边是参数，右边是抽象方法的实现内容或已有方法的引用" class="headerlink" title="4). 如上代码中，输出集合soutList调用了foreach方法，箭头左边是参数，右边是抽象方法的实现内容或已有方法的引用"></a>4). 如上代码中，输出集合soutList调用了foreach方法，箭头左边是参数，右边是抽象方法的实现内容或已有方法的引用</h3><h3 id="5-当参数列表中的参数和方法签名匹配时，可以通过-直接引用方法，包括构造方法"><a href="#5-当参数列表中的参数和方法签名匹配时，可以通过-直接引用方法，包括构造方法" class="headerlink" title="5). 当参数列表中的参数和方法签名匹配时，可以通过 :: 直接引用方法，包括构造方法"></a>5). 当参数列表中的参数和方法签名匹配时，可以通过 :: 直接引用方法，包括构造方法</h3><h2 id="2-Collection-stream-、Stream、Stream-filter-Predicate-、Collector、Collectors、Collectors-toList"><a href="#2-Collection-stream-、Stream、Stream-filter-Predicate-、Collector、Collectors、Collectors-toList" class="headerlink" title="2.Collection.stream()、Stream、Stream#filter(Predicate)、Collector、Collectors、Collectors#toList()"></a>2.Collection.stream()、Stream、Stream#filter(Predicate)、Collector、Collectors、Collectors#toList()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Complete this for Exercise_2_Test#getAllPersonsEligibleToVote</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">* 根据给定年龄返回给定选民集合中合法年龄的选民集合</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> potentialVoters - voters to filter</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> legalAgeOfVoting - age where it's legal to vote</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> a list of eligible voters</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Person&gt; <span class="title">eligibleVoters</span><span class="params">(List&lt;Person&gt; potentialVoters, <span class="keyword">int</span> legalAgeOfVoting)</span> </span>&#123;</span><br><span class="line">      Stream&lt;Person&gt; personStream = potentialVoters.stream().filter(</span><br><span class="line">              person -&gt; person.getAge()&gt;=legalAgeOfVoting</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span> personStream.collect(Collectors.toList());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-Collection-stream-返回一个Stream序列"><a href="#1-Collection-stream-返回一个Stream序列" class="headerlink" title="1). Collection#stream() 返回一个Stream序列"></a>1). Collection#stream() 返回一个Stream序列</h3><h3 id="2-Stream-流"><a href="#2-Stream-流" class="headerlink" title="2). Stream 流"></a>2). Stream 流</h3><pre><code>- A sequence of elements supporting sequential and parallel aggregate operations
- 支撑顺序和并行聚合操作元素的序列
- lazy： computation on the source data is only performed when the terminal operation is initiated, and source elements are consumed only as needed.
- 惰式执行：即仅在终端操作启动时才执行对源数据的计算，并且仅在需要时使用源元素。
- 在对流进行“操作”（类似查询和过滤）时，这些行为应该是无干扰（不修改流的数据源）且无状态（其结果不依赖于流管道执行过程中可能改变的任何状态）的
- 消费性质，只使用一次，不可以被重用</code></pre><h3 id="3-Stream-filter-Predicate-对流进行过滤-中间操作"><a href="#3-Stream-filter-Predicate-对流进行过滤-中间操作" class="headerlink" title="3). Stream#filter(Predicate)  对流进行过滤 中间操作"></a>3). Stream#filter(Predicate)  对流进行过滤 中间操作</h3><h3 id="4-Predicate-断言功能性函数接口，返回Boolean值-见上文"><a href="#4-Predicate-断言功能性函数接口，返回Boolean值-见上文" class="headerlink" title="4). Predicate 断言功能性函数接口，返回Boolean值 见上文"></a>4). Predicate 断言功能性函数接口，返回Boolean值 见上文</h3><h3 id="5-Stream-collect"><a href="#5-Stream-collect" class="headerlink" title="5). Stream.collect()"></a>5). Stream.collect()</h3><pre><code>- 返回一个结果容器 
- &lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector)
- &lt;R&gt; 结果的类型
- &lt;A&gt; Collector的积累类型</code></pre><h3 id="6-Collector-执行结果转换-Collectors-实现Collector的各种还原操作"><a href="#6-Collector-执行结果转换-Collectors-实现Collector的各种还原操作" class="headerlink" title="6). Collector 执行结果转换 Collectors 实现Collector的各种还原操作"></a>6). Collector 执行结果转换 Collectors 实现Collector的各种还原操作</h3><pre><code>- public interface Collector&lt;T, A, R&gt;
- &lt;T&gt;  输入元素的类型
- &lt;A&gt;  还原运算的可变累积型（通常隐藏作为一个实现细节）
- &lt;R&gt;  还原运算的结果类</code></pre><h3 id="7-Collectors-toList-返回一个Collector-，其累积的输入元素融入到一个新的List中"><a href="#7-Collectors-toList-返回一个Collector-，其累积的输入元素融入到一个新的List中" class="headerlink" title="7). Collectors#toList() 返回一个Collector ，其累积的输入元素融入到一个新的List中"></a>7). Collectors#toList() 返回一个Collector ，其累积的输入元素融入到一个新的List中</h3><pre><code>- public static &lt;T&gt; Collector&lt;T, ?, List&lt;T&gt;&gt; toList()
- &lt;T&gt;  输入元素的类型</code></pre><h2 id="3-Stream-map-Function"><a href="#3-Stream-map-Function" class="headerlink" title="3.Stream#map(Function)"></a>3.Stream#map(Function)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Apply a mapping of Books to titles (Strings)</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * 将书籍的标题映射到一个新的List&lt;String&gt;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> books - books to transform</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> list of book titles</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">titlesOf</span><span class="params">(List&lt;Book&gt; books)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> books.stream().map(Book::getTitle).collect(Collectors.toList());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-Stream-map-Function"><a href="#1-Stream-map-Function" class="headerlink" title="1). Stream#map(Function)"></a>1). Stream#map(Function)</h3><pre><code>- 返回指定类型的流 中间操作
- Function 函数型功能接口 见上文
- java.util.stream.Stream&lt;T&gt; &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper)
- &lt;? super T&gt;/&lt;? extends T&gt; &lt;? super T&gt;表示包括T在内的任何T的父类，&lt;? extends T&gt;表示包括T在内的任何T的子类</code></pre>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jkd1.8</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk1.8_Optional</title>
    <url>/2020/09/29/jdk1-8-Optional/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote>
<p>主要用于解决空指针异常（NullPointerException）<br>类似包含有可选值的包装类，Optional 类既可以含有对象也可以为空</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A container object which may or may not contain a non-null value.</span></span><br><span class="line"><span class="comment"> * If a value is present, &#123;<span class="doctag">@code</span> isPresent()&#125; will return &#123;<span class="doctag">@code</span> true&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> get()&#125; will return the value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Additional methods that depend on the presence or absence of a contained</span></span><br><span class="line"><span class="comment"> * value are provided, such as &#123;<span class="doctag">@link</span> #orElse(java.lang.Object) orElse()&#125;</span></span><br><span class="line"><span class="comment"> * (return a default value if value not present) and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #ifPresent(java.util.function.Consumer) ifPresent()&#125; (execute a block</span></span><br><span class="line"><span class="comment"> * of code if the value is present).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This is a &lt;a href="../lang/doc-files/ValueBased.html"&gt;value-based&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * class; use of identity-sensitive operations (including reference equality</span></span><br><span class="line"><span class="comment"> * (&#123;<span class="doctag">@code</span> ==&#125;), identity hash code, or synchronization) on instances of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Optional&#125; may have unpredictable results and should be avoided.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Optional</span>&lt;<span class="title">T</span>&gt; </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<h1 id="of-amp-ofNullable"><a href="#of-amp-ofNullable" class="headerlink" title="of()&amp;ofNullable()"></a>of()&amp;ofNullable()</h1><blockquote>
<p>构造带有值的Optional类<br>of()方法中的参数不允许为null，传入null会导致NullPointerException异常<br>若调用ofNullable()方法并传入空值则实际上相当于直接调用empty()方法实例化一个空的Optional</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; optional = Optional.of(<span class="string">"value"</span>);</span><br><span class="line">Optional&lt;String&gt; optionalNull = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">Optional&lt;String&gt; emptyOpt = Optional.empty();</span><br><span class="line">System.out.println(optional.get());<span class="comment">//value</span></span><br><span class="line">System.out.println(emptyOpt.get());<span class="comment">//NoSuchElementException</span></span><br><span class="line">System.out.println(optionalNull.get());<span class="comment">//NoSuchElementException</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an &#123;<span class="doctag">@code</span> Optional&#125; describing the specified value, if non-null,</span></span><br><span class="line"><span class="comment"> * otherwise returns an empty &#123;<span class="doctag">@code</span> Optional&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the class of the value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the possibly-null value to describe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> Optional&#125; with a present value if the specified value</span></span><br><span class="line"><span class="comment"> * is non-null, otherwise an empty &#123;<span class="doctag">@code</span> Optional&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Optional&lt;T&gt; <span class="title">ofNullable</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value == <span class="keyword">null</span> ? empty() : of(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="isPresent-amp-ifPresent"><a href="#isPresent-amp-ifPresent" class="headerlink" title="isPresent()&amp;ifPresent()"></a>isPresent()&amp;ifPresent()</h1><blockquote>
<p>isPresent() 判断是否为空<br>ifPresent() 判断是否为空,不为空则执行方法内的lambda表达式(实现消费型接口)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return &#123;<span class="doctag">@code</span> true&#125; if there is a value present, otherwise &#123;<span class="doctag">@code</span> false&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if there is a value present, otherwise &#123;<span class="doctag">@code</span> false&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPresent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If a value is present, invoke the specified consumer with the value,</span></span><br><span class="line"><span class="comment"> * otherwise do nothing.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> consumer block to be executed if a value is present</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if value is present and &#123;<span class="doctag">@code</span> consumer&#125; is</span></span><br><span class="line"><span class="comment"> * null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ifPresent</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; consumer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>)</span><br><span class="line">        consumer.accept(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; optional = Optional.of(<span class="string">"value"</span>);</span><br><span class="line">Optional&lt;String&gt; optionalNull = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">optional.ifPresent((s) -&gt; System.out.println(s));<span class="comment">//value</span></span><br><span class="line">optionalNull.ifPresent(System.out::println);<span class="comment">//不执行</span></span><br></pre></td></tr></table></figure>
<h1 id="orElse-amp-orElseGet-amp-orElseThrow"><a href="#orElse-amp-orElseGet-amp-orElseThrow" class="headerlink" title="orElse()&amp;orElseGet()&amp;orElseThrow()"></a>orElse()&amp;orElseGet()&amp;orElseThrow()</h1><blockquote>
<p>orElse() 若Optional对象为空值则返回方法传入的值<br>orElseGet() 若Optional对象为空值则执行方法内的lambda表达式(供给型功能函数)<br>orElseThrow() 若Optional对象为空值则抛出指定的异常(供给型功能函数)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the value if present, otherwise return &#123;<span class="doctag">@code</span> other&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> other the value to be returned if there is no value present, may</span></span><br><span class="line"><span class="comment"> * be null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the value, if present, otherwise &#123;<span class="doctag">@code</span> other&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">orElse</span><span class="params">(T other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="keyword">null</span> ? value : other;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the value if present, otherwise invoke &#123;<span class="doctag">@code</span> other&#125; and return</span></span><br><span class="line"><span class="comment"> * the result of that invocation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> other a &#123;<span class="doctag">@code</span> Supplier&#125; whose result is returned if no value</span></span><br><span class="line"><span class="comment"> * is present</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the value if present otherwise the result of &#123;<span class="doctag">@code</span> other.get()&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if value is not present and &#123;<span class="doctag">@code</span> other&#125; is</span></span><br><span class="line"><span class="comment"> * null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">orElseGet</span><span class="params">(Supplier&lt;? extends T&gt; other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="keyword">null</span> ? value : other.get();</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the contained value, if present, otherwise throw an exception</span></span><br><span class="line"><span class="comment"> * to be created by the provided supplier.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span> A method reference to the exception constructor with an empty</span></span><br><span class="line"><span class="comment"> * argument list can be used as the supplier. For example,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> IllegalStateException::new&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;X&gt; Type of the exception to be thrown</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exceptionSupplier The supplier which will return the exception to</span></span><br><span class="line"><span class="comment"> * be thrown</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the present value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> X if there is no value present</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if no value is present and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> exceptionSupplier&#125; is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;X extends Throwable&gt; <span class="function">T <span class="title">orElseThrow</span><span class="params">(Supplier&lt;? extends X&gt; exceptionSupplier)</span> <span class="keyword">throws</span> X </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> exceptionSupplier.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; optionalNull = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">System.out.println(optionalNull.orElse(<span class="string">"值为null"</span>));<span class="comment">//值为null</span></span><br><span class="line">System.out.println(optionalNull.orElseGet(()-&gt;<span class="string">"值为null"</span>));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	optionalNull.orElseThrow(Exception::<span class="keyword">new</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="map-amp-flatMap"><a href="#map-amp-flatMap" class="headerlink" title="map()&amp;flatMap()"></a>map()&amp;flatMap()</h1><blockquote>
<p>map()方法，若传入的方法存在值，则返回方法对应类型的Optional对象，否则返回一个空的Optional<br>同样，但入参需要是Optional对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If a value is present, apply the provided mapping function to it,</span></span><br><span class="line"><span class="comment"> * and if the result is non-null, return an &#123;<span class="doctag">@code</span> Optional&#125; describing the</span></span><br><span class="line"><span class="comment"> * result.  Otherwise return an empty &#123;<span class="doctag">@code</span> Optional&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span> This method supports post-processing on optional values, without</span></span><br><span class="line"><span class="comment"> * the need to explicitly check for a return status.  For example, the</span></span><br><span class="line"><span class="comment"> * following code traverses a stream of file names, selects one that has</span></span><br><span class="line"><span class="comment"> * not yet been processed, and then opens that file, returning an</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Optional&lt;FileInputStream&gt;&#125;:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> *     Optional&lt;FileInputStream&gt; fis =</span></span><br><span class="line"><span class="comment"> *         names.stream().filter(name -&gt; !isProcessedYet(name))</span></span><br><span class="line"><span class="comment"> *                       .findFirst()</span></span><br><span class="line"><span class="comment"> *                       .map(name -&gt; new FileInputStream(name));</span></span><br><span class="line"><span class="comment"> * &#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Here, &#123;<span class="doctag">@code</span> findFirst&#125; returns an &#123;<span class="doctag">@code</span> Optional&lt;String&gt;&#125;, and then</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> map&#125; returns an &#123;<span class="doctag">@code</span> Optional&lt;FileInputStream&gt;&#125; for the desired</span></span><br><span class="line"><span class="comment"> * file if one exists.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;U&gt; The type of the result of the mapping function</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mapper a mapping function to apply to the value, if present</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> Optional&#125; describing the result of applying a mapping</span></span><br><span class="line"><span class="comment"> * function to the value of this &#123;<span class="doctag">@code</span> Optional&#125;, if a value is present,</span></span><br><span class="line"><span class="comment"> * otherwise an empty &#123;<span class="doctag">@code</span> Optional&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the mapping function is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>&lt;U&gt; Optional&lt;U&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; mapper)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(mapper.apply(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If a value is present, apply the provided &#123;<span class="doctag">@code</span> Optional&#125;-bearing</span></span><br><span class="line"><span class="comment"> * mapping function to it, return that result, otherwise return an empty</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Optional&#125;.  This method is similar to &#123;<span class="doctag">@link</span> #map(Function)&#125;,</span></span><br><span class="line"><span class="comment"> * but the provided mapper is one whose result is already an &#123;<span class="doctag">@code</span> Optional&#125;,</span></span><br><span class="line"><span class="comment"> * and if invoked, &#123;<span class="doctag">@code</span> flatMap&#125; does not wrap it with an additional</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Optional&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;U&gt; The type parameter to the &#123;<span class="doctag">@code</span> Optional&#125; returned by</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mapper a mapping function to apply to the value, if present</span></span><br><span class="line"><span class="comment"> *           the mapping function</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the result of applying an &#123;<span class="doctag">@code</span> Optional&#125;-bearing mapping</span></span><br><span class="line"><span class="comment"> * function to the value of this &#123;<span class="doctag">@code</span> Optional&#125;, if a value is present,</span></span><br><span class="line"><span class="comment"> * otherwise an empty &#123;<span class="doctag">@code</span> Optional&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the mapping function is null or returns</span></span><br><span class="line"><span class="comment"> * a null result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>&lt;U&gt; Optional&lt;U&gt; <span class="title">flatMap</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, Optional&lt;U&gt;&gt; mapper)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.requireNonNull(mapper.apply(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlightTicketInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String orderNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FlightTicketInfo flightTicketInfo = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Optional&lt;Optional&lt;String&gt;&gt; s1 = Optional.ofNullable(flightTicketInfo).</span><br><span class="line">			map(OptionalTest::getOrderNumber);</span><br><span class="line"></span><br><span class="line">        Optional&lt;String&gt; s2 = Optional.ofNullable(flightTicketInfo).</span><br><span class="line">			map(FlightTicketInfo::getOrderNumber);</span><br><span class="line"></span><br><span class="line">        Optional&lt;String&gt; s3 = Optional.ofNullable(flightTicketInfo).</span><br><span class="line">			flatMap(OptionalTest::getOrderNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Optional&lt;String&gt; <span class="title">getOrderNumber</span><span class="params">(FlightTicketInfo flightTicketInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(flightTicketInfo).map(f -&gt; f.getOrderNumber());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jkd1.8</tag>
        <tag>Optional</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>jdk源码_Collection</title>
    <url>/2020/10/07/jdk%E6%BA%90%E7%A0%81-Collection/</url>
    <content><![CDATA[<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><blockquote>
<p>集合结构中的根接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><blockquote>
<p>继承Iterable接口，故可调用默认方法forEach</p>
</blockquote>
<h1 id="AbstractCollection"><a href="#AbstractCollection" class="headerlink" title="AbstractCollection"></a>AbstractCollection</h1><blockquote>
<p>提供了 Collection 接口的基本实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="iterator"><a href="#iterator" class="headerlink" title="iterator()"></a>iterator()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an iterator over the elements contained in this collection.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an iterator over the elements contained in this collection</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="AbstractList-iterator"><a href="#AbstractList-iterator" class="headerlink" title="AbstractList.iterator"></a>AbstractList.iterator</h3><blockquote>
<p>public abstract class AbstractList<E> extends AbstractCollection<E> implements List<E> </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Itr"><a href="#Itr" class="headerlink" title="Itr"></a>Itr</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Index of element to be returned by subsequent call to next.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Index of element returned by most recent call to next or</span></span><br><span class="line"><span class="comment">         * previous.  Reset to -1 if this element is deleted by a call</span></span><br><span class="line"><span class="comment">         * to remove.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The modCount value that the iterator believes that the backing</span></span><br><span class="line"><span class="comment">         * List should have.  If this expectation is violated, the iterator</span></span><br><span class="line"><span class="comment">         * has detected concurrent modification.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = cursor;</span><br><span class="line">                E next = get(i);</span><br><span class="line">                lastRet = i;</span><br><span class="line">                cursor = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">                checkForComodification();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h2 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>public abstract class AbstractList<E> extends AbstractCollection<E> implements List<E><br>public class ArrayList<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, java.io.Serializable</p>
</blockquote>
<h3 id="ArrayList-size"><a href="#ArrayList-size" class="headerlink" title="ArrayList.size()"></a>ArrayList.size()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The size of the ArrayList (the number of elements it contains).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the number of elements in this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of elements in this list</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="boolean-isEmpty"><a href="#boolean-isEmpty" class="headerlink" title="boolean isEmpty()"></a>boolean isEmpty()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="boolean-contains-Object-o"><a href="#boolean-contains-Object-o" class="headerlink" title="boolean contains(Object o)"></a>boolean contains(Object o)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">            <span class="keyword">if</span> (it.next() == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">            <span class="keyword">if</span> (o.equals(it.next()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>集合可以存入空对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection collection = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    collection.add(<span class="keyword">null</span>);</span><br><span class="line">    System.out.println(collection.size()==<span class="number">0</span>);<span class="comment">//false</span></span><br><span class="line">    System.out.println(collection.contains(<span class="keyword">null</span>));<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="toArray"><a href="#toArray" class="headerlink" title="toArray()"></a>toArray()</h2><h3 id="Object-toArray"><a href="#Object-toArray" class="headerlink" title="Object[] toArray()"></a>Object[] toArray()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">    <span class="comment">// Estimate size of array; be prepared to see more or fewer elements</span></span><br><span class="line">    Object[] r = <span class="keyword">new</span> Object[size()];</span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!it.hasNext()) <span class="comment">// fewer elements than expected</span></span><br><span class="line">            <span class="keyword">return</span> Arrays.copyOf(r, i);</span><br><span class="line">        r[i] = it.next();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> it.hasNext() ? finishToArray(r, it) : r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>先根据Size()方法预建立一个与集合长度相等的数组，然后进行判断，若迭代过程中发现对象没有预期的多，则直接截取当前的数组返回</p>
</blockquote>
<h3 id="T-toArray-T-a"><a href="#T-toArray-T-a" class="headerlink" title=" T[] toArray(T[] a)"></a><T> T[] toArray(T[] a)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">    <span class="comment">// Estimate size of array; be prepared to see more or fewer elements</span></span><br><span class="line">    <span class="keyword">int</span> size = size();</span><br><span class="line">    T[] r = a.length &gt;= size ? a :</span><br><span class="line">            (T[]) java.lang.reflect.Array</span><br><span class="line">                    .newInstance(a.getClass().getComponentType(), size);</span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!it.hasNext()) &#123; <span class="comment">// fewer elements than expected</span></span><br><span class="line">            <span class="keyword">if</span> (a == r) &#123;</span><br><span class="line">                r[i] = <span class="keyword">null</span>; <span class="comment">// null-terminate</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.length &lt; i) &#123;</span><br><span class="line">                <span class="keyword">return</span> Arrays.copyOf(r, i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.arraycopy(r, <span class="number">0</span>, a, <span class="number">0</span>, i);</span><br><span class="line">                <span class="keyword">if</span> (a.length &gt; i) &#123;</span><br><span class="line">                    a[i] = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        r[i] = (T) it.next();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// more elements than expected</span></span><br><span class="line">    <span class="keyword">return</span> it.hasNext() ? finishToArray(r, it) : r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>若参数数组a的长度大于集合的长度，则直接用a数组赋值，若小于则利用反射建立一个长度等于集合长度的数组</p>
</blockquote>
<h2 id="boolean-remove-Object-o"><a href="#boolean-remove-Object-o" class="headerlink" title="boolean remove(Object o)"></a>boolean remove(Object o)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it.next() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(it.next())) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Object-equals"><a href="#Object-equals" class="headerlink" title="Object.equals"></a>Object.equals</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="boolean-containsAll-Collection-lt-gt-c"><a href="#boolean-containsAll-Collection-lt-gt-c" class="headerlink" title="boolean containsAll(Collection&lt;?&gt; c)"></a>boolean containsAll(Collection&lt;?&gt; c)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Object e : c)</span><br><span class="line">        <span class="keyword">if</span> (!contains(e))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="boolean-addAll-Collection-lt-extends-E-gt-c"><a href="#boolean-addAll-Collection-lt-extends-E-gt-c" class="headerlink" title="boolean addAll(Collection&lt;? extends E&gt; c)"></a>boolean addAll(Collection&lt;? extends E&gt; c)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (E e : c)</span><br><span class="line">        <span class="keyword">if</span> (add(e))</span><br><span class="line">            modified = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="boolean-removeAll-Collection-lt-gt-c"><a href="#boolean-removeAll-Collection-lt-gt-c" class="headerlink" title="boolean removeAll(Collection&lt;?&gt; c)"></a>boolean removeAll(Collection&lt;?&gt; c)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(c);</span><br><span class="line">    <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">    Iterator&lt;?&gt; it = iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c.contains(it.next())) &#123;</span><br><span class="line">            it.remove();</span><br><span class="line">            modified = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Objects-requireNonNull-c"><a href="#Objects-requireNonNull-c" class="headerlink" title="Objects.requireNonNull(c)"></a>Objects.requireNonNull(c)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">requireNonNull</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="default-boolean-removeIf-Predicate-lt-super-E-gt-filter"><a href="#default-boolean-removeIf-Predicate-lt-super-E-gt-filter" class="headerlink" title="default boolean removeIf(Predicate&lt;? super E&gt; filter)"></a>default boolean removeIf(Predicate&lt;? super E&gt; filter)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">removeIf</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> E&gt; filter)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(filter);</span><br><span class="line">    <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">final</span> Iterator&lt;E&gt; each = iterator();</span><br><span class="line">    <span class="keyword">while</span> (each.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (filter.test(each.next())) &#123;</span><br><span class="line">            each.remove();</span><br><span class="line">            removed = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> removed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>传入一个断言型功能函数，判断，若符合断言要求，remove</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;String&gt; collection = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"first"</span>,<span class="string">"second"</span>,<span class="string">"third"</span>,<span class="string">"--------"</span>));</span><br><span class="line">collection.removeIf(s-&gt;s.equals(<span class="string">"first"</span>));</span><br></pre></td></tr></table></figure>
<h2 id="boolean-retainAll-Collection-lt-gt-c"><a href="#boolean-retainAll-Collection-lt-gt-c" class="headerlink" title="boolean retainAll(Collection&lt;?&gt; c)"></a>boolean retainAll(Collection&lt;?&gt; c)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(c);</span><br><span class="line">    <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!c.contains(it.next())) &#123;</span><br><span class="line">            it.remove();</span><br><span class="line">            modified = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>取交集 遍历集合，若元素存在于参数集合C，则移除，并将modified置为true返回</p>
</blockquote>
<h2 id="boolean-equals-Object-o"><a href="#boolean-equals-Object-o" class="headerlink" title="boolean equals(Object o)"></a>boolean equals(Object o)</h2><blockquote>
<p>AbstractList</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> List))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    ListIterator&lt;E&gt; e1 = listIterator();</span><br><span class="line">    ListIterator&lt;?&gt; e2 = ((List&lt;?&gt;) o).listIterator();</span><br><span class="line">    <span class="keyword">while</span> (e1.hasNext() &amp;&amp; e2.hasNext()) &#123;</span><br><span class="line">        E o1 = e1.next();</span><br><span class="line">        Object o2 = e2.next();</span><br><span class="line">        <span class="keyword">if</span> (!(o1 == <span class="keyword">null</span> ? o2 == <span class="keyword">null</span> : o1.equals(o2)))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !(e1.hasNext() || e2.hasNext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>先比较参数是否和当前List指向同一对象，再比较参数是否为List实例，然后将两个List中的元素一一对比（若List对象元素不为null，则用Object.equals方法对比，若为null则判断参数List对象中元素是否为null），最后判断长度是否相等</p>
</blockquote>
<h3 id="hasNext"><a href="#hasNext" class="headerlink" title="hasNext()"></a>hasNext()</h3><blockquote>
<p>ArrayList</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cursor != size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h3><blockquote>
<p>ArrayList</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="keyword">int</span> i = cursor;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    cursor = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><blockquote>
<p>instanceof是Java中的二元运算符，左边是对象，右边是类；当对象是右边类或子类所创建对象时，返回true；否则，返回false。</p>
</blockquote>
<ul>
<li>类的实例包含本身的实例，以及所有直接或间接子类的实例</li>
<li>instanceof左边显式声明的类型与右边操作元必须是同种类或存在继承关系，也就是说需要位于同一个继承树，否则会编译错误</li>
<li>左边的对象实例不能是基础数据类型</li>
<li>null用instanceof跟任何类型比较时都是false </li>
</ul>
<h2 id="int-hashCode"><a href="#int-hashCode" class="headerlink" title="int hashCode()"></a>int hashCode()</h2><blockquote>
<p>重写Object.equals方法时必须同样重写Object.hashCode方法 </p>
</blockquote>
<ul>
<li>如果两个对象equals相等，那么这两个对象的HashCode一定也相同</li>
<li>如果两个对象的HashCode相同，不代表两个对象就相同，只能说明这两个对象在散列存储结构中，存放于同一个位置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the hash code value for this collection.  While the</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;Collection&lt;/tt&gt; interface adds no stipulations to the general</span></span><br><span class="line"><span class="comment"> * contract for the &lt;tt&gt;Object.hashCode&lt;/tt&gt; method, programmers should</span></span><br><span class="line"><span class="comment"> * take note that any class that overrides the &lt;tt&gt;Object.equals&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * method must also override the &lt;tt&gt;Object.hashCode&lt;/tt&gt; method in order</span></span><br><span class="line"><span class="comment"> * to satisfy the general contract for the &lt;tt&gt;Object.hashCode&lt;/tt&gt; method.</span></span><br><span class="line"><span class="comment"> * In particular, &lt;tt&gt;c1.equals(c2)&lt;/tt&gt; implies that</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;c1.hashCode()==c2.hashCode()&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the hash code value for this collection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Object#hashCode()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Object#equals(Object)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="default-Stream-stream"><a href="#default-Stream-stream" class="headerlink" title="default Stream stream()"></a>default Stream<E> stream()</h2><blockquote>
<p>返回一个不影响数据源的数据序列</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a sequential &#123;<span class="doctag">@code</span> Stream&#125; with this collection as its source.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method should be overridden when the &#123;<span class="doctag">@link</span> #spliterator()&#125;</span></span><br><span class="line"><span class="comment"> * method cannot return a spliterator that is &#123;<span class="doctag">@code</span> IMMUTABLE&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> CONCURRENT&#125;, or &lt;em&gt;late-binding&lt;/em&gt;. (See &#123;<span class="doctag">@link</span> #spliterator()&#125;</span></span><br><span class="line"><span class="comment"> * for details.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a sequential &#123;<span class="doctag">@code</span> Stream&#125; over the elements in this collection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@implSpec</span> The default implementation creates a sequential &#123;<span class="doctag">@code</span> Stream&#125; from the</span></span><br><span class="line"><span class="comment"> * collection's &#123;<span class="doctag">@code</span> Spliterator&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title">stream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> StreamSupport.stream(spliterator(), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk1.8_时间类</title>
    <url>/2020/09/26/jdk1-8-%E6%97%B6%E9%97%B4%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="java-time"><a href="#java-time" class="headerlink" title="java.time"></a>java.time</h1><h2 id="LocalDate-年月日"><a href="#LocalDate-年月日" class="headerlink" title="LocalDate(年月日)"></a>LocalDate(年月日)</h2><blockquote>
<p>本地日期和时间</p>
</blockquote>
<h3 id="1-最值"><a href="#1-最值" class="headerlink" title="1. 最值"></a>1. 最值</h3><blockquote>
<p>最大支持 +999999999-12-31 最小支持-999999999-01-01</p>
</blockquote>
<h3 id="2-比较方法"><a href="#2-比较方法" class="headerlink" title="2. 比较方法"></a>2. 比较方法</h3><p><img src="1.jpg" alt=""></p>
<blockquote>
<p>equals </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">LocalDate tomorrow = today.plus(<span class="number">1</span>, ChronoUnit.DAYS);</span><br><span class="line">LocalDate yesterday = tomorrow.minusDays(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span>(today.equals(tomorrow.minusDays(<span class="number">1</span>))) &#123;</span><br><span class="line">    System.out.println(<span class="string">"true"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"false"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-now-方法"><a href="#3-now-方法" class="headerlink" title="3. now()方法"></a>3. now()方法</h3><blockquote>
<p>获取当前时间，无参时为当前系统默认时区，参数为时区id </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtains the current date from the system clock in the specified time-zone.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This will query the &#123;<span class="doctag">@link</span> Clock#system(ZoneId) system clock&#125; to obtain the current date.</span></span><br><span class="line"><span class="comment"> * Specifying the time-zone avoids dependence on the default time-zone.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Using this method will prevent the ability to use an alternate clock for testing</span></span><br><span class="line"><span class="comment"> * because the clock is hard-coded.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> zone  the zone ID to use, not null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the current date using the system clock, not null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">now</span><span class="params">(ZoneId zone)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> now(Clock.system(zone));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtains the current date from the system clock in the default time-zone.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This will query the &#123;<span class="doctag">@link</span> Clock#systemDefaultZone() system clock&#125; in the default</span></span><br><span class="line"><span class="comment"> * time-zone to obtain the current date.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Using this method will prevent the ability to use an alternate clock for testing</span></span><br><span class="line"><span class="comment"> * because the clock is hard-coded.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the current date using the system clock and default time-zone, not null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">now</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> now(Clock.systemDefaultZone()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-plus-方法"><a href="#4-plus-方法" class="headerlink" title="4. plus()方法"></a>4. plus()方法</h3><blockquote>
<p>public LocalDate plus(long amountToAdd, TemporalUnit unit)  amountToAdd 要增加的总数 ；unit 时间单位 详见 ChronoUnit(TemporalUnit的实现类)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">LocalDate tomorrow = today.plus(<span class="number">1</span>, ChronoUnit.DAYS);</span><br><span class="line"></span><br><span class="line"><span class="comment">//plusYears(long yearsToAdd)\plusMonths(long monthsToAdd)\plusWeeks(long weeksToAdd)\plusDays(long daysToAdd)</span></span><br></pre></td></tr></table></figure>
<h3 id="5-minus-方法"><a href="#5-minus-方法" class="headerlink" title="5. minus()方法"></a>5. minus()方法</h3><blockquote>
<p>public LocalDate minus(long amountToSubtract, TemporalUnit unit)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">LocalDate tomorrow = today.minus(<span class="number">1</span>, ChronoUnit.DAYS);</span><br><span class="line"></span><br><span class="line"><span class="comment">//minusYears(long yearsToSubtract)\minusMonths(long monthsToSubtract)\minusWeeks(long weeksToSubtract)\minusDays(long daysToSubtract)</span></span><br></pre></td></tr></table></figure>
<h3 id="6-of-方法、getDayOfWeek-方法"><a href="#6-of-方法、getDayOfWeek-方法" class="headerlink" title="6. of()方法、getDayOfWeek()方法"></a>6. of()方法、getDayOfWeek()方法</h3><blockquote>
<p>LocalDate of(int year, Month month, int dayOfMonth)/LocalDate of(int year, int month, int dayOfMonth)<br>LocalDate.getDayOfWeek() 判断传入日期是一周中的第几天  return DayOfWeek对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate independenceDay = LocalDate.of(<span class="number">2014</span>, Month.JULY, <span class="number">4</span>);</span><br><span class="line">DayOfWeek dayOfWeek = independenceDay.getDayOfWeek();</span><br><span class="line">System.out.println(dayOfWeek);<span class="comment">//FRIDAY</span></span><br><span class="line">System.out.println(dayOfWeek.getValue());<span class="comment">//5</span></span><br></pre></td></tr></table></figure>
<h3 id="7-DateTimeFormatter"><a href="#7-DateTimeFormatter" class="headerlink" title="7. DateTimeFormatter"></a>7. DateTimeFormatter</h3><blockquote>
<p>格式化时间，线程安全，类内创建一次可复用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例化 不指定时区</span></span><br><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm"</span>);</span><br><span class="line"><span class="comment">//实例化 指定时区</span></span><br><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"E, yyyy-MMMM-dd HH:mm"</span>, Locale.US);</span><br><span class="line"></span><br><span class="line">ZonedDateTime zdt = ZonedDateTime.now();</span><br><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd'T'HH:mm ZZZZ"</span>);</span><br><span class="line">System.out.println(formatter.format(zdt));<span class="comment">//2020-09-28T11:55 GMT+08:00</span></span><br><span class="line"></span><br><span class="line">DateTimeFormatter zhFormatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy MMM dd EE HH:mm"</span>, Locale.CHINA);</span><br><span class="line">System.out.println(zhFormatter.format(zdt));<span class="comment">//2020 九月 28 星期一 11:55</span></span><br><span class="line"></span><br><span class="line">DateTimeFormatter usFormatter = DateTimeFormatter.ofPattern(<span class="string">"E, MMMM/dd/yyyy HH:mm"</span>, Locale.US);</span><br><span class="line">System.out.println(usFormatter.format(zdt));<span class="comment">//Mon, September/28/2020 11:55</span></span><br><span class="line"></span><br><span class="line">System.out.println(DateTimeFormatter.ISO_DATE_TIME.format(zdt));<span class="comment">//2020-09-28T11:55:39.209+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>保留字母定义</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* All letters <span class="string">'A'</span> to <span class="string">'Z'</span> and <span class="string">'a'</span> to <span class="string">'z'</span> are reserved as pattern letters. The</span><br><span class="line">* following pattern letters are defined:</span><br><span class="line">* &lt;pre&gt;</span><br><span class="line">*  Symbol  Meaning                     Presentation      Examples</span><br><span class="line">*  ------  -------                     ------------      -------</span><br><span class="line">*   G       era                         text              AD; Anno Domini; A</span><br><span class="line">*   u       year                        year              <span class="number">2004</span>; <span class="number">04</span></span><br><span class="line">*   y       year-of-era                 year              <span class="number">2004</span>; <span class="number">04</span></span><br><span class="line">*   D       day-of-year                 number            <span class="number">189</span></span><br><span class="line">*   M/L     month-of-year               number/text       <span class="number">7</span>; <span class="number">07</span>; Jul; July; J</span><br><span class="line">*   d       day-of-month                number            <span class="number">10</span></span><br><span class="line">*</span><br><span class="line">*   Q/q     quarter-of-year             number/text       <span class="number">3</span>; <span class="number">03</span>; Q3; <span class="number">3</span>rd quarter</span><br><span class="line">*   Y       week-based-year             year              <span class="number">1996</span>; <span class="number">96</span></span><br><span class="line">*   w       week-of-week-based-year     number            <span class="number">27</span></span><br><span class="line">*   W       week-of-month               number            <span class="number">4</span></span><br><span class="line">*   E       day-of-week                 text              Tue; Tuesday; T</span><br><span class="line">*   e/c     localized day-of-week       number/text       <span class="number">2</span>; <span class="number">02</span>; Tue; Tuesday; T</span><br><span class="line">*   F       week-of-month               number            <span class="number">3</span></span><br><span class="line">*</span><br><span class="line">*   a       am-pm-of-day                text              PM</span><br><span class="line">*   h       clock-hour-of-am-pm (<span class="number">1</span>-<span class="number">12</span>)  number            <span class="number">12</span></span><br><span class="line">*   K       hour-of-am-pm (<span class="number">0</span>-<span class="number">11</span>)        number            <span class="number">0</span></span><br><span class="line">*   k       clock-hour-of-am-pm (<span class="number">1</span>-<span class="number">24</span>)  number            <span class="number">0</span></span><br><span class="line">*</span><br><span class="line">*   H       hour-of-day (<span class="number">0</span>-<span class="number">23</span>)          number            <span class="number">0</span></span><br><span class="line">*   m       minute-of-hour              number            <span class="number">30</span></span><br><span class="line">*   s       second-of-minute            number            <span class="number">55</span></span><br><span class="line">*   S       fraction-of-second          fraction          <span class="number">978</span></span><br><span class="line">*   A       milli-of-day                number            <span class="number">1234</span></span><br><span class="line">*   n       nano-of-second              number            <span class="number">987654321</span></span><br><span class="line">*   N       nano-of-day                 number            <span class="number">1234000000</span></span><br><span class="line">*</span><br><span class="line">*   V       time-zone ID                zone-id           America/Los_Angeles; Z; -<span class="number">08</span>:<span class="number">30</span></span><br><span class="line">*   z       time-zone name              zone-name         Pacific Standard Time; PST</span><br><span class="line">*   O       localized zone-offset       offset-O          GMT+<span class="number">8</span>; GMT+<span class="number">08</span>:<span class="number">00</span>; UTC-<span class="number">08</span>:<span class="number">00</span>;</span><br><span class="line">*   X       zone-offset <span class="string">'Z'</span> <span class="keyword">for</span> zero    offset-X          Z; -<span class="number">08</span>; -<span class="number">0830</span>; -<span class="number">08</span>:<span class="number">30</span>; -<span class="number">083015</span>; -<span class="number">08</span>:<span class="number">30</span>:<span class="number">15</span>;</span><br><span class="line">*   x       zone-offset                 offset-x          +<span class="number">0000</span>; -<span class="number">08</span>; -<span class="number">0830</span>; -<span class="number">08</span>:<span class="number">30</span>; -<span class="number">083015</span>; -<span class="number">08</span>:<span class="number">30</span>:<span class="number">15</span>;</span><br><span class="line">*   Z       zone-offset                 offset-Z          +<span class="number">0000</span>; -<span class="number">0800</span>; -<span class="number">08</span>:<span class="number">00</span>;</span><br><span class="line">*</span><br><span class="line">*   p       pad next                    pad modifier      <span class="number">1</span></span><br><span class="line">*</span><br><span class="line">*   <span class="string">'       escape for text             delimiter</span></span><br><span class="line"><span class="string">*   '</span><span class="string">'      single quote                literal           '</span></span><br><span class="line">*   [       optional section start</span><br><span class="line">*   ]       optional section end</span><br><span class="line">*   #       reserved for future use</span><br><span class="line">*   &#123;       reserved <span class="keyword">for</span> future use</span><br><span class="line">*   &#125;       reserved <span class="keyword">for</span> future use</span><br></pre></td></tr></table></figure>
<h2 id="LocalDateTime-年月日时分秒"><a href="#LocalDateTime-年月日时分秒" class="headerlink" title="LocalDateTime(年月日时分秒)"></a>LocalDateTime(年月日时分秒)</h2><blockquote>
<p>本地日期和时间</p>
</blockquote>
<h3 id="1-常用方法案例"><a href="#1-常用方法案例" class="headerlink" title="1. 常用方法案例"></a>1. 常用方法案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime ldt = LocalDateTime.of(<span class="number">2014</span>, Month.DECEMBER, <span class="number">31</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line"></span><br><span class="line">DayOfWeek dayOfWeek = ldt.getDayOfWeek();</span><br><span class="line">System.out.println(dayOfWeek);      <span class="comment">// WEDNESDAY</span></span><br><span class="line"></span><br><span class="line">Month month = ldt.getMonth();</span><br><span class="line">System.out.println(month);          <span class="comment">// DECEMBER</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> minuteOfDay = ldt.getLong(ChronoField.MINUTE_OF_DAY);</span><br><span class="line">System.out.println(minuteOfDay);    <span class="comment">// 23*60+59=1439</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> dayOfWeekLong = ldt.getLong(ChronoField.DAY_OF_WEEK);</span><br><span class="line">System.out.println(dayOfWeekLong);    <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">LocalDateTime parsed = LocalDateTime.parse(<span class="string">"2016-12-01 23:59:59"</span>, formatter);</span><br><span class="line">String string = parsed.format(formatter);</span><br><span class="line">System.out.println(string);     <span class="comment">// 2016-12-01 23:59:59</span></span><br></pre></td></tr></table></figure>
<h3 id="2-Instant时间戳"><a href="#2-Instant时间戳" class="headerlink" title="2. Instant时间戳"></a>2. Instant时间戳</h3><blockquote>
<p>在java.util.Date类与LocalDate、LocalDateTime类之间转换中 均可以通过Instant作为中间类完成转换</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime ldt = LocalDateTime.of(<span class="number">2014</span>, Month.DECEMBER, <span class="number">31</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line"><span class="comment">//获取当前默认时区下ldt转换成的时间戳</span></span><br><span class="line">      Instant instant = ldt.atZone(ZoneId.systemDefault()).toInstant();</span><br><span class="line"></span><br><span class="line">      Date legacyDate = Date.from(instant);</span><br><span class="line">      System.out.println(legacyDate);     <span class="comment">// Wed Dec 31 23:59:59 CET 2014</span></span><br></pre></td></tr></table></figure>

<h2 id="LocalTime-时分秒"><a href="#LocalTime-时分秒" class="headerlink" title="LocalTime(时分秒)"></a>LocalTime(时分秒)</h2><blockquote>
<p>本地日期和时间</p>
</blockquote>
<h3 id="1-Clock"><a href="#1-Clock" class="headerlink" title="1. Clock"></a>1. Clock</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Clock clock = Clock.systemDefaultZone();</span><br><span class="line"><span class="comment">//返回1970-01-01T00:00Z (UTC)至今的毫秒数，即按毫秒单位的unix时间戳</span></span><br><span class="line"><span class="keyword">long</span> t0 = clock.millis();</span><br><span class="line">System.out.println(t0);</span><br><span class="line"></span><br><span class="line">Instant instant = clock.instant();</span><br><span class="line">Date legacyDate = Date.from(instant);</span><br><span class="line">System.out.println(legacyDate);</span><br></pre></td></tr></table></figure>
<h3 id="2-ZoneId-getRules-isBefore"><a href="#2-ZoneId-getRules-isBefore" class="headerlink" title="2. ZoneId.getRules(),isBefore()"></a>2. ZoneId.getRules(),isBefore()</h3><blockquote>
<p>getRules 当前默认时区与指定时区间的转换公式<br>isBefore 当前时间是否在指定时间之前<br>ChronoUnit.between 按指定时间单位计算俩时间的差</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZoneId zone1 = ZoneId.of(<span class="string">"Europe/Berlin"</span>);</span><br><span class="line">ZoneId zone2 = ZoneId.of(<span class="string">"Brazil/East"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(zone1.getRules());<span class="comment">//ZoneRules[currentStandardOffset=+01:00]</span></span><br><span class="line">System.out.println(zone2.getRules());<span class="comment">//ZoneRules[currentStandardOffset=-03:00]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// time</span></span><br><span class="line">LocalTime now1 = LocalTime.now(zone1);<span class="comment">//10:17:39.043</span></span><br><span class="line">LocalTime now2 = LocalTime.now(zone2);<span class="comment">//05:17:39.050</span></span><br><span class="line"></span><br><span class="line">System.out.println(now1);</span><br><span class="line">System.out.println(now2);</span><br><span class="line"></span><br><span class="line">System.out.println(now1.isBefore(now2));  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> hoursBetween = ChronoUnit.HOURS.between(now1, now2);</span><br><span class="line"><span class="keyword">long</span> minutesBetween = ChronoUnit.MINUTES.between(now1, now2);</span><br><span class="line">System.out.println(hoursBetween);<span class="comment">//-4</span></span><br><span class="line">System.out.println(minutesBetween);<span class="comment">//-299</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// create time</span></span><br><span class="line"></span><br><span class="line">LocalTime now = LocalTime.now();</span><br><span class="line">System.out.println(now);<span class="comment">//16:17:39.052</span></span><br><span class="line"></span><br><span class="line">LocalTime late = LocalTime.of(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line">System.out.println(late);<span class="comment">//23:59:59</span></span><br><span class="line">DateTimeFormatter germanFormatter =</span><br><span class="line">                DateTimeFormatter</span><br><span class="line">                        .ofLocalizedTime(FormatStyle.SHORT)</span><br><span class="line">                        .withLocale(Locale.GERMAN);</span><br><span class="line"></span><br><span class="line">LocalTime formateTime = LocalTime.parse(<span class="string">"13:37"</span>, germanFormatter);</span><br><span class="line">System.out.println(formateTime);<span class="comment">//13:37</span></span><br></pre></td></tr></table></figure>
<h2 id="ZonedDateTime"><a href="#ZonedDateTime" class="headerlink" title="ZonedDateTime"></a>ZonedDateTime</h2><blockquote>
<p>带时区的日期和时间(ISO-8601)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZonedDateTime  zonedDateTime = ZonedDateTime.now();</span><br><span class="line">System.out.println(zonedDateTime);<span class="comment">//2020-09-28T17:19:44.836+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jkd1.8</tag>
        <tag>时间类</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk1.8_默认方法</title>
    <url>/2020/10/07/jdk1-8-%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(operator);</span><br><span class="line">        <span class="keyword">final</span> ListIterator&lt;E&gt; li = <span class="keyword">this</span>.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (li.hasNext()) &#123;</span><br><span class="line">            li.set(operator.apply(li.next()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">        Object[] a = <span class="keyword">this</span>.toArray();</span><br><span class="line">        Arrays.sort(a, (Comparator) c);</span><br><span class="line">        ListIterator&lt;E&gt; i = <span class="keyword">this</span>.listIterator();</span><br><span class="line">        <span class="keyword">for</span> (Object e : a) &#123;</span><br><span class="line">            i.next();</span><br><span class="line">            i.set((E) e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>接口类中支持申明带有实现的方法，可以由接口实现类的实例调用</p>
</blockquote>
<h1 id="和抽象类的区别"><a href="#和抽象类的区别" class="headerlink" title="和抽象类的区别"></a>和抽象类的区别</h1><ul>
<li>一个类只能继承一个抽象类；但是一个类可以实现多个接口。</li>
<li>抽象类有实例变量，而接口只能有类变量</li>
</ul>
<h1 id="多继承多实现中的优先级"><a href="#多继承多实现中的优先级" class="headerlink" title="多继承多实现中的优先级"></a>多继承多实现中的优先级</h1><blockquote>
<p>由于一个类可以实现多个接口，所以当一个类继承了多个签名相同的方法，类在选择方法时的优先级规则：</p>
</blockquote>
<ul>
<li>类中的方法优先级最高，类或父类中声明的方法的优先级高于任何声明为默认方法的优先级。</li>
<li>如果第一条无法判断，那么子接口的优先级更高：方法签名相同时，优先选择拥有最具体实现的默认方法的接口， 即如果B继承了A，那么B就比A更加具体。</li>
<li>最后，如果还是无法判断，继承了多个接口的类必须通过显式覆盖和调用期望的方法， 显式地选择使用哪一个默认方法的实现。</li>
</ul>
<h2 id="场景1："><a href="#场景1：" class="headerlink" title="场景1："></a>场景1：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello from A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello from B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> C().hello();<span class="comment">//hello from B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<blockquote>
<p>类中无方法，B继承了A，故认为B中的hello()更具体，输出“hello from B”</p>
</blockquote>
<h2 id="场景2："><a href="#场景2：" class="headerlink" title="场景2："></a>场景2：</h2><blockquote>
<p>若C继承了A的实现类D</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> C().hello();<span class="comment">//hello from B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<blockquote>
<p>C继承了D，但D没有对A的默认方法进行重写，故比较AB，还是输出“hello from B”</p>
</blockquote>
<h2 id="场景3："><a href="#场景3：" class="headerlink" title="场景3："></a>场景3：</h2><blockquote>
<p>若D中覆盖了A的默认方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello from D"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>父类中方法具有更高优先级，打印“hello from D”</p>
</blockquote>
<h2 id="场景4："><a href="#场景4：" class="headerlink" title="场景4："></a>场景4：</h2><blockquote>
<p>若B不再继承A</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello from A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello from B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> C().hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt=""></p>
<blockquote>
<p>由于编译器无法识别A还是B的实现更加具体，所以会抛出编译错误：“C inherits unrelated defaults for hello() from types A and B”。<br>解决冲突，可以在C中覆盖hello()方法并在方法内显示的选择调用A还是B的方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 显式地选择调用接口B中的方法</span></span><br><span class="line">        <span class="comment">// 同理，要调用接口A中的方法，可以这样：A.super.hello()</span></span><br><span class="line">        B.<span class="keyword">super</span>.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> C().hello();<span class="comment">//hello from B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jkd1.8</tag>
        <tag>默认方法</tag>
      </tags>
  </entry>
  <entry>
    <title>首次收到打赏</title>
    <url>/2020/09/30/%E9%A6%96%E6%AC%A1%E6%94%B6%E5%88%B0%E6%89%93%E8%B5%8F/</url>
    <content><![CDATA[<h1 id="收到了来自师傅的打赏"><a href="#收到了来自师傅的打赏" class="headerlink" title="收到了来自师傅的打赏"></a>收到了来自师傅的打赏</h1><h2 id="有师傅真是太好了！-●’◡’●"><a href="#有师傅真是太好了！-●’◡’●" class="headerlink" title="有师傅真是太好了！(●’◡’●)"></a>有师傅真是太好了！(●’◡’●)</h2><p><img src="1.jpg" alt=""><br><img src="2.jpg" alt=""></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>简单代码演示控制反转IOC和依赖注入DI</title>
    <url>/2020/04/17/%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%A8%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%ACIOC%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5DI/</url>
    <content><![CDATA[<h1 id="ioc（Inversion-of-Control）"><a href="#ioc（Inversion-of-Control）" class="headerlink" title="ioc（Inversion of Control）"></a>ioc（Inversion of Control）</h1><blockquote>
<p>控制反转，也可以称为依赖倒置，即当A要调用B时，A无需主动获取，会有人主动把B送过来供A使用，以减少在A的代码中存在B，导致模块间的高度耦合。</p>
</blockquote>
<h2 id="正常的代码控制流程"><a href="#正常的代码控制流程" class="headerlink" title="正常的代码控制流程"></a>正常的代码控制流程</h2><p>1.创建一个接口Car</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.定义两种车实现接口car</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"benz go......"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BMW</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"bmw go......"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.人要开车</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Car car=<span class="keyword">new</span> Benz();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">DriveCar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"begin drive"</span>);</span><br><span class="line">    car.go();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这种方式是我们常见的代码控制流程，人想要开车，需要自己实例化，且这个人只能开一种车。</li>
<li>如何让他可以想开什么车就开什么车呢？<blockquote>
<p>通过依赖注入</p>
</blockquote>
</li>
</ul>
<h2 id="依赖注入的方式DI（Dependency-Injection）"><a href="#依赖注入的方式DI（Dependency-Injection）" class="headerlink" title="依赖注入的方式DI（Dependency Injection）"></a>依赖注入的方式DI（Dependency Injection）</h2><ul>
<li>依赖注入是实现控制反转的方式之一。</li>
<li>看一下修改后的person类  </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Car car=<span class="keyword">null</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Car car)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.car=car;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">driveCar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"begin drive"</span>);</span><br><span class="line">    car.go();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>现在的Person类已经不自己实例化车的对象了，而是通过构造函数来获得车的对象，所以，这个类就可以开各种车了，只要这个车实现了Car接口就可以。看一下如何使用Person类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Person person=<span class="keyword">new</span> Person(<span class="keyword">new</span> Benz());</span><br><span class="line">  person.driveCar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>现在的Person类可以开不止一种车，只要你通过构造函数传递进来。在这个例子中，Car对象就是Person类的依赖，当我们实例化Person类时，将一个Car的实例传递给Person类，就是依赖注入，我们的Person类从而实现了控制反转。<br>控制反转到底反转了什么？有种说法是这样的：所谓控制反转，反转的是获取对象依赖的过程。控制权反转后，获取依赖对象的过程由自身管理变为由IOC容器注入。</p>
</blockquote>
<h2 id="Spring实现依赖注入的方式"><a href="#Spring实现依赖注入的方式" class="headerlink" title="Spring实现依赖注入的方式"></a>Spring实现依赖注入的方式</h2><blockquote>
<p>在上面的这行代码中Person p=new Person(new Benz());，我们通过手动的方式new了一个Benz()的对象，然后将其注入到Person类中。而Spring不这么干，因为Spring觉得，你这行代码实例化了一个具体的Benz类，如果你以后想要在这里实例化一个BMW类的话，岂不是要修改代码？那我干脆写到配置文件里好了，即便你将来要该注意，至少不需要修改代码，于是就有了下面的配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.XXX.Benz"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.XXX.Person"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>从配置文件中获取Person类的对象时，car对象会被自动装配进来，而person对象不需要关心到底是哪个具体的类被传递进来了。所以，Spring作为一个IOC框架主要做了两步：创建对象和组装对象之间的关系。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>钉钉数据对接说明</title>
    <url>/2020/09/30/%E9%92%89%E9%92%89%E6%95%B0%E6%8D%AE%E5%AF%B9%E6%8E%A5%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="API调用说明"><a href="#API调用说明" class="headerlink" title="API调用说明"></a>API调用说明</h1><blockquote>
<p>钉钉服务端api文档 <a href="https://ding-doc.dingtalk.com/doc#/serverapi2/gh60vz" target="_blank" rel="noopener">https://ding-doc.dingtalk.com/doc#/serverapi2/gh60vz</a><br>钉钉api调试工具 <a href="https://open-dev.dingtalk.com/apiExplorer#/?devType=org&amp;api=/get_jsapi_ticket" target="_blank" rel="noopener">https://open-dev.dingtalk.com/apiExplorer#/?devType=org&amp;api=/get_jsapi_ticket</a></p>
</blockquote>
<h2 id="部门"><a href="#部门" class="headerlink" title="部门"></a>部门</h2><h3 id="获取部门信息"><a href="#获取部门信息" class="headerlink" title="获取部门信息"></a>获取部门信息</h3><ol>
<li>获取部门ID列表<blockquote>
<p><a href="https://oapi.dingtalk.com/department/list?access_token=ACCESS_TOKEN" target="_blank" rel="noopener">https://oapi.dingtalk.com/department/list?access_token=ACCESS_TOKEN</a></p>
</blockquote>
</li>
<li>根据部门ID获取部门详情<blockquote>
<p><a href="https://oapi.dingtalk.com/department/get?access_token=ACCESS_TOKEN&amp;id=123" target="_blank" rel="noopener">https://oapi.dingtalk.com/department/get?access_token=ACCESS_TOKEN&amp;id=123</a></p>
</blockquote>
</li>
</ol>
<h4 id="关键字段说明"><a href="#关键字段说明" class="headerlink" title="关键字段说明"></a>关键字段说明</h4><ol>
<li>department_id <blockquote>
<p>部门id</p>
</blockquote>
</li>
<li>department_name <blockquote>
<p>部门名称</p>
</blockquote>
</li>
<li>department_parent_id <blockquote>
<p>父部门id，根部门为1</p>
</blockquote>
</li>
<li>department_status <blockquote>
<p>部门状态：(空值表示正常) 、CHANGED(改动过)、DELETED(部门取消)</p>
</blockquote>
</li>
</ol>
<h3 id="部门表"><a href="#部门表" class="headerlink" title="部门表"></a>部门表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ding_department (</span><br><span class="line">  department_id <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  department_name <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  department_parent_id <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  department_status <span class="built_in">VARCHAR</span>(<span class="number">64</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (department_id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_department.department_id <span class="keyword">IS</span> <span class="string">'部门id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_department.department_name <span class="keyword">IS</span> <span class="string">'部门名称'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_department.department_parent_id <span class="keyword">IS</span> <span class="string">'上级部门id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_department.department_status <span class="keyword">IS</span> <span class="string">'可用状态'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="员工"><a href="#员工" class="headerlink" title="员工"></a>员工</h2><h3 id="员工信息"><a href="#员工信息" class="headerlink" title="员工信息"></a>员工信息</h3><ol>
<li>获取员工ID列表<blockquote>
<p><a href="https://oapi.dingtalk.com/topapi/smartwork/hrm/employee/queryonjob?access_token=ACCESS_TOKEN" target="_blank" rel="noopener">https://oapi.dingtalk.com/topapi/smartwork/hrm/employee/queryonjob?access_token=ACCESS_TOKEN</a><br>参数说明:<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/rafx8t" target="_blank" rel="noopener">https://ding-doc.dingtalk.com/doc#/serverapi2/rafx8t</a></p>
</blockquote>
</li>
<li>根据ID获得员工信息<blockquote>
<p><a href="https://oapi.dingtalk.com/user/get?access_token=ACCESS_TOKEN&amp;userid=zhangsan" target="_blank" rel="noopener">https://oapi.dingtalk.com/user/get?access_token=ACCESS_TOKEN&amp;userid=zhangsan</a></p>
</blockquote>
</li>
</ol>
<h4 id="关键字段说明-1"><a href="#关键字段说明-1" class="headerlink" title="关键字段说明"></a>关键字段说明</h4><ol>
<li>employee_department_ids<blockquote>
<p>用户所在部门id列表，注意，是列表。</p>
</blockquote>
</li>
<li>employee_identity_card<blockquote>
<p>身份证号</p>
</blockquote>
</li>
<li>employee_status<blockquote>
<p>员工状态：可用，禁用</p>
</blockquote>
</li>
</ol>
<h3 id="员工表"><a href="#员工表" class="headerlink" title="员工表"></a>员工表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ding_employee (</span><br><span class="line">  employee_union_id <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  employee_name <span class="built_in">VARCHAR</span>(<span class="number">64</span>),</span><br><span class="line">  employee_department_ids <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  employee_identity_card <span class="built_in">VARCHAR2</span>(<span class="number">64</span>),</span><br><span class="line">  employee_status <span class="built_in">VARCHAR2</span>(<span class="number">64</span>),</span><br><span class="line">  employee_user_id <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (employee_union_id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_employee.employee_union_id <span class="keyword">IS</span> <span class="string">'员工unionid'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_employee.employee_name <span class="keyword">IS</span> <span class="string">'员工姓名'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_employee.employee_department_ids <span class="keyword">IS</span> <span class="string">'员工部门名称'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_employee.employee_identity_card <span class="keyword">IS</span> <span class="string">'员工身份证号码'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_employee.employee_status <span class="keyword">IS</span> <span class="string">'员工状态：可用，禁用'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_employee.employee_user_id <span class="keyword">IS</span> <span class="string">'员工id'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><ol>
<li>获取流程模板process_code<blockquote>
<p>process_code流程模板唯一标识，可在OA管理后台编辑审批表单部分的url中获取<br><img src="1.jpg" alt=""><br><img src="2.jpg" alt=""><br><img src="3.jpg" alt=""></p>
</blockquote>
</li>
<li>根据process_code批量获取据当前时间120天之内的任意时间段审批实例ID列表<blockquote>
<p><a href="https://ding-doc.dingtalk.com/doc#/serverapi2/hh8lx5" target="_blank" rel="noopener">https://ding-doc.dingtalk.com/doc#/serverapi2/hh8lx5</a></p>
</blockquote>
</li>
<li>根据审批实例id获取审批实例详情<blockquote>
<p><a href="https://ding-doc.dingtalk.com/doc#/serverapi2/xgqkvx" target="_blank" rel="noopener">https://ding-doc.dingtalk.com/doc#/serverapi2/xgqkvx</a> </p>
</blockquote>
</li>
</ol>
<h3 id="关键字段说明-2"><a href="#关键字段说明-2" class="headerlink" title="关键字段说明"></a>关键字段说明</h3><ol>
<li>business_id<blockquote>
<p>审批实例业务编号 一条审批流虽然会因为更新或撤销等操作新建审批流实例，但business_id仍保留一致</p>
</blockquote>
</li>
<li>Attached_process_instance_ids<blockquote>
<p>审批附属实例列表，当已经通过的审批实例被修改或重置，会生成一个新的实例，作为继承审批实例的附属。如果想知道当前已经通过的审批实例的状态，可以依次遍历它的附属列表，查询里面每个实例的biz_action</p>
</blockquote>
</li>
<li>biz biz_action<blockquote>
<p>审批实例业务动作，MODIFY表示该审批实例是基于原来的实例修改而来的，REVOKE表示该审批实例对原来的实例进行撤销，NONE表示正常发起</p>
</blockquote>
</li>
<li>form_component_values<blockquote>
<p>表单详情列表,流程中表单数据的集合</p>
</blockquote>
</li>
<li>status<blockquote>
<p>审批状态，分为NEW（新创造）RUNNING（运行中）终止（被终止）完成（完成）</p>
</blockquote>
</li>
</ol>
<h3 id="重型员工请假流程表"><a href="#重型员工请假流程表" class="headerlink" title="重型员工请假流程表"></a>重型员工请假流程表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ding_leave_approval (</span><br><span class="line">  leave_id <span class="built_in">NUMBER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  leave_employee_user_id <span class="built_in">NUMBER</span>,</span><br><span class="line">  leave_start <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_end <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_duration <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_type <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_reason <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_title <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_result <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_status <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_business_id <span class="built_in">NUMBER</span>,</span><br><span class="line">  leave_attached_ids <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_biz_action <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (leave_id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_id <span class="keyword">IS</span> <span class="string">'请假id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_employee_user_id <span class="keyword">IS</span> <span class="string">'请假职员id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_start <span class="keyword">IS</span> <span class="string">'请假开始时间'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_end <span class="keyword">IS</span> <span class="string">'请假结束时间'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_duration <span class="keyword">IS</span> <span class="string">'请假时长'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_type <span class="keyword">IS</span> <span class="string">'请假类型'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_reason <span class="keyword">IS</span> <span class="string">'请假原因'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_title <span class="keyword">IS</span> <span class="string">'标题'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_result <span class="keyword">IS</span> <span class="string">'结果'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_status <span class="keyword">IS</span> <span class="string">'状态'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_business_id <span class="keyword">IS</span> <span class="string">'业务流程id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_attached_ids <span class="keyword">IS</span> <span class="string">'附属流程id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_biz_action <span class="keyword">IS</span> <span class="string">'审批实例业务动作'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="考勤"><a href="#考勤" class="headerlink" title="考勤"></a>考勤</h2><ol>
<li>根据用户ID列表获取180天内的考勤结果，一次最多50条<blockquote>
<p><a href="https://oapi.dingtalk.com/attendance/list?access_token=ACCESS_TOKEN" target="_blank" rel="noopener">https://oapi.dingtalk.com/attendance/list?access_token=ACCESS_TOKEN</a></p>
</blockquote>
</li>
<li>参数说明:<blockquote>
<p><a href="https://ding-doc.dingtalk.com/doc#/serverapi2/ul33mm" target="_blank" rel="noopener">https://ding-doc.dingtalk.com/doc#/serverapi2/ul33mm</a></p>
</blockquote>
</li>
</ol>
<h3 id="关键字段说明-3"><a href="#关键字段说明-3" class="headerlink" title="关键字段说明"></a>关键字段说明</h3><ol>
<li>base_check_time<blockquote>
<p>打卡基准时间</p>
</blockquote>
</li>
<li>user_check_time<blockquote>
<p>员工实际打卡时间</p>
</blockquote>
</li>
<li>check_type<blockquote>
<p>打卡类型-上下班</p>
</blockquote>
</li>
<li>time_result<blockquote>
<p>打卡的时间结果</p>
</blockquote>
</li>
<li>locationResult<blockquote>
<p>位置结果(范围外/范围内)</p>
</blockquote>
</li>
</ol>
<h3 id="考勤表"><a href="#考勤表" class="headerlink" title="考勤表"></a>考勤表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ding_attendance (</span><br><span class="line">  attendance_id <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  attendance_employee_user_id <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  attendance_base_check_time <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  attendance_user_check_time <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  attendance_group_id <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  attendance_check_type <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  attendance_time_result <span class="built_in">VARCHAR</span>(<span class="number">64</span>),</span><br><span class="line">  attendance_location_result <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  attendance_work_date <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (attendance_id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_id <span class="keyword">IS</span> <span class="string">'考勤id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_employee_user_id <span class="keyword">IS</span> <span class="string">'考勤员工id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_base_check_time <span class="keyword">IS</span> <span class="string">'打卡基准时间'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_user_check_time <span class="keyword">IS</span> <span class="string">'员工实际打卡时间'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_group_id <span class="keyword">IS</span> <span class="string">'考勤组id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_check_type <span class="keyword">IS</span> <span class="string">'打卡类型-上下班'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_time_result <span class="keyword">IS</span> <span class="string">'时间结果'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_location_result <span class="keyword">IS</span> <span class="string">'打卡范围结果'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_work_date <span class="keyword">IS</span> <span class="string">'工作日'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>钉钉</tag>
      </tags>
  </entry>
</search>
