<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SQLServer查询跟踪</title>
    <url>/2020/10/29/SQLServer%E6%9F%A5%E8%AF%A2%E8%B7%9F%E8%B8%AA/</url>
    <content><![CDATA[<h1 id="SQL-Server-Profiler"><a href="#SQL-Server-Profiler" class="headerlink" title="SQL Server Profiler"></a>SQL Server Profiler</h1><blockquote>
<p>数据库性能工具</p>
</blockquote>
<h2 id="1-新建跟踪"><a href="#1-新建跟踪" class="headerlink" title="1.新建跟踪"></a>1.新建跟踪</h2><blockquote>
<p>文件-新建跟踪 </p>
</blockquote>
<h2 id="2-事件选择"><a href="#2-事件选择" class="headerlink" title="2.事件选择"></a>2.事件选择</h2><p><img src="1.jpg" alt=""></p>
<blockquote>
<p>Stored Procedures：TextData 根据sql中的文本值进行过滤 </p>
</blockquote>
<p><img src="2.jpg" alt=""></p>
<blockquote>
<p>列筛选器中键入TextData的类似于值 ：要跟踪的sql中特定的参数或关键字</p>
</blockquote>
<h2 id="3-运行"><a href="#3-运行" class="headerlink" title="3.运行"></a>3.运行</h2><p><img src="3.jpg" alt=""><br><img src="4.jpg" alt=""><br><img src="5.jpg" alt=""><br><img src="6.jpg" alt=""></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>sql跟踪</tag>
        <tag>SQL Server</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA快捷键</title>
    <url>/2020/10/29/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>Ctrl+Z：撤销</p>
<p>Ctrl+Shift+Z：重做</p>
<p>Ctrl+X：剪贴</p>
<p>Ctrl+C：复制</p>
<p>Ctrl+V：粘贴</p>
<p>Ctrl+Y：删除当前行</p>
<p>Ctrl+D:复制当前行</p>
<p>Ctrl+Shift+J：将选中的行合并成一行</p>
<p>Ctrl+N：查找类文件</p>
<p>Ctrl+Shift+N：查找文件</p>
<p>Ctrl+G：定位到文件某一行</p>
<p>Alt+向左箭头：返回上次光标位置</p>
<p>Alt+向右箭头：返回至后一次光标位置</p>
<p>Ctrl+Shift+Backspace：返回上次编辑位置</p>
<p>Ctrl+Shift+反斜杠：返回后一次编辑位置</p>
<p>Ctrl+B：定位至变量定义的位置</p>
<p>Ctrl+Alt+B：定位至选中类或者方法的具体实现</p>
<p>Ctrl+Shift+B:直接定位至光标所在变量的类型定义</p>
<p>Ctrl+U：直接定位至当前方法override或者implements的方法定义处</p>
<p>Ctrl+F12：显示当前文件的文件结构</p>
<p>Ctrl+Alt+F12：显示当前文件的路径，并可以方便的将相关父路径打开</p>
<p>Ctrl+H：显示当前类的继承层次</p>
<p>Ctrl+Shift+H：显示当前方法的继承层次</p>
<p>Ctrl+Alt+H：显示当前方法的调用层次</p>
<p>F2：定位至下一个错误处</p>
<p>Shift+F2：定位至前一个错误处</p>
<p>Ctrl+Alt+向上箭头：查找前一个变量共现的地方</p>
<p>Ctrl+Alt+向下箭头：查找下一个变量共现的地方</p>
<p>Ctrl+=：展开代码</p>
<p>Ctrl+-：收缩代码</p>
<p>Ctrl+Alt+=：递归展开代码</p>
<p>Ctrl+Alt+-：递归收缩代码</p>
<p>Ctrl+Shift+=：展开所有代码</p>
<p>Ctrl+Shift+-：收缩所有代码</p>
<p>Ctrl+Shitft+向下箭头：将光标所在的代码块向下整体移动</p>
<p>Ctrl+Shift+向上箭头：将光标所在的代码块向上整体移动</p>
<p>Ctrl+Alt+Shift+向左箭头：将元素向左移动</p>
<p>Ctrl+Alt+Shift+向右箭头：将元素向右移动</p>
<p>Alt+Shift+向下箭头：将行向下移动</p>
<p>Alt+Shift+向上箭头：将行向上移动</p>
<p>Ctrl+F：在当前文件中查找</p>
<p>Ctrl+R：替换字符串</p>
<p>Ctrl+Shift+F:在全局文件中查找字符串</p>
<p>Ctrl+Shift+R：在全局中替换字符串</p>
<p>Alt+F7：查找当前变量的使用，并列表显示</p>
<p>Ctrl+Alt+F7：查找当前变量的使用，并直接对话框提示</p>
<p>Ctrl+F7：在文件中查找符号的使用</p>
<p>Ctrl+Shift+F7：在文件中高亮显示变量的使用</p>
<p>Ctrl+O：重写基类方法</p>
<p>Ctrl+I：实现基类或接口中的方法</p>
<p>Alt+Insert：产生构造方法，get/set方法等</p>
<p>Ctrl+Alt+T：将选中的代码使用if，while，try/catch等包装</p>
<p>Ctrl+Shitf+Delete：去除相关的包装代码</p>
<p>Alt+/：自动完成</p>
<p>Alt+Enter：自动提示完成，抛出异常 提示import class</p>
<p>Ctrl+J：插入Live Template 快速插入一行或者多行代码</p>
<p>Ctrl+Alt+J：使用Live Template包装</p>
<p>Ctrl+/：使用//注释</p>
<p>Ctrl+Shift+/：使用/**/注释</p>
<p>Ctrl+Alt+L：格式化代码</p>
<p>Ctrl+Alt+I：自动缩进行</p>
<p>Ctrl+Alt+O：优化import</p>
<p>Ctrl+]：快速跳转至诸如{}围起来的代码块的结尾处</p>
<p>Ctrl+[：快速跳转至诸如{}围起来的代码块的开头处</p>
<p>Ctrl+Shift+Enter：将输入的if，for，函数等等补上{}或者；使代码语句完整</p>
<p>Shift+Enter：在当前行的下方开始新行</p>
<p>Ctrl+Alt+Enter：在当前行的上方插入新行</p>
<p>Ctrl+Delete：删除光标所在至单词结尾处的所有字符</p>
<p>Ctrl+Backspace：删除光标所在至单词开头处的所有字符</p>
<p>Ctrl+向左箭头：将光标移至前一个单词</p>
<p>Ctrl+向右箭头：将光标移至后一个单词</p>
<p>Ctrl+向上箭头：向上滚动一行</p>
<p>Ctrl+向下箭头：向下滚动一行</p>
<p>Ctrl+W：选中整个单词</p>
<p>Ctrl+Shift+U：切换大小写</p>
<p>Shift+F6：重命名</p>
<p>Ctrl+F6：更改函数签名</p>
<p>Ctrl+Shift+F6：更改类型</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>编译器</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL执行顺序</title>
    <url>/2020/10/29/SQL%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
    <content><![CDATA[<p>1、from子句组装来自不同数据源的数据（包括join on）；</p>
<p>2、where子句基于指定的条件对记录行进行筛选；</p>
<p>3、group by子句将数据划分为多个分组；</p>
<p>4、使用聚集函数进行计算；</p>
<p>5、使用having子句筛选分组；</p>
<p>6、计算所有的表达式；</p>
<p>7、select 集合输出；</p>
<p>8、使用order by对结果集进行排序。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>SQL语法</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL调优</title>
    <url>/2020/10/21/SQL%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<h1 id="SET-STATISTICS-XX-ON"><a href="#SET-STATISTICS-XX-ON" class="headerlink" title="SET STATISTICS XX ON"></a>SET STATISTICS XX ON</h1><blockquote>
<p>收集语句运行的统计信息</p>
</blockquote>
<h1 id="SET-STATISTICS-TIME-ON"><a href="#SET-STATISTICS-TIME-ON" class="headerlink" title="SET STATISTICS TIME ON"></a>SET STATISTICS TIME ON</h1><blockquote>
<p>输出语句做的物理读和逻辑读的数目</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">DBCC DROPCLEANBUFFERS</span><br><span class="line"><span class="comment">--清除buffer pool里的所有缓存数据</span></span><br><span class="line">DBCC FREEPROCCACHE</span><br><span class="line">GO</span><br><span class="line"><span class="comment">--清除buffer pool里的所有缓存的执行计划</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">STATISTICS</span> <span class="built_in">TIME</span> <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	a.Name,</span><br><span class="line">	b.new_level </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="keyword">Account</span> a</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> new_accountclassification b <span class="keyword">ON</span> a.AccountId = b.new_account_id </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	a.AccountId = <span class="string">'7FEC00BA-A4BA-EA11-A13F-000C29B5B96B'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">STATISTICS</span> <span class="built_in">TIME</span> <span class="keyword">OFF</span></span><br></pre></td></tr></table></figure>

<p>执行上面代码获取以下信息：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">DBCC DROPCLEANBUFFERS</span><br><span class="line"><span class="comment">--清除buffer pool里的所有缓存数据</span></span><br><span class="line">DBCC FREEPROCCACHE</span><br><span class="line">&gt; SQL Server 分析和编译时间: </span><br><span class="line">   CPU 时间 = 0 毫秒，占用时间 = 0 毫秒。</span><br><span class="line">&gt; DBCC 执行完毕。如果 DBCC 输出了错误信息，请与系统管理员联系。</span><br><span class="line">&gt; </span><br><span class="line"> SQL Server 执行时间:</span><br><span class="line">   CPU 时间 = 328 毫秒，占用时间 = 332 毫秒。</span><br><span class="line">&gt; DBCC 执行完毕。如果 DBCC 输出了错误信息，请与系统管理员联系。</span><br><span class="line">&gt; </span><br><span class="line"> SQL Server 执行时间:</span><br><span class="line">   CPU 时间 = 15 毫秒，占用时间 = 10 毫秒。</span><br><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: 0.35s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--清除buffer pool里的所有缓存的执行计划</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">STATISTICS</span> <span class="built_in">TIME</span> <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	a.Name,</span><br><span class="line">	b.new_level </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="keyword">Account</span> a</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> new_accountclassification b <span class="keyword">ON</span> a.AccountId = b.new_account_id </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	a.AccountId = <span class="string">'7FEC00BA-A4BA-EA11-A13F-000C29B5B96B'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">STATISTICS</span> <span class="built_in">TIME</span> <span class="keyword">OFF</span></span><br><span class="line">&gt; <span class="keyword">SQL</span> <span class="keyword">Server</span> 分析和编译时间: </span><br><span class="line">   CPU 时间 = <span class="number">203</span> 毫秒，占用时间 = <span class="number">278</span> 毫秒。</span><br><span class="line">&gt; </span><br><span class="line"> <span class="keyword">SQL</span> <span class="keyword">Server</span> 执行时间:</span><br><span class="line">   CPU 时间 = <span class="number">0</span> 毫秒，占用时间 = <span class="number">0</span> 毫秒。</span><br><span class="line">&gt; </span><br><span class="line"> <span class="keyword">SQL</span> <span class="keyword">Server</span> 执行时间:</span><br><span class="line">   CPU 时间 = <span class="number">0</span> 毫秒，占用时间 = <span class="number">5</span> 毫秒。</span><br><span class="line">&gt; OK</span><br><span class="line">&gt; 时间: <span class="number">0.295</span>s</span><br></pre></td></tr></table></figure>

<h2 id="CPU时间"><a href="#CPU时间" class="headerlink" title="CPU时间"></a>CPU时间</h2><blockquote>
<p>这个值的含义指的是在这一步，SQLSERVER所花的纯CPU时间是多少。也就是说，语句花了多少CPU资源。</p>
</blockquote>
<h2 id="占用时间"><a href="#占用时间" class="headerlink" title="占用时间"></a>占用时间</h2><blockquote>
<p>此值指这一步一共用了多少时间。也就是说，这是语句运行的时间长短，有些动作会发生I/O操作，产生了I/O等待，或者是遇到阻塞、产生了阻塞等待。总之时间用掉了，但是没有用CPU资源。所以占用时间比CPU时间长是很正常的 ，但是CPU时间是语句在所有CPU上的时间总和。如果语句使用了多颗CPU，而其他等待几乎没有，那么CPU时间大于占用时间也是正常的。</p>
</blockquote>
<h2 id="分析和编译时间"><a href="#分析和编译时间" class="headerlink" title="分析和编译时间"></a>分析和编译时间</h2><blockquote>
<p>这一步，就是语句的编译时间。由于语句运行之前清空了所有执行计划，SQLSERVER必须要对他编译。这里的编译时间就不为0了。由于编译主要是CPU的运算，所以一般CPU时间和占用时间是差不多的。如果这里相差比较大，就有必要看看SQLSERVER在系统资源上有没有瓶颈了。这里他们是一个15毫秒，一个是104毫秒。</p>
</blockquote>
<h2 id="SQLSERVER执行时间"><a href="#SQLSERVER执行时间" class="headerlink" title="SQLSERVER执行时间"></a>SQLSERVER执行时间</h2><blockquote>
<p>语句真正运行的时间。由于语句是第一次运行，SQLSERVER需要把数据从磁盘读到内存里，这里语句的运行发生了5毫秒的I/O等待。</p>
</blockquote>
<h2 id="关键字go"><a href="#关键字go" class="headerlink" title="关键字go"></a>关键字go</h2><blockquote>
<p>go 向 SQL Server 实用工具发出一批 Transact-SQL 语句结束的信号。<br>例如当某一语句要求必须是查询批次中的第一个语句，则可以在前面加上go来终结上一个批处理，使其成为下一个批处理的开头。<br>CREATE DEFAULT, CREATE FUNCTION, CREATE PROCEDURE, CREATE RULE, CREATE SCHEMA, CREATE TRIGGER, CREATE VIEW </p>
</blockquote>
<h1 id="SET-STATISTICS-IO-ON"><a href="#SET-STATISTICS-IO-ON" class="headerlink" title="SET STATISTICS IO ON"></a>SET STATISTICS IO ON</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">STATISTICS</span> IO <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	a.Name,</span><br><span class="line">	b.new_level </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="keyword">Account</span> a</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> new_accountclassification b <span class="keyword">ON</span> a.AccountId = b.new_account_id </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	a.AccountId = <span class="string">'7FEC00BA-A4BA-EA11-A13F-000C29B5B96B'</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">STATISTICS</span> IO <span class="keyword">OFF</span>;</span><br></pre></td></tr></table></figure>
<p>执行上面代码获取以下信息：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&gt; 表 'new_accountclassificationBase'。扫描计数 1，逻辑读取 6 次，物理读取 0 次，预读 0 次，lob 逻辑读取 0 次，lob 物理读取 0 次，lob 预读 0 次。</span><br><span class="line">&gt; 表 'AccountBase'。扫描计数 0，逻辑读取 4 次，物理读取 0 次，预读 0 次，lob 逻辑读取 0 次，lob 物理读取 0 次，lob 预读 0 次。</span><br></pre></td></tr></table></figure>
<h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><blockquote>
<p>表的名称。</p>
</blockquote>
<h2 id="扫描计数"><a href="#扫描计数" class="headerlink" title="扫描计数"></a>扫描计数</h2><blockquote>
<p>执行的扫描次数。按照执行计划，表格被扫描了几次。一般来讲大表扫描的次数越多越不好。唯一的例外是如果执行计划选择了并发运行，由多个thread线程同时做一个表的读取，每个thread读其中的一部分，但是这里会显示所有thread的数目。也就是有几个thread在并发做，就会有几个扫描。这时数目大一点没问题的。</p>
</blockquote>
<h2 id="逻辑读取"><a href="#逻辑读取" class="headerlink" title="逻辑读取"></a>逻辑读取</h2><blockquote>
<p>从数据缓存读取的页数。页数越多，说明查询要访问的数据量就越大，内存消耗量越大，查询也就越昂贵。可以检查是否应该调整索引，减少扫描的次数，缩小扫描范围。<br>顺便说一下这个逻辑读取的统计原理：为什麽显示出来的结果的单位不是Page，也不是K或KB。SQLSERVER里在做读和写的时候，会运行到某一段特定的代码。每调用一次这个代码，Reads/Write就会加1。所以这个值比较大那语句一定做了比较多的I/O，但是不能通过这个值计算出I/O的绝对数量，这个值反映的是逻辑读写量不是物理读写量。</p>
</blockquote>
<h2 id="物理读取"><a href="#物理读取" class="headerlink" title="物理读取"></a>物理读取</h2><blockquote>
<p>从磁盘读取的页数</p>
</blockquote>
<h2 id="预读"><a href="#预读" class="headerlink" title="预读"></a>预读</h2><blockquote>
<p>为进行查询而预读入缓存的页数</p>
</blockquote>
<h2 id="物理读取-预读"><a href="#物理读取-预读" class="headerlink" title="物理读取+预读"></a>物理读取+预读</h2><blockquote>
<p>就是SQLSERVER为了完成这句查询而从磁盘上读取的页数。如果不为0，说明数据没有缓存在内存里。运行速度一定会受到影响</p>
</blockquote>
<h2 id="LOB逻辑读取"><a href="#LOB逻辑读取" class="headerlink" title="LOB逻辑读取"></a>LOB逻辑读取</h2><blockquote>
<p>从数据缓存读取的text、ntext、image、大值类型（varchar(max)、nvarchar(max)、varbinary(max)）页的数目</p>
</blockquote>
<h2 id="LOB物理读取"><a href="#LOB物理读取" class="headerlink" title="LOB物理读取"></a>LOB物理读取</h2><blockquote>
<p>从磁盘读取的text、ntext、image、大值类型页的数目</p>
</blockquote>
<h2 id="LOB预读"><a href="#LOB预读" class="headerlink" title="LOB预读"></a>LOB预读</h2><blockquote>
<p>为进行查询而放入缓存的text、ntext、image、大值类型页的数目</p>
</blockquote>
<h1 id="SET-STATISTICS-PROFILE-ON"><a href="#SET-STATISTICS-PROFILE-ON" class="headerlink" title="SET STATISTICS PROFILE ON"></a>SET STATISTICS PROFILE ON</h1><blockquote>
<p>返回语句的执行计划，以及语句运行在每一步的实际返回行数统计</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">STATISTICS</span> PROFILE <span class="keyword">ON</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	a.Name,</span><br><span class="line">	b.new_level </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="keyword">Account</span> a</span><br><span class="line">	<span class="keyword">LEFT</span> <span class="keyword">JOIN</span> new_accountclassification b <span class="keyword">ON</span> a.AccountId = b.new_account_id </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">	a.AccountId = <span class="string">'7FEC00BA-A4BA-EA11-A13F-000C29B5B96B'</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">STATISTICS</span> PROFILE <span class="keyword">OFF</span></span><br></pre></td></tr></table></figure>
<p>会返回另外的一个结果如下图：<br><img src="1.jpg" alt=""><br>注意：这里是从最下面开始向上看的，也就是说从最下面开始一直执行直到得到结果集所以（行1）里的rows字段显示的值就是这个查询返回的结果集。而且有多少行表明SQLSERVER执行了多少个步骤,这里有6行，表明SQLSRVER执行了6个步骤！！</p>
<h2 id="Rows"><a href="#Rows" class="headerlink" title="Rows"></a>Rows</h2><blockquote>
<p>执行计划的每一步返回的实际行数</p>
</blockquote>
<h2 id="Executes"><a href="#Executes" class="headerlink" title="Executes"></a>Executes</h2><blockquote>
<p>执行计划的每一步被运行了多少次</p>
</blockquote>
<h2 id="StmtText"><a href="#StmtText" class="headerlink" title="StmtText"></a>StmtText</h2><blockquote>
<p>执行计划的具体内容。执行计划以一棵树的形式显示。每一行都是运行的一步，都会有结果集返回，也都会有自己的cost</p>
</blockquote>
<h2 id="EstimateRows"><a href="#EstimateRows" class="headerlink" title="EstimateRows"></a>EstimateRows</h2><blockquote>
<p>SQLSERVER根据表格上的统计信息，预估的每一步的返回行数。在分析执行计划时，我们会经常将Rows和EstimateRows这两列做对比，先确认SQLSERVER预估得是否正确，以判断统计信息是否有更新</p>
</blockquote>
<h2 id="EstimateIO"><a href="#EstimateIO" class="headerlink" title="EstimateIO"></a>EstimateIO</h2><blockquote>
<p>SQLSERVER根据EstimateRows和统计信息里记录的字段长度，预估的每一步会产生的I/O cost</p>
</blockquote>
<h2 id="EstimateCPU"><a href="#EstimateCPU" class="headerlink" title="EstimateCPU"></a>EstimateCPU</h2><blockquote>
<p>SQLSERVR根据EstimateRows和统计信息里记录的字段长度，以及要做的事情的复杂度，预估每一步会产生的CPU cost</p>
</blockquote>
<h2 id="TotalSubtreeCost"><a href="#TotalSubtreeCost" class="headerlink" title="TotalSubtreeCost"></a>TotalSubtreeCost</h2><blockquote>
<p>SQLSERVER根据EstimateIO和EstimateCPU通过某种计算公式，计算出每一步执行计划子树的cost(包括这一步自己的cost和他的所有下层步骤的cost总和)</p>
</blockquote>
<h2 id="Warnings"><a href="#Warnings" class="headerlink" title="Warnings"></a>Warnings</h2><blockquote>
<p>SQLSERVER在运行每一步时遇到的警告，例如，某一步没有统计信息支持cost预估等。</p>
</blockquote>
<h2 id="Parallel"><a href="#Parallel" class="headerlink" title="Parallel"></a>Parallel</h2><blockquote>
<p>执行计划的这一步是不是使用了并行的执行计划</p>
</blockquote>
<h2 id="具体步骤分析"><a href="#具体步骤分析" class="headerlink" title="具体步骤分析"></a>具体步骤分析</h2><p>执行计划的具体内容如下图：<br><img src="2.jpg" alt=""></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
        <tag>数据库</tag>
        <tag>优化</tag>
        <tag>SQL调优</tag>
      </tags>
  </entry>
  <entry>
    <title>PowerBI_DAX函数</title>
    <url>/2020/11/04/PowerBI_DAX%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="DAX函数"><a href="#DAX函数" class="headerlink" title="DAX函数"></a>DAX函数</h1><blockquote>
<p>数据分析表达式 (DAX) 是在 Analysis Services、Power BI 以及 Excel 中的 Power Pivot 使用的公式表达式语言。 DAX 公式包括函数、运算符和值，用于对表格数据模型中相关表和列中的数据执行高级计算和查询<br><a href="https://docs.microsoft.com/zh-cn/dax/dax-overview" target="_blank" rel="noopener">微软文档</a></p>
</blockquote>
<h2 id="CALCULATE"><a href="#CALCULATE" class="headerlink" title="CALCULATE"></a>CALCULATE</h2><blockquote>
<p>DAX中最重要的函数</p>
</blockquote>
<h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CALCULATE(聚合函数,筛选条件,筛选条件...)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>所有筛选条件的交集形成最终的筛选数据集合,根据筛选出的数据集合执行第一个参数的聚合运算并返回运算结果</p>
</blockquote>
<h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><blockquote>
<p>导入下面这个产品明细表： </p>
</blockquote>
<p><img src="1.jpg" alt=""></p>
<blockquote>
<p>新建一个度量值求每种产品的数量：<br>产品数量 = COUNTROWS(‘产品明细’)<br>因为每种产品的只有1行，所以求产品明细表的行数就相当于求各种产品的数量，把产品名称和该度量值拖拽入矩阵表，</p>
</blockquote>
<p><img src="2.jpg" alt=""></p>
<blockquote>
<p>这里外部上下文就是表格每行的行标签。</p>
</blockquote>
<h4 id="用例01-筛选条件为空，不影响外部上下文"><a href="#用例01-筛选条件为空，不影响外部上下文" class="headerlink" title="用例01 | 筛选条件为空，不影响外部上下文"></a>用例01 | 筛选条件为空，不影响外部上下文</h4><blockquote>
<p>现在开始用CALCULATE函数创建一个度量值：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">产品数量1 &#x3D; CALCULATE([产品数量])</span><br></pre></td></tr></table></figure>

<blockquote>
<p>只是用了第一个参数，筛选条件为空，因为没有内部筛选所以完全依赖外部上下文，出来的结果也和原度量值一致。</p>
</blockquote>
<p><img src="3.jpg" alt=""></p>
<blockquote>
<p>另外，介绍CALCULATE语法的时候说，第一个参数为聚合运算表达式，为什么这里没有用聚合函数而只用了一个度量值呢？<br>这是因为度量值[产品数量]本身就是一个聚合函数运算，实际上度量值[产品数量1]等同于这个：<br>产品数量1 = CALCULATE(COUNTROWS(‘产品明细’))<br>DAX函数可以直接引用已经创建好的度量值，可以使DAX函数看起来更简洁、更具可读性，这也是建议从最简单的度量值开始建的原因。</p>
</blockquote>
<h4 id="用例02-添加限制条件，缩小上下文"><a href="#用例02-添加限制条件，缩小上下文" class="headerlink" title="用例02 | 添加限制条件，缩小上下文"></a>用例02 | 添加限制条件，缩小上下文</h4><blockquote>
<p>建一个度量值[产品数量2]，</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">产品数量2 &#x3D; CALCULATE([产品数量],&#39;产品明细&#39;[品牌]&#x3D;&quot;苹果&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="4.jpg" alt=""></p>
<blockquote>
<p>发现只有苹果的产品计数显示出来，而其他品牌的数据没有了，这是因为CALCULATE的第二个参数的限制，只筛选品牌为“苹果”的，限制了外部的上下文，非苹果的产品都不再运算。</p>
</blockquote>
<h4 id="用例03-结合ALL函数，扩大上下文"><a href="#用例03-结合ALL函数，扩大上下文" class="headerlink" title="用例03 | 结合ALL函数，扩大上下文"></a>用例03 | 结合ALL函数，扩大上下文</h4><blockquote>
<p>新建度量值[产品数量3]，</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">产品数量3 &#x3D; CALCULATE([产品数量],ALL(&#39;产品明细&#39;))</span><br></pre></td></tr></table></figure>

<p><img src="5.jpg" alt=""></p>
<blockquote>
<p>这次的数据居然是所有产品的数量，这是因为筛选条件使用了ALL函数，ALL(‘产品明细’)的意思是清除产品明细表里的所有筛选，外部筛选器不起作用了，每行统计的都是该表中的所有产品。<br>每行的数据都是9，你可能觉得这个ALL函数没什么用，运算的数据没有什么意义，实际上当然不是这样，这个数据使用的地方非常多，比如我们想计算每个产品数量占总产品数量的比重，直接写个度量值：<br>产品占比=[产品数量]/[产品数量3]</p>
</blockquote>
<p><img src="6.jpg" alt=""></p>
<blockquote>
<p>产品占比就计算出来了，这就是统计总数的一个功能。</p>
</blockquote>
<h4 id="用例04-重置上下文"><a href="#用例04-重置上下文" class="headerlink" title="用例04 | 重置上下文"></a>用例04 | 重置上下文</h4><blockquote>
<p>新建度量值[产品数量4]，</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">产品数量4 &#x3D; CALCULATE([产品数量], all(&#39;产品明细&#39;[产品名称]),&#39;产品明细&#39;[类别]&#x3D;&quot;手机&quot;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>先用ALL函数清除外部上下文，然后又新增了一个筛选条件，类别为”手机”的产品数量，那么结果会是什么样的呢，</p>
</blockquote>
<p><img src="7.jpg" alt=""></p>
<blockquote>
<p>每一行产品的数量都是3，正好符合建立这个度量值的逻辑，被ALL清除行标签的外部筛选后，从全部产品中统计品类为”手机”的产品的数量，所以每行都返回3.</p>
</blockquote>
<h2 id="SUM"><a href="#SUM" class="headerlink" title="SUM"></a>SUM</h2><blockquote>
<p>对某个列中的所有数值求和</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SUM(&lt;column&gt;)</span><br></pre></td></tr></table></figure>

<h2 id="SUMX"><a href="#SUMX" class="headerlink" title="SUMX"></a>SUMX</h2><blockquote>
<p>返回为表中的每一行计算的表达式的和</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SUMX(&lt;table&gt;, &lt;expression&gt;)</span><br><span class="line">eg:商机金额预估_基础 &#x3D; CALCULATE(SUMX(&#39;Opportunityproduct&#39;,&#39;Opportunityproduct&#39;[需求数量]*&#39;Opportunityproduct&#39;[预计成交单价(万元)]))*10000</span><br></pre></td></tr></table></figure>


<blockquote>
<p>SUMX 函数将表或返回表的表达式作为其第一个参数。 第二个参数是包含要计算总和的数字的列，或计算结果为列的表达式。<br>仅对列中的数字进行计数。 空白、逻辑值和文本会被忽略。</p>
</blockquote>
<h2 id="SUM-amp-SUMX"><a href="#SUM-amp-SUMX" class="headerlink" title="SUM &amp; SUMX"></a>SUM &amp; SUMX</h2><blockquote>
<p>SUM是列级别聚合函数（不逐行计算），SUMX是行级别聚合函数（逐行计算）</p>
</blockquote>
<h2 id="USERELATIONSHIP"><a href="#USERELATIONSHIP" class="headerlink" title="USERELATIONSHIP"></a>USERELATIONSHIP</h2><blockquote>
<p>如下图，虚线关系为当前不可用关系，但以使用USERELATIONSHIP函数为度量值指定相关关系</p>
</blockquote>
<p><img src="8.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最终客户销售金额 &#x3D; CALCULATE([销售金额],USERELATIONSHIP(Account[客户识别码],OrderShipment[最终客户识别码]))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>powerBI</tag>
        <tag>DAX函数</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL连接符、表达式及函数</title>
    <url>/2020/10/29/SQL%E8%BF%9E%E6%8E%A5%E7%AC%A6%E3%80%81%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8F%8A%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="连接符"><a href="#连接符" class="headerlink" title="连接符"></a>连接符</h1><h2 id="连接符-1"><a href="#连接符-1" class="headerlink" title="+ 连接符"></a>+ 连接符</h2><blockquote>
<p>连接表中数据类型相同或近似的列，若数据类型完全不同，则需通过CAST表达式进行类型转换，若其中一列为NULL则结果为NULL</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	TOP <span class="number">3</span></span><br><span class="line">	new_country_idName + <span class="string">'--'</span> +new_city_idName <span class="keyword">AS</span> Adress,</span><br><span class="line">	<span class="keyword">Name</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="keyword">Account</span></span><br></pre></td></tr></table></figure>
<p><img src="1.jpg" alt=""></p>
<h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><h2 id="CAST表达式"><a href="#CAST表达式" class="headerlink" title="CAST表达式"></a>CAST表达式</h2><blockquote>
<p>转换数据类型，若数据为空则转换结果为NULL</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	TOP <span class="number">3</span></span><br><span class="line">	new_country_idName + <span class="string">'--'</span> +new_city_idName <span class="keyword">AS</span> Adress,</span><br><span class="line">	<span class="keyword">Name</span> + new_age <span class="keyword">AS</span> Mesg</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="keyword">Account</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&gt; [<span class="number">42000</span>] [Microsoft][ODBC Driver <span class="number">17</span> <span class="keyword">for</span> <span class="keyword">SQL</span> <span class="keyword">Server</span>][<span class="keyword">SQL</span> <span class="keyword">Server</span>]从数据类型 <span class="keyword">nvarchar</span> 转换为 <span class="built_in">numeric</span> 时出错。 (<span class="number">8114</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	TOP <span class="number">3</span></span><br><span class="line">	new_country_idName + <span class="string">'--'</span> +new_city_idName <span class="keyword">AS</span> Adress,</span><br><span class="line">	<span class="keyword">Name</span> + <span class="keyword">CAST</span>(new_age <span class="keyword">AS</span> <span class="built_in">VARCHAR</span>(<span class="number">256</span>)) <span class="keyword">AS</span> Mesg</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="keyword">Account</span></span><br></pre></td></tr></table></figure>
<p><img src="2.jpg" alt=""></p>
<h2 id="CASE表达式"><a href="#CASE表达式" class="headerlink" title="CASE表达式"></a>CASE表达式</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	TOP <span class="number">3</span></span><br><span class="line">	new_country_idName + <span class="string">'--'</span> +new_city_idName <span class="keyword">AS</span> Adress,</span><br><span class="line">	<span class="keyword">Name</span>,</span><br><span class="line">	<span class="keyword">CASE</span> </span><br><span class="line">	<span class="keyword">WHEN</span> <span class="keyword">Name</span> = <span class="string">'李老板'</span> <span class="keyword">THEN</span> <span class="string">'李老板好'</span></span><br><span class="line">	<span class="keyword">WHEN</span> <span class="keyword">Name</span> = <span class="string">'高永平'</span> <span class="keyword">THEN</span> <span class="string">'高老板好'</span></span><br><span class="line">	<span class="keyword">ELSE</span> <span class="string">'您好'</span></span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">AS</span> Say</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	<span class="keyword">Account</span></span><br></pre></td></tr></table></figure>
<p><img src="3.jpg" alt=""></p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><blockquote>
<p>对列中某个数据进行处理并返回值</p>
</blockquote>
<h2 id="字符串操作函数"><a href="#字符串操作函数" class="headerlink" title="字符串操作函数"></a>字符串操作函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">---字符中操作函数</span></span><br><span class="line">UPPER(S) 将字符串统一为大写字母</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UPPER</span>(<span class="string">'asasA'</span>)   <span class="comment">--ASASA</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">LOWER</span>(S) 将字符串统一为小写字母</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LOWER</span>(<span class="string">'asasA'</span>)   <span class="comment">---asasa</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">LEN</span>(S)   返回字符串的长度</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEN</span>(<span class="string">'中国1号'</span>) <span class="comment">--4</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">CHARINDEX</span>(S1,S2) 返回S1在字符串S2中的位置  </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CHARINDEX</span>(<span class="string">'aa1号'</span>,<span class="string">'1111aa1号中国1号'</span>) <span class="comment">--5</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">SUBSTRING</span>(S,I,N) 在S字符串中的第I个字符起取N个字符</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTRING</span>(<span class="string">'TECHNOLO'</span>,<span class="number">3</span>,<span class="number">3</span>) <span class="comment">--CHN</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONVERT</span>(<span class="built_in">INT</span>,<span class="string">'111'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">LEFT</span>(S,N) 从字符串S左边取N个字符</span><br><span class="line"><span class="keyword">RIGHT</span>(S,N) 从字符串S右边取N个字符</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">'00000000'</span>+<span class="string">'11'</span>,<span class="number">8</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RIGHT</span>(<span class="string">'00000000'</span>+<span class="string">'2222'</span>,<span class="number">8</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">'11'</span>+<span class="string">'00000000'</span>+<span class="string">'11'</span>,<span class="number">8</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LEFT</span>(<span class="string">'2222'</span>+<span class="string">'00000000'</span>+<span class="string">'2222'</span>,<span class="number">8</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">SPACE</span>(N) 生成N个空格</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">'合计'</span>+<span class="keyword">SPACE</span>(<span class="number">2</span>)+<span class="string">'123'</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">RTRIM</span>(S) <span class="comment">--消除字符串左边开始或者右边开始的空格</span></span><br><span class="line"><span class="keyword">LTRIM</span>(S) <span class="comment">--消除字符串左边开始或者右边开始的空格</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">RTRIM</span>(<span class="string">'      SAMPLE   '</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LTRIM</span>(<span class="string">'      SAMPLE   '</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LTRIM</span>(<span class="keyword">RTRIM</span>(<span class="string">'     SAMPLE   '</span>));</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">REPLACE</span>(<span class="keyword">STRING</span>,ATOREPLACE,NEWSTRING) <span class="comment">--替换函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(<span class="string">'HHAAAH'</span>,<span class="string">'A'</span>,<span class="string">'S'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">abs(numeric_expr) <span class="comment">--求绝对值</span></span><br><span class="line">ceiling(numeric_expr) <span class="comment">--取大于等于指定值的最小整数</span></span><br><span class="line">exp(float_expr) <span class="comment">--取指数</span></span><br><span class="line">floor(numeric_expr) <span class="comment">--小于等于指定值得最大整数</span></span><br><span class="line">power(numeric_expr,power) <span class="comment">--返回power次方</span></span><br><span class="line">rand([int_expr]) <span class="comment">--随机数产生器</span></span><br><span class="line">round(numeric_expr,int_expr) <span class="comment">--安int_expr规定的精度四舍五入</span></span><br><span class="line">sign(int_expr) <span class="comment">--根据正数,0,负数,,返回+1,0,-1</span></span><br><span class="line">sqrt(float_expr) <span class="comment">--平方根</span></span><br><span class="line">exp(float x) <span class="comment">--求e的x次幂</span></span><br><span class="line">tan(float x) <span class="comment">--计算x（弧度表示）的正切值。</span></span><br><span class="line">atan(float x) <span class="comment">--求x（弧度表示）的反正切值</span></span><br><span class="line">cos(float x) <span class="comment">--求x（弧度表示）的余弦值</span></span><br><span class="line">acos(float x) <span class="comment">--求x（弧度表示）的反余弦值</span></span><br><span class="line">sin(float x) <span class="comment">--计算x（弧度表示）的正弦值。</span></span><br><span class="line">asin(float x) <span class="comment">--求x（弧度表示）的反正弦值</span></span><br><span class="line">fabs(float x) <span class="comment">--求浮点数x的绝对值</span></span><br><span class="line">fmod(float x, float y) <span class="comment">--计算x/y的余数</span></span><br><span class="line">pow(float x, float y) <span class="comment">--计算x的y次幂。</span></span><br><span class="line">sqrt(float x) <span class="comment">--计算x的平方根。</span></span><br></pre></td></tr></table></figure>

<h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">getdate() <span class="comment">--返回日期</span></span><br><span class="line">datename(datepart,date_expr) <span class="comment">--返回名称</span></span><br><span class="line">datepart(datepart,date_expr) <span class="comment">--取日期一部份</span></span><br><span class="line">datediff(datepart,date_expr1.dateexpr2) <span class="comment">--日期差</span></span><br><span class="line">dateadd(datepart,number,date_expr) <span class="comment">--返回日期加上 number</span></span><br><span class="line">day(date_expr), month(date_expr),year(date_expr) <span class="comment">--提取date_expr中的日月年</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>SQL语法</tag>
      </tags>
  </entry>
  <entry>
    <title>About Me</title>
    <url>/2020/04/17/aboutMe/</url>
    <content><![CDATA[<blockquote>
<p>A Coder, live in XuZhou, China .  </p>
</blockquote>
<ul>
<li>姓名：李明华</li>
<li>现居：江苏徐州</li>
<li>GitHub：<a href="https://github.com/LiMingHuaGit" target="_blank" rel="noopener">LiMingHuaGit</a></li>
<li>QQ：<a href="qq.com/">2290320152</a></li>
<li>微信：<a href="wechat.com/">someonelover0</a></li>
</ul>
<img src="/2020/04/17/aboutMe/self.jpg" class="">
]]></content>
  </entry>
  <entry>
    <title>jdk1.8_Base64</title>
    <url>/2020/06/07/jdk1-8-Base64/</url>
    <content><![CDATA[<h1 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h1><h2 id="static-class-Base64-Encoder"><a href="#static-class-Base64-Encoder" class="headerlink" title="static class Base64.Encoder"></a>static class Base64.Encoder</h2><blockquote>
<p>该类实现一个编码器，使用 Base64 编码来编码字节数据。</p>
</blockquote>
<h2 id="static-class-Base64-Decoder"><a href="#static-class-Base64-Decoder" class="headerlink" title="static class Base64.Decoder"></a>static class Base64.Decoder</h2><blockquote>
<p>该类实现一个解码器，使用 Base64 编码来解码字节数据。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 使用基本编码</span></span><br><span class="line">            String base64encodedString = Base64.getEncoder().encodeToString(<span class="string">"runoob?java8"</span>.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">            System.out.println(<span class="string">"Base64 编码字符串 (基本) :"</span> + base64encodedString);</span><br><span class="line">			<span class="comment">//Base64 编码字符串 (基本) :cnVub29iP2phdmE4</span></span><br><span class="line">			</span><br><span class="line">            <span class="comment">// 解码</span></span><br><span class="line">            <span class="keyword">byte</span>[] base64decodedBytes = Base64.getDecoder().decode(base64encodedString);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"原始字符串: "</span> + <span class="keyword">new</span> String(base64decodedBytes, <span class="string">"utf-8"</span>));</span><br><span class="line">			<span class="comment">//原始字符串: runoob?java8</span></span><br><span class="line">			</span><br><span class="line">            base64encodedString = Base64.getUrlEncoder().encodeToString(<span class="string">"runoob?java8"</span>.getBytes(<span class="string">"utf-8"</span>));</span><br><span class="line">            System.out.println(<span class="string">"Base64 编码字符串 (URL) :"</span> + base64encodedString);</span><br><span class="line">			<span class="comment">//Base64 编码字符串 (URL) :cnVub29iP2phdmE4</span></span><br><span class="line"></span><br><span class="line">            StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">                stringBuilder.append(UUID.randomUUID().toString());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] mimeBytes = stringBuilder.toString().getBytes(<span class="string">"utf-8"</span>);</span><br><span class="line">            String mimeEncodedString = Base64.getMimeEncoder().encodeToString(mimeBytes);</span><br><span class="line">            System.out.println(<span class="string">"Base64 编码字符串 (MIME) :"</span> + mimeEncodedString);</span><br><span class="line">			<span class="comment">//Base64 编码字符串 (MIME) :</span></span><br><span class="line">			<span class="comment">//ZTA4NjkwNzktYTcxZi00NWQwLWE0MmMtOTVlN2Y5NDZhNjNmNzRkMDIzZGEtZjI3Zi00NDhkLTlk</span></span><br><span class="line">			<span class="comment">//YzMtYzNlYmJkNjFjMzA2NDNhZjhhOWMtYTVlZC00YzIwLTgxMTItMjhkZTRiYjMxZjc2NzBjMzMy</span></span><br><span class="line">			<span class="comment">//MjctZTQyZC00MzYzLWE1ZDItMjM3MjM5ZTM0ZTQyYTYxMzFlMDUtOWJlZC00MGQ4LThjNTgtYWYy</span></span><br><span class="line">			<span class="comment">//ZWNmODgwNjBkYjEzOGM3OTYtOGRjYi00ODA4LWE5MmEtOWEyZDllOWI1ODVlNDBjNTMwYjctYjJj</span></span><br><span class="line">			<span class="comment">//NC00MDM4LWE5NjEtMzcwZjgyZDY0ZDU1MWY0OTNjMTEtYzc2NC00MmIxLTg4OTQtOTI5M2ZjMjA2</span></span><br><span class="line">			<span class="comment">//OWUyOTgzZDM4YmMtMjZkZC00OTg2LWJhYWUtNjdjMTkxMjkzMDllMTI4MGQwMjQtM2JmZi00MTA1</span></span><br><span class="line">			<span class="comment">//LTllZTItMTkxMjVkMTAzYWZk</span></span><br><span class="line">			</span><br><span class="line">        &#125;<span class="keyword">catch</span>(UnsupportedEncodingException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"Error :"</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jkd1.8</tag>
        <tag>Base64</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>jdk1.8_Optional</title>
    <url>/2020/08/29/jdk1-8-Optional/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote>
<p>主要用于解决空指针异常（NullPointerException）<br>类似包含有可选值的包装类，Optional 类既可以含有对象也可以为空</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A container object which may or may not contain a non-null value.</span></span><br><span class="line"><span class="comment"> * If a value is present, &#123;<span class="doctag">@code</span> isPresent()&#125; will return &#123;<span class="doctag">@code</span> true&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> get()&#125; will return the value.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Additional methods that depend on the presence or absence of a contained</span></span><br><span class="line"><span class="comment"> * value are provided, such as &#123;<span class="doctag">@link</span> #orElse(java.lang.Object) orElse()&#125;</span></span><br><span class="line"><span class="comment"> * (return a default value if value not present) and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #ifPresent(java.util.function.Consumer) ifPresent()&#125; (execute a block</span></span><br><span class="line"><span class="comment"> * of code if the value is present).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This is a &lt;a href="../lang/doc-files/ValueBased.html"&gt;value-based&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * class; use of identity-sensitive operations (including reference equality</span></span><br><span class="line"><span class="comment"> * (&#123;<span class="doctag">@code</span> ==&#125;), identity hash code, or synchronization) on instances of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Optional&#125; may have unpredictable results and should be avoided.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Optional</span>&lt;<span class="title">T</span>&gt; </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<h1 id="of-amp-ofNullable"><a href="#of-amp-ofNullable" class="headerlink" title="of()&amp;ofNullable()"></a>of()&amp;ofNullable()</h1><blockquote>
<p>构造带有值的Optional类<br>of()方法中的参数不允许为null，传入null会导致NullPointerException异常<br>若调用ofNullable()方法并传入空值则实际上相当于直接调用empty()方法实例化一个空的Optional</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; optional = Optional.of(<span class="string">"value"</span>);</span><br><span class="line">Optional&lt;String&gt; optionalNull = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">Optional&lt;String&gt; emptyOpt = Optional.empty();</span><br><span class="line">System.out.println(optional.get());<span class="comment">//value</span></span><br><span class="line">System.out.println(emptyOpt.get());<span class="comment">//NoSuchElementException</span></span><br><span class="line">System.out.println(optionalNull.get());<span class="comment">//NoSuchElementException</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an &#123;<span class="doctag">@code</span> Optional&#125; describing the specified value, if non-null,</span></span><br><span class="line"><span class="comment"> * otherwise returns an empty &#123;<span class="doctag">@code</span> Optional&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the class of the value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the possibly-null value to describe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> Optional&#125; with a present value if the specified value</span></span><br><span class="line"><span class="comment"> * is non-null, otherwise an empty &#123;<span class="doctag">@code</span> Optional&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Optional&lt;T&gt; <span class="title">ofNullable</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value == <span class="keyword">null</span> ? empty() : of(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="isPresent-amp-ifPresent"><a href="#isPresent-amp-ifPresent" class="headerlink" title="isPresent()&amp;ifPresent()"></a>isPresent()&amp;ifPresent()</h1><blockquote>
<p>isPresent() 判断是否为空<br>ifPresent() 判断是否为空,不为空则执行方法内的lambda表达式(实现消费型接口)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return &#123;<span class="doctag">@code</span> true&#125; if there is a value present, otherwise &#123;<span class="doctag">@code</span> false&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if there is a value present, otherwise &#123;<span class="doctag">@code</span> false&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPresent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If a value is present, invoke the specified consumer with the value,</span></span><br><span class="line"><span class="comment"> * otherwise do nothing.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> consumer block to be executed if a value is present</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if value is present and &#123;<span class="doctag">@code</span> consumer&#125; is</span></span><br><span class="line"><span class="comment"> * null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ifPresent</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; consumer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>)</span><br><span class="line">        consumer.accept(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; optional = Optional.of(<span class="string">"value"</span>);</span><br><span class="line">Optional&lt;String&gt; optionalNull = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">optional.ifPresent((s) -&gt; System.out.println(s));<span class="comment">//value</span></span><br><span class="line">optionalNull.ifPresent(System.out::println);<span class="comment">//不执行</span></span><br></pre></td></tr></table></figure>
<h1 id="orElse-amp-orElseGet-amp-orElseThrow"><a href="#orElse-amp-orElseGet-amp-orElseThrow" class="headerlink" title="orElse()&amp;orElseGet()&amp;orElseThrow()"></a>orElse()&amp;orElseGet()&amp;orElseThrow()</h1><blockquote>
<p>orElse() 若Optional对象为空值则返回方法传入的值<br>orElseGet() 若Optional对象为空值则执行方法内的lambda表达式(供给型功能函数)<br>orElseThrow() 若Optional对象为空值则抛出指定的异常(供给型功能函数)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the value if present, otherwise return &#123;<span class="doctag">@code</span> other&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> other the value to be returned if there is no value present, may</span></span><br><span class="line"><span class="comment"> * be null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the value, if present, otherwise &#123;<span class="doctag">@code</span> other&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">orElse</span><span class="params">(T other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="keyword">null</span> ? value : other;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the value if present, otherwise invoke &#123;<span class="doctag">@code</span> other&#125; and return</span></span><br><span class="line"><span class="comment"> * the result of that invocation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> other a &#123;<span class="doctag">@code</span> Supplier&#125; whose result is returned if no value</span></span><br><span class="line"><span class="comment"> * is present</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the value if present otherwise the result of &#123;<span class="doctag">@code</span> other.get()&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if value is not present and &#123;<span class="doctag">@code</span> other&#125; is</span></span><br><span class="line"><span class="comment"> * null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">orElseGet</span><span class="params">(Supplier&lt;? extends T&gt; other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="keyword">null</span> ? value : other.get();</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the contained value, if present, otherwise throw an exception</span></span><br><span class="line"><span class="comment"> * to be created by the provided supplier.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span> A method reference to the exception constructor with an empty</span></span><br><span class="line"><span class="comment"> * argument list can be used as the supplier. For example,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> IllegalStateException::new&#125;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;X&gt; Type of the exception to be thrown</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> exceptionSupplier The supplier which will return the exception to</span></span><br><span class="line"><span class="comment"> * be thrown</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the present value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> X if there is no value present</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if no value is present and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> exceptionSupplier&#125; is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;X extends Throwable&gt; <span class="function">T <span class="title">orElseThrow</span><span class="params">(Supplier&lt;? extends X&gt; exceptionSupplier)</span> <span class="keyword">throws</span> X </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> exceptionSupplier.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; optionalNull = Optional.ofNullable(<span class="keyword">null</span>);</span><br><span class="line">System.out.println(optionalNull.orElse(<span class="string">"值为null"</span>));<span class="comment">//值为null</span></span><br><span class="line">System.out.println(optionalNull.orElseGet(()-&gt;<span class="string">"值为null"</span>));</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	optionalNull.orElseThrow(Exception::<span class="keyword">new</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">	e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="map-amp-flatMap"><a href="#map-amp-flatMap" class="headerlink" title="map()&amp;flatMap()"></a>map()&amp;flatMap()</h1><blockquote>
<p>map()方法，若传入的方法存在值，则返回方法对应类型的Optional对象，否则返回一个空的Optional<br>同样，但入参需要是Optional对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If a value is present, apply the provided mapping function to it,</span></span><br><span class="line"><span class="comment"> * and if the result is non-null, return an &#123;<span class="doctag">@code</span> Optional&#125; describing the</span></span><br><span class="line"><span class="comment"> * result.  Otherwise return an empty &#123;<span class="doctag">@code</span> Optional&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiNote</span> This method supports post-processing on optional values, without</span></span><br><span class="line"><span class="comment"> * the need to explicitly check for a return status.  For example, the</span></span><br><span class="line"><span class="comment"> * following code traverses a stream of file names, selects one that has</span></span><br><span class="line"><span class="comment"> * not yet been processed, and then opens that file, returning an</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Optional&lt;FileInputStream&gt;&#125;:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;&#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment"> *     Optional&lt;FileInputStream&gt; fis =</span></span><br><span class="line"><span class="comment"> *         names.stream().filter(name -&gt; !isProcessedYet(name))</span></span><br><span class="line"><span class="comment"> *                       .findFirst()</span></span><br><span class="line"><span class="comment"> *                       .map(name -&gt; new FileInputStream(name));</span></span><br><span class="line"><span class="comment"> * &#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Here, &#123;<span class="doctag">@code</span> findFirst&#125; returns an &#123;<span class="doctag">@code</span> Optional&lt;String&gt;&#125;, and then</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> map&#125; returns an &#123;<span class="doctag">@code</span> Optional&lt;FileInputStream&gt;&#125; for the desired</span></span><br><span class="line"><span class="comment"> * file if one exists.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;U&gt; The type of the result of the mapping function</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mapper a mapping function to apply to the value, if present</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> Optional&#125; describing the result of applying a mapping</span></span><br><span class="line"><span class="comment"> * function to the value of this &#123;<span class="doctag">@code</span> Optional&#125;, if a value is present,</span></span><br><span class="line"><span class="comment"> * otherwise an empty &#123;<span class="doctag">@code</span> Optional&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the mapping function is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>&lt;U&gt; Optional&lt;U&gt; <span class="title">map</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; mapper)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(mapper.apply(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If a value is present, apply the provided &#123;<span class="doctag">@code</span> Optional&#125;-bearing</span></span><br><span class="line"><span class="comment"> * mapping function to it, return that result, otherwise return an empty</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Optional&#125;.  This method is similar to &#123;<span class="doctag">@link</span> #map(Function)&#125;,</span></span><br><span class="line"><span class="comment"> * but the provided mapper is one whose result is already an &#123;<span class="doctag">@code</span> Optional&#125;,</span></span><br><span class="line"><span class="comment"> * and if invoked, &#123;<span class="doctag">@code</span> flatMap&#125; does not wrap it with an additional</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> Optional&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;U&gt; The type parameter to the &#123;<span class="doctag">@code</span> Optional&#125; returned by</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mapper a mapping function to apply to the value, if present</span></span><br><span class="line"><span class="comment"> *           the mapping function</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the result of applying an &#123;<span class="doctag">@code</span> Optional&#125;-bearing mapping</span></span><br><span class="line"><span class="comment"> * function to the value of this &#123;<span class="doctag">@code</span> Optional&#125;, if a value is present,</span></span><br><span class="line"><span class="comment"> * otherwise an empty &#123;<span class="doctag">@code</span> Optional&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if the mapping function is null or returns</span></span><br><span class="line"><span class="comment"> * a null result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>&lt;U&gt; Optional&lt;U&gt; <span class="title">flatMap</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, Optional&lt;U&gt;&gt; mapper)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.requireNonNull(mapper.apply(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlightTicketInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String orderNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FlightTicketInfo flightTicketInfo = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Optional&lt;Optional&lt;String&gt;&gt; s1 = Optional.ofNullable(flightTicketInfo).</span><br><span class="line">			map(OptionalTest::getOrderNumber);</span><br><span class="line"></span><br><span class="line">        Optional&lt;String&gt; s2 = Optional.ofNullable(flightTicketInfo).</span><br><span class="line">			map(FlightTicketInfo::getOrderNumber);</span><br><span class="line"></span><br><span class="line">        Optional&lt;String&gt; s3 = Optional.ofNullable(flightTicketInfo).</span><br><span class="line">			flatMap(OptionalTest::getOrderNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Optional&lt;String&gt; <span class="title">getOrderNumber</span><span class="params">(FlightTicketInfo flightTicketInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(flightTicketInfo).map(f -&gt; f.getOrderNumber());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jkd1.8</tag>
        <tag>Optional</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk1.8_lambda</title>
    <url>/2020/06/24/jdk1-8-lambda/</url>
    <content><![CDATA[<blockquote>
<p>参考Haskell-函数式编程</p>
</blockquote>
<h1 id="核心功能性函数接口（有且只有一个抽象方法的接口）"><a href="#核心功能性函数接口（有且只有一个抽象方法的接口）" class="headerlink" title="核心功能性函数接口（有且只有一个抽象方法的接口）"></a>核心功能性函数接口（有且只有一个抽象方法的接口）</h1><ul>
<li>Consumer<T> :消费型接口    void acept(T t);<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//消费型接口Consumer，输入一个参数，对其进行打印输出</span></span><br><span class="line"> Consumer&lt;String&gt; consumer = (x) -&gt; System.out.println(x);</span><br><span class="line"> <span class="comment">//打印字符串</span></span><br><span class="line"> consumer.accept(<span class="string">"Hello world!"</span>);</span><br></pre></td></tr></table></figure></li>
<li>Supplier<T> :供给型接口    T get();<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//供给型接口Supplier，返回指定字符串</span></span><br><span class="line">Supplier&lt;String&gt; supplier = () -&gt; <span class="string">"Hello world!"</span>;</span><br><span class="line"><span class="comment">//获取字符串</span></span><br><span class="line">supplier.get();</span><br></pre></td></tr></table></figure></li>
<li>Function&lt;T,R&gt; :函数型接口 R apply(T t);<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;String, Integer&gt; function = (x) -&gt; x.length();</span><br><span class="line"><span class="comment">//获取字符串长度</span></span><br><span class="line">function.apply(<span class="string">"Hello world!"</span>);</span><br></pre></td></tr></table></figure></li>
<li>Predicate<T> :断言型接口 boolean test(T t);<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//断言型接口Predicate，输入数字，判断是否大于0</span></span><br><span class="line">Predicate&lt;Integer&gt; predicate = (x) -&gt; x &gt; <span class="number">0</span>;</span><br><span class="line"><span class="comment">//获取判断结果</span></span><br><span class="line">predicate.test(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="1-Iterable-forEach-Consumer-lt-super-T-gt-action"><a href="#1-Iterable-forEach-Consumer-lt-super-T-gt-action" class="headerlink" title="1.Iterable.forEach(Consumer&lt;? super T&gt; action)"></a>1.Iterable.forEach(Consumer&lt;? super T&gt; action)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; soutList = Arrays.asList(<span class="string">"one"</span>,<span class="string">"two"</span>,<span class="string">"three"</span>);</span><br><span class="line">soutList.forEach(out-&gt; System.out.println(out));</span><br><span class="line">soutList.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">Page p = <span class="keyword">new</span> Page(<span class="string">"content"</span>);</span><br><span class="line">Page p = Page.<span class="keyword">new</span>(<span class="string">"content"</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Page&gt; <span class="title">createPagesFrom</span><span class="params">(Stream&lt;String&gt;; contents)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> contents.map(Page::<span class="keyword">new</span>).</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> <img src="1.jpg" alt="Iterable接口"><br> <img src="2.jpg" alt="forEach方法"></p>
<h3 id="1-Iterable接口允许一个对象成为forEach的目标"><a href="#1-Iterable接口允许一个对象成为forEach的目标" class="headerlink" title="1). Iterable接口允许一个对象成为forEach的目标"></a>1). Iterable接口允许一个对象成为forEach的目标</h3><h3 id="2-这里的forEach被声明为一个默认方法，并接收了一个消费者类型的函数接口，先查找匹配对应的操作，若不为空则执行操作"><a href="#2-这里的forEach被声明为一个默认方法，并接收了一个消费者类型的函数接口，先查找匹配对应的操作，若不为空则执行操作" class="headerlink" title="2). 这里的forEach被声明为一个默认方法，并接收了一个消费者类型的函数接口，先查找匹配对应的操作，若不为空则执行操作"></a>2). 这里的forEach被声明为一个默认方法，并接收了一个消费者类型的函数接口，先查找匹配对应的操作，若不为空则执行操作</h3><h3 id="3-接口中的默认方法可以不被实现类实现"><a href="#3-接口中的默认方法可以不被实现类实现" class="headerlink" title="3). 接口中的默认方法可以不被实现类实现"></a>3). 接口中的默认方法可以不被实现类实现</h3><h3 id="4-如上代码中，输出集合soutList调用了foreach方法，箭头左边是参数，右边是抽象方法的实现内容或已有方法的引用"><a href="#4-如上代码中，输出集合soutList调用了foreach方法，箭头左边是参数，右边是抽象方法的实现内容或已有方法的引用" class="headerlink" title="4). 如上代码中，输出集合soutList调用了foreach方法，箭头左边是参数，右边是抽象方法的实现内容或已有方法的引用"></a>4). 如上代码中，输出集合soutList调用了foreach方法，箭头左边是参数，右边是抽象方法的实现内容或已有方法的引用</h3><h3 id="5-当参数列表中的参数和方法签名匹配时，可以通过-直接引用方法，包括构造方法"><a href="#5-当参数列表中的参数和方法签名匹配时，可以通过-直接引用方法，包括构造方法" class="headerlink" title="5). 当参数列表中的参数和方法签名匹配时，可以通过 :: 直接引用方法，包括构造方法"></a>5). 当参数列表中的参数和方法签名匹配时，可以通过 :: 直接引用方法，包括构造方法</h3><h2 id="2-Collection-stream-、Stream、Stream-filter-Predicate-、Collector、Collectors、Collectors-toList"><a href="#2-Collection-stream-、Stream、Stream-filter-Predicate-、Collector、Collectors、Collectors-toList" class="headerlink" title="2.Collection.stream()、Stream、Stream#filter(Predicate)、Collector、Collectors、Collectors#toList()"></a>2.Collection.stream()、Stream、Stream#filter(Predicate)、Collector、Collectors、Collectors#toList()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Complete this for Exercise_2_Test#getAllPersonsEligibleToVote</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">* 根据给定年龄返回给定选民集合中合法年龄的选民集合</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> potentialVoters - voters to filter</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> legalAgeOfVoting - age where it's legal to vote</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> a list of eligible voters</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Person&gt; <span class="title">eligibleVoters</span><span class="params">(List&lt;Person&gt; potentialVoters, <span class="keyword">int</span> legalAgeOfVoting)</span> </span>&#123;</span><br><span class="line">      Stream&lt;Person&gt; personStream = potentialVoters.stream().filter(</span><br><span class="line">              person -&gt; person.getAge()&gt;=legalAgeOfVoting</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">return</span> personStream.collect(Collectors.toList());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-Collection-stream-返回一个Stream序列"><a href="#1-Collection-stream-返回一个Stream序列" class="headerlink" title="1). Collection#stream() 返回一个Stream序列"></a>1). Collection#stream() 返回一个Stream序列</h3><h3 id="2-Stream-流"><a href="#2-Stream-流" class="headerlink" title="2). Stream 流"></a>2). Stream 流</h3><pre><code>- A sequence of elements supporting sequential and parallel aggregate operations
- 支撑顺序和并行聚合操作元素的序列
- lazy： computation on the source data is only performed when the terminal operation is initiated, and source elements are consumed only as needed.
- 惰式执行：即仅在终端操作启动时才执行对源数据的计算，并且仅在需要时使用源元素。
- 在对流进行“操作”（类似查询和过滤）时，这些行为应该是无干扰（不修改流的数据源）且无状态（其结果不依赖于流管道执行过程中可能改变的任何状态）的
- 消费性质，只使用一次，不可以被重用</code></pre><h3 id="3-Stream-filter-Predicate-对流进行过滤-中间操作"><a href="#3-Stream-filter-Predicate-对流进行过滤-中间操作" class="headerlink" title="3). Stream#filter(Predicate)  对流进行过滤 中间操作"></a>3). Stream#filter(Predicate)  对流进行过滤 中间操作</h3><h3 id="4-Predicate-断言功能性函数接口，返回Boolean值-见上文"><a href="#4-Predicate-断言功能性函数接口，返回Boolean值-见上文" class="headerlink" title="4). Predicate 断言功能性函数接口，返回Boolean值 见上文"></a>4). Predicate 断言功能性函数接口，返回Boolean值 见上文</h3><h3 id="5-Stream-collect"><a href="#5-Stream-collect" class="headerlink" title="5). Stream.collect()"></a>5). Stream.collect()</h3><pre><code>- 返回一个结果容器 
- &lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector)
- &lt;R&gt; 结果的类型
- &lt;A&gt; Collector的积累类型</code></pre><h3 id="6-Collector-执行结果转换-Collectors-实现Collector的各种还原操作"><a href="#6-Collector-执行结果转换-Collectors-实现Collector的各种还原操作" class="headerlink" title="6). Collector 执行结果转换 Collectors 实现Collector的各种还原操作"></a>6). Collector 执行结果转换 Collectors 实现Collector的各种还原操作</h3><pre><code>- public interface Collector&lt;T, A, R&gt;
- &lt;T&gt;  输入元素的类型
- &lt;A&gt;  还原运算的可变累积型（通常隐藏作为一个实现细节）
- &lt;R&gt;  还原运算的结果类</code></pre><h3 id="7-Collectors-toList-返回一个Collector-，其累积的输入元素融入到一个新的List中"><a href="#7-Collectors-toList-返回一个Collector-，其累积的输入元素融入到一个新的List中" class="headerlink" title="7). Collectors#toList() 返回一个Collector ，其累积的输入元素融入到一个新的List中"></a>7). Collectors#toList() 返回一个Collector ，其累积的输入元素融入到一个新的List中</h3><pre><code>- public static &lt;T&gt; Collector&lt;T, ?, List&lt;T&gt;&gt; toList()
- &lt;T&gt;  输入元素的类型</code></pre><h2 id="3-Stream-map-Function"><a href="#3-Stream-map-Function" class="headerlink" title="3.Stream#map(Function)"></a>3.Stream#map(Function)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Apply a mapping of Books to titles (Strings)</span></span><br><span class="line"><span class="comment">   * </span></span><br><span class="line"><span class="comment">   * 将书籍的标题映射到一个新的List&lt;String&gt;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> books - books to transform</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> list of book titles</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">titlesOf</span><span class="params">(List&lt;Book&gt; books)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> books.stream().map(Book::getTitle).collect(Collectors.toList());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-Stream-map-Function"><a href="#1-Stream-map-Function" class="headerlink" title="1). Stream#map(Function)"></a>1). Stream#map(Function)</h3><pre><code>- 返回指定类型的流 中间操作
- Function 函数型功能接口 见上文
- java.util.stream.Stream&lt;T&gt; &lt;R&gt; Stream&lt;R&gt; map(Function&lt;? super T, ? extends R&gt; mapper)
- &lt;? super T&gt;/&lt;? extends T&gt; &lt;? super T&gt;表示包括T在内的任何T的父类，&lt;? extends T&gt;表示包括T在内的任何T的子类</code></pre>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jkd1.8</tag>
        <tag>lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk1.8_默认方法</title>
    <url>/2020/07/14/jdk1-8-%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(operator);</span><br><span class="line">        <span class="keyword">final</span> ListIterator&lt;E&gt; li = <span class="keyword">this</span>.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (li.hasNext()) &#123;</span><br><span class="line">            li.set(operator.apply(li.next()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">        Object[] a = <span class="keyword">this</span>.toArray();</span><br><span class="line">        Arrays.sort(a, (Comparator) c);</span><br><span class="line">        ListIterator&lt;E&gt; i = <span class="keyword">this</span>.listIterator();</span><br><span class="line">        <span class="keyword">for</span> (Object e : a) &#123;</span><br><span class="line">            i.next();</span><br><span class="line">            i.set((E) e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>接口类中支持申明带有实现的方法，可以由接口实现类的实例调用</p>
</blockquote>
<h1 id="和抽象类的区别"><a href="#和抽象类的区别" class="headerlink" title="和抽象类的区别"></a>和抽象类的区别</h1><ul>
<li>一个类只能继承一个抽象类；但是一个类可以实现多个接口。</li>
<li>抽象类有实例变量，而接口只能有类变量</li>
</ul>
<h1 id="多继承多实现中的优先级"><a href="#多继承多实现中的优先级" class="headerlink" title="多继承多实现中的优先级"></a>多继承多实现中的优先级</h1><blockquote>
<p>由于一个类可以实现多个接口，所以当一个类继承了多个签名相同的方法，类在选择方法时的优先级规则：</p>
</blockquote>
<ul>
<li>类中的方法优先级最高，类或父类中声明的方法的优先级高于任何声明为默认方法的优先级。</li>
<li>如果第一条无法判断，那么子接口的优先级更高：方法签名相同时，优先选择拥有最具体实现的默认方法的接口， 即如果B继承了A，那么B就比A更加具体。</li>
<li>最后，如果还是无法判断，继承了多个接口的类必须通过显式覆盖和调用期望的方法， 显式地选择使用哪一个默认方法的实现。</li>
</ul>
<h2 id="场景1："><a href="#场景1：" class="headerlink" title="场景1："></a>场景1：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello from A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello from B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> C().hello();<span class="comment">//hello from B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<blockquote>
<p>类中无方法，B继承了A，故认为B中的hello()更具体，输出“hello from B”</p>
</blockquote>
<h2 id="场景2："><a href="#场景2：" class="headerlink" title="场景2："></a>场景2：</h2><blockquote>
<p>若C继承了A的实现类D</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> C().hello();<span class="comment">//hello from B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<blockquote>
<p>C继承了D，但D没有对A的默认方法进行重写，故比较AB，还是输出“hello from B”</p>
</blockquote>
<h2 id="场景3："><a href="#场景3：" class="headerlink" title="场景3："></a>场景3：</h2><blockquote>
<p>若D中覆盖了A的默认方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello from D"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>父类中方法具有更高优先级，打印“hello from D”</p>
</blockquote>
<h2 id="场景4："><a href="#场景4：" class="headerlink" title="场景4："></a>场景4：</h2><blockquote>
<p>若B不再继承A</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello from A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello from B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">implements</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> C().hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="3.png" alt=""></p>
<blockquote>
<p>由于编译器无法识别A还是B的实现更加具体，所以会抛出编译错误：“C inherits unrelated defaults for hello() from types A and B”。<br>解决冲突，可以在C中覆盖hello()方法并在方法内显示的选择调用A还是B的方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">D</span> <span class="keyword">implements</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 显式地选择调用接口B中的方法</span></span><br><span class="line">        <span class="comment">// 同理，要调用接口A中的方法，可以这样：A.super.hello()</span></span><br><span class="line">        B.<span class="keyword">super</span>.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> C().hello();<span class="comment">//hello from B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jkd1.8</tag>
        <tag>默认方法</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk1.8_时间类</title>
    <url>/2020/05/26/jdk1-8-%E6%97%B6%E9%97%B4%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="java-time"><a href="#java-time" class="headerlink" title="java.time"></a>java.time</h1><h2 id="LocalDate-年月日"><a href="#LocalDate-年月日" class="headerlink" title="LocalDate(年月日)"></a>LocalDate(年月日)</h2><blockquote>
<p>本地日期和时间</p>
</blockquote>
<h3 id="1-最值"><a href="#1-最值" class="headerlink" title="1. 最值"></a>1. 最值</h3><blockquote>
<p>最大支持 +999999999-12-31 最小支持-999999999-01-01</p>
</blockquote>
<h3 id="2-比较方法"><a href="#2-比较方法" class="headerlink" title="2. 比较方法"></a>2. 比较方法</h3><p><img src="1.jpg" alt=""></p>
<blockquote>
<p>equals </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">LocalDate tomorrow = today.plus(<span class="number">1</span>, ChronoUnit.DAYS);</span><br><span class="line">LocalDate yesterday = tomorrow.minusDays(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span>(today.equals(tomorrow.minusDays(<span class="number">1</span>))) &#123;</span><br><span class="line">    System.out.println(<span class="string">"true"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"false"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-now-方法"><a href="#3-now-方法" class="headerlink" title="3. now()方法"></a>3. now()方法</h3><blockquote>
<p>获取当前时间，无参时为当前系统默认时区，参数为时区id </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtains the current date from the system clock in the specified time-zone.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This will query the &#123;<span class="doctag">@link</span> Clock#system(ZoneId) system clock&#125; to obtain the current date.</span></span><br><span class="line"><span class="comment"> * Specifying the time-zone avoids dependence on the default time-zone.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Using this method will prevent the ability to use an alternate clock for testing</span></span><br><span class="line"><span class="comment"> * because the clock is hard-coded.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> zone  the zone ID to use, not null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the current date using the system clock, not null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">now</span><span class="params">(ZoneId zone)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> now(Clock.system(zone));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtains the current date from the system clock in the default time-zone.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This will query the &#123;<span class="doctag">@link</span> Clock#systemDefaultZone() system clock&#125; in the default</span></span><br><span class="line"><span class="comment"> * time-zone to obtain the current date.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Using this method will prevent the ability to use an alternate clock for testing</span></span><br><span class="line"><span class="comment"> * because the clock is hard-coded.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the current date using the system clock and default time-zone, not null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">now</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> now(Clock.systemDefaultZone()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-plus-方法"><a href="#4-plus-方法" class="headerlink" title="4. plus()方法"></a>4. plus()方法</h3><blockquote>
<p>public LocalDate plus(long amountToAdd, TemporalUnit unit)  amountToAdd 要增加的总数 ；unit 时间单位 详见 ChronoUnit(TemporalUnit的实现类)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">LocalDate tomorrow = today.plus(<span class="number">1</span>, ChronoUnit.DAYS);</span><br><span class="line"></span><br><span class="line"><span class="comment">//plusYears(long yearsToAdd)\plusMonths(long monthsToAdd)\plusWeeks(long weeksToAdd)\plusDays(long daysToAdd)</span></span><br></pre></td></tr></table></figure>
<h3 id="5-minus-方法"><a href="#5-minus-方法" class="headerlink" title="5. minus()方法"></a>5. minus()方法</h3><blockquote>
<p>public LocalDate minus(long amountToSubtract, TemporalUnit unit)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">LocalDate tomorrow = today.minus(<span class="number">1</span>, ChronoUnit.DAYS);</span><br><span class="line"></span><br><span class="line"><span class="comment">//minusYears(long yearsToSubtract)\minusMonths(long monthsToSubtract)\minusWeeks(long weeksToSubtract)\minusDays(long daysToSubtract)</span></span><br></pre></td></tr></table></figure>
<h3 id="6-of-方法、getDayOfWeek-方法"><a href="#6-of-方法、getDayOfWeek-方法" class="headerlink" title="6. of()方法、getDayOfWeek()方法"></a>6. of()方法、getDayOfWeek()方法</h3><blockquote>
<p>LocalDate of(int year, Month month, int dayOfMonth)/LocalDate of(int year, int month, int dayOfMonth)<br>LocalDate.getDayOfWeek() 判断传入日期是一周中的第几天  return DayOfWeek对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDate independenceDay = LocalDate.of(<span class="number">2014</span>, Month.JULY, <span class="number">4</span>);</span><br><span class="line">DayOfWeek dayOfWeek = independenceDay.getDayOfWeek();</span><br><span class="line">System.out.println(dayOfWeek);<span class="comment">//FRIDAY</span></span><br><span class="line">System.out.println(dayOfWeek.getValue());<span class="comment">//5</span></span><br></pre></td></tr></table></figure>
<h3 id="7-DateTimeFormatter"><a href="#7-DateTimeFormatter" class="headerlink" title="7. DateTimeFormatter"></a>7. DateTimeFormatter</h3><blockquote>
<p>格式化时间，线程安全，类内创建一次可复用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例化 不指定时区</span></span><br><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm"</span>);</span><br><span class="line"><span class="comment">//实例化 指定时区</span></span><br><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"E, yyyy-MMMM-dd HH:mm"</span>, Locale.US);</span><br><span class="line"></span><br><span class="line">ZonedDateTime zdt = ZonedDateTime.now();</span><br><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd'T'HH:mm ZZZZ"</span>);</span><br><span class="line">System.out.println(formatter.format(zdt));<span class="comment">//2020-09-28T11:55 GMT+08:00</span></span><br><span class="line"></span><br><span class="line">DateTimeFormatter zhFormatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy MMM dd EE HH:mm"</span>, Locale.CHINA);</span><br><span class="line">System.out.println(zhFormatter.format(zdt));<span class="comment">//2020 九月 28 星期一 11:55</span></span><br><span class="line"></span><br><span class="line">DateTimeFormatter usFormatter = DateTimeFormatter.ofPattern(<span class="string">"E, MMMM/dd/yyyy HH:mm"</span>, Locale.US);</span><br><span class="line">System.out.println(usFormatter.format(zdt));<span class="comment">//Mon, September/28/2020 11:55</span></span><br><span class="line"></span><br><span class="line">System.out.println(DateTimeFormatter.ISO_DATE_TIME.format(zdt));<span class="comment">//2020-09-28T11:55:39.209+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>保留字母定义</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* All letters <span class="string">'A'</span> to <span class="string">'Z'</span> and <span class="string">'a'</span> to <span class="string">'z'</span> are reserved as pattern letters. The</span><br><span class="line">* following pattern letters are defined:</span><br><span class="line">* &lt;pre&gt;</span><br><span class="line">*  Symbol  Meaning                     Presentation      Examples</span><br><span class="line">*  ------  -------                     ------------      -------</span><br><span class="line">*   G       era                         text              AD; Anno Domini; A</span><br><span class="line">*   u       year                        year              <span class="number">2004</span>; <span class="number">04</span></span><br><span class="line">*   y       year-of-era                 year              <span class="number">2004</span>; <span class="number">04</span></span><br><span class="line">*   D       day-of-year                 number            <span class="number">189</span></span><br><span class="line">*   M/L     month-of-year               number/text       <span class="number">7</span>; <span class="number">07</span>; Jul; July; J</span><br><span class="line">*   d       day-of-month                number            <span class="number">10</span></span><br><span class="line">*</span><br><span class="line">*   Q/q     quarter-of-year             number/text       <span class="number">3</span>; <span class="number">03</span>; Q3; <span class="number">3</span>rd quarter</span><br><span class="line">*   Y       week-based-year             year              <span class="number">1996</span>; <span class="number">96</span></span><br><span class="line">*   w       week-of-week-based-year     number            <span class="number">27</span></span><br><span class="line">*   W       week-of-month               number            <span class="number">4</span></span><br><span class="line">*   E       day-of-week                 text              Tue; Tuesday; T</span><br><span class="line">*   e/c     localized day-of-week       number/text       <span class="number">2</span>; <span class="number">02</span>; Tue; Tuesday; T</span><br><span class="line">*   F       week-of-month               number            <span class="number">3</span></span><br><span class="line">*</span><br><span class="line">*   a       am-pm-of-day                text              PM</span><br><span class="line">*   h       clock-hour-of-am-pm (<span class="number">1</span>-<span class="number">12</span>)  number            <span class="number">12</span></span><br><span class="line">*   K       hour-of-am-pm (<span class="number">0</span>-<span class="number">11</span>)        number            <span class="number">0</span></span><br><span class="line">*   k       clock-hour-of-am-pm (<span class="number">1</span>-<span class="number">24</span>)  number            <span class="number">0</span></span><br><span class="line">*</span><br><span class="line">*   H       hour-of-day (<span class="number">0</span>-<span class="number">23</span>)          number            <span class="number">0</span></span><br><span class="line">*   m       minute-of-hour              number            <span class="number">30</span></span><br><span class="line">*   s       second-of-minute            number            <span class="number">55</span></span><br><span class="line">*   S       fraction-of-second          fraction          <span class="number">978</span></span><br><span class="line">*   A       milli-of-day                number            <span class="number">1234</span></span><br><span class="line">*   n       nano-of-second              number            <span class="number">987654321</span></span><br><span class="line">*   N       nano-of-day                 number            <span class="number">1234000000</span></span><br><span class="line">*</span><br><span class="line">*   V       time-zone ID                zone-id           America/Los_Angeles; Z; -<span class="number">08</span>:<span class="number">30</span></span><br><span class="line">*   z       time-zone name              zone-name         Pacific Standard Time; PST</span><br><span class="line">*   O       localized zone-offset       offset-O          GMT+<span class="number">8</span>; GMT+<span class="number">08</span>:<span class="number">00</span>; UTC-<span class="number">08</span>:<span class="number">00</span>;</span><br><span class="line">*   X       zone-offset <span class="string">'Z'</span> <span class="keyword">for</span> zero    offset-X          Z; -<span class="number">08</span>; -<span class="number">0830</span>; -<span class="number">08</span>:<span class="number">30</span>; -<span class="number">083015</span>; -<span class="number">08</span>:<span class="number">30</span>:<span class="number">15</span>;</span><br><span class="line">*   x       zone-offset                 offset-x          +<span class="number">0000</span>; -<span class="number">08</span>; -<span class="number">0830</span>; -<span class="number">08</span>:<span class="number">30</span>; -<span class="number">083015</span>; -<span class="number">08</span>:<span class="number">30</span>:<span class="number">15</span>;</span><br><span class="line">*   Z       zone-offset                 offset-Z          +<span class="number">0000</span>; -<span class="number">0800</span>; -<span class="number">08</span>:<span class="number">00</span>;</span><br><span class="line">*</span><br><span class="line">*   p       pad next                    pad modifier      <span class="number">1</span></span><br><span class="line">*</span><br><span class="line">*   <span class="string">'       escape for text             delimiter</span></span><br><span class="line"><span class="string">*   '</span><span class="string">'      single quote                literal           '</span></span><br><span class="line">*   [       optional section start</span><br><span class="line">*   ]       optional section end</span><br><span class="line">*   #       reserved for future use</span><br><span class="line">*   &#123;       reserved <span class="keyword">for</span> future use</span><br><span class="line">*   &#125;       reserved <span class="keyword">for</span> future use</span><br></pre></td></tr></table></figure>
<h2 id="LocalDateTime-年月日时分秒"><a href="#LocalDateTime-年月日时分秒" class="headerlink" title="LocalDateTime(年月日时分秒)"></a>LocalDateTime(年月日时分秒)</h2><blockquote>
<p>本地日期和时间</p>
</blockquote>
<h3 id="1-常用方法案例"><a href="#1-常用方法案例" class="headerlink" title="1. 常用方法案例"></a>1. 常用方法案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime ldt = LocalDateTime.of(<span class="number">2014</span>, Month.DECEMBER, <span class="number">31</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line"></span><br><span class="line">DayOfWeek dayOfWeek = ldt.getDayOfWeek();</span><br><span class="line">System.out.println(dayOfWeek);      <span class="comment">// WEDNESDAY</span></span><br><span class="line"></span><br><span class="line">Month month = ldt.getMonth();</span><br><span class="line">System.out.println(month);          <span class="comment">// DECEMBER</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> minuteOfDay = ldt.getLong(ChronoField.MINUTE_OF_DAY);</span><br><span class="line">System.out.println(minuteOfDay);    <span class="comment">// 23*60+59=1439</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> dayOfWeekLong = ldt.getLong(ChronoField.DAY_OF_WEEK);</span><br><span class="line">System.out.println(dayOfWeekLong);    <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">LocalDateTime parsed = LocalDateTime.parse(<span class="string">"2016-12-01 23:59:59"</span>, formatter);</span><br><span class="line">String string = parsed.format(formatter);</span><br><span class="line">System.out.println(string);     <span class="comment">// 2016-12-01 23:59:59</span></span><br></pre></td></tr></table></figure>
<h3 id="2-Instant时间戳"><a href="#2-Instant时间戳" class="headerlink" title="2. Instant时间戳"></a>2. Instant时间戳</h3><blockquote>
<p>在java.util.Date类与LocalDate、LocalDateTime类之间转换中 均可以通过Instant作为中间类完成转换</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LocalDateTime ldt = LocalDateTime.of(<span class="number">2014</span>, Month.DECEMBER, <span class="number">31</span>, <span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line"><span class="comment">//获取当前默认时区下ldt转换成的时间戳</span></span><br><span class="line">      Instant instant = ldt.atZone(ZoneId.systemDefault()).toInstant();</span><br><span class="line"></span><br><span class="line">      Date legacyDate = Date.from(instant);</span><br><span class="line">      System.out.println(legacyDate);     <span class="comment">// Wed Dec 31 23:59:59 CET 2014</span></span><br></pre></td></tr></table></figure>

<h2 id="LocalTime-时分秒"><a href="#LocalTime-时分秒" class="headerlink" title="LocalTime(时分秒)"></a>LocalTime(时分秒)</h2><blockquote>
<p>本地日期和时间</p>
</blockquote>
<h3 id="1-Clock"><a href="#1-Clock" class="headerlink" title="1. Clock"></a>1. Clock</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Clock clock = Clock.systemDefaultZone();</span><br><span class="line"><span class="comment">//返回1970-01-01T00:00Z (UTC)至今的毫秒数，即按毫秒单位的unix时间戳</span></span><br><span class="line"><span class="keyword">long</span> t0 = clock.millis();</span><br><span class="line">System.out.println(t0);</span><br><span class="line"></span><br><span class="line">Instant instant = clock.instant();</span><br><span class="line">Date legacyDate = Date.from(instant);</span><br><span class="line">System.out.println(legacyDate);</span><br></pre></td></tr></table></figure>
<h3 id="2-ZoneId-getRules-isBefore"><a href="#2-ZoneId-getRules-isBefore" class="headerlink" title="2. ZoneId.getRules(),isBefore()"></a>2. ZoneId.getRules(),isBefore()</h3><blockquote>
<p>getRules 当前默认时区与指定时区间的转换公式<br>isBefore 当前时间是否在指定时间之前<br>ChronoUnit.between 按指定时间单位计算俩时间的差</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZoneId zone1 = ZoneId.of(<span class="string">"Europe/Berlin"</span>);</span><br><span class="line">ZoneId zone2 = ZoneId.of(<span class="string">"Brazil/East"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(zone1.getRules());<span class="comment">//ZoneRules[currentStandardOffset=+01:00]</span></span><br><span class="line">System.out.println(zone2.getRules());<span class="comment">//ZoneRules[currentStandardOffset=-03:00]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// time</span></span><br><span class="line">LocalTime now1 = LocalTime.now(zone1);<span class="comment">//10:17:39.043</span></span><br><span class="line">LocalTime now2 = LocalTime.now(zone2);<span class="comment">//05:17:39.050</span></span><br><span class="line"></span><br><span class="line">System.out.println(now1);</span><br><span class="line">System.out.println(now2);</span><br><span class="line"></span><br><span class="line">System.out.println(now1.isBefore(now2));  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> hoursBetween = ChronoUnit.HOURS.between(now1, now2);</span><br><span class="line"><span class="keyword">long</span> minutesBetween = ChronoUnit.MINUTES.between(now1, now2);</span><br><span class="line">System.out.println(hoursBetween);<span class="comment">//-4</span></span><br><span class="line">System.out.println(minutesBetween);<span class="comment">//-299</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// create time</span></span><br><span class="line"></span><br><span class="line">LocalTime now = LocalTime.now();</span><br><span class="line">System.out.println(now);<span class="comment">//16:17:39.052</span></span><br><span class="line"></span><br><span class="line">LocalTime late = LocalTime.of(<span class="number">23</span>, <span class="number">59</span>, <span class="number">59</span>);</span><br><span class="line">System.out.println(late);<span class="comment">//23:59:59</span></span><br><span class="line">DateTimeFormatter germanFormatter =</span><br><span class="line">                DateTimeFormatter</span><br><span class="line">                        .ofLocalizedTime(FormatStyle.SHORT)</span><br><span class="line">                        .withLocale(Locale.GERMAN);</span><br><span class="line"></span><br><span class="line">LocalTime formateTime = LocalTime.parse(<span class="string">"13:37"</span>, germanFormatter);</span><br><span class="line">System.out.println(formateTime);<span class="comment">//13:37</span></span><br></pre></td></tr></table></figure>
<h2 id="ZonedDateTime"><a href="#ZonedDateTime" class="headerlink" title="ZonedDateTime"></a>ZonedDateTime</h2><blockquote>
<p>带时区的日期和时间(ISO-8601)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZonedDateTime  zonedDateTime = ZonedDateTime.now();</span><br><span class="line">System.out.println(zonedDateTime);<span class="comment">//2020-09-28T17:19:44.836+08:00[Asia/Shanghai]</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>jkd1.8</tag>
        <tag>时间类</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk源码_List</title>
    <url>/2020/10/08/jdk%E6%BA%90%E7%A0%81-List/</url>
    <content><![CDATA[<h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><blockquote>
<p>继承了Collection，Collection继承了Iterable</p>
</blockquote>
<ul>
<li><strong>文档简述</strong>：</li>
<li>有序的集合，也被称为序列，此接口的使用者可以对插入List中的每个元素进行精准的控制，可以通过下标搜索或访问List中的每一个元素。</li>
<li>与set不同，List允许重复的元素。</li>
<li>索引从零开始。</li>
<li>ListIterator：更强大的迭代器，继承于Iterator接口,只能用于各种List类型的访问。</li>
<li>List接口提供了两个方法来搜索指定的对象，但在很多实现中，它们将执行高开销的线性搜索。</li>
<li>List接口提供了两种方法来有效地插入，并在该列表中的任意点移除多个元件。</li>
<li>虽然List允许把自身做为元素包含,但equals方法和hashCode方法在这样的List上将不具备很好的支持性</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An ordered collection (also known as a &lt;i&gt;sequence&lt;/i&gt;).  The user of this</span></span><br><span class="line"><span class="comment"> * interface has precise control over where in the list each element is</span></span><br><span class="line"><span class="comment"> * inserted.  The user can access elements by their integer index (position in</span></span><br><span class="line"><span class="comment"> * the list), and search for elements in the list.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Unlike sets, lists typically allow duplicate elements.  More formally,</span></span><br><span class="line"><span class="comment"> * lists typically allow pairs of elements &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * such that &lt;tt&gt;e1.equals(e2)&lt;/tt&gt;, and they typically allow multiple</span></span><br><span class="line"><span class="comment"> * null elements if they allow null elements at all.  It is not inconceivable</span></span><br><span class="line"><span class="comment"> * that someone might wish to implement a list that prohibits duplicates, by</span></span><br><span class="line"><span class="comment"> * throwing runtime exceptions when the user attempts to insert them, but we</span></span><br><span class="line"><span class="comment"> * expect this usage to be rare.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The &lt;tt&gt;List&lt;/tt&gt; interface places additional stipulations, beyond those</span></span><br><span class="line"><span class="comment"> * specified in the &lt;tt&gt;Collection&lt;/tt&gt; interface, on the contracts of the</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;iterator&lt;/tt&gt;, &lt;tt&gt;add&lt;/tt&gt;, &lt;tt&gt;remove&lt;/tt&gt;, &lt;tt&gt;equals&lt;/tt&gt;, and</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;hashCode&lt;/tt&gt; methods.  Declarations for other inherited methods are</span></span><br><span class="line"><span class="comment"> * also included here for convenience.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The &lt;tt&gt;List&lt;/tt&gt; interface provides four methods for positional (indexed)</span></span><br><span class="line"><span class="comment"> * access to list elements.  Lists (like Java arrays) are zero based.  Note</span></span><br><span class="line"><span class="comment"> * that these operations may execute in time proportional to the index value</span></span><br><span class="line"><span class="comment"> * for some implementations (the &lt;tt&gt;LinkedList&lt;/tt&gt; class, for</span></span><br><span class="line"><span class="comment"> * example). Thus, iterating over the elements in a list is typically</span></span><br><span class="line"><span class="comment"> * preferable to indexing through it if the caller does not know the</span></span><br><span class="line"><span class="comment"> * implementation.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The &lt;tt&gt;List&lt;/tt&gt; interface provides a special iterator, called a</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;ListIterator&lt;/tt&gt;, that allows element insertion and replacement, and</span></span><br><span class="line"><span class="comment"> * bidirectional access in addition to the normal operations that the</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;Iterator&lt;/tt&gt; interface provides.  A method is provided to obtain a</span></span><br><span class="line"><span class="comment"> * list iterator that starts at a specified position in the list.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The &lt;tt&gt;List&lt;/tt&gt; interface provides two methods to search for a specified</span></span><br><span class="line"><span class="comment"> * object.  From a performance standpoint, these methods should be used with</span></span><br><span class="line"><span class="comment"> * caution.  In many implementations they will perform costly linear</span></span><br><span class="line"><span class="comment"> * searches.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The &lt;tt&gt;List&lt;/tt&gt; interface provides two methods to efficiently insert and</span></span><br><span class="line"><span class="comment"> * remove multiple elements at an arbitrary point in the list.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * Note: While it is permissible for lists to contain themselves as elements,</span></span><br><span class="line"><span class="comment"> * extreme caution is advised: the &lt;tt&gt;equals&lt;/tt&gt; and &lt;tt&gt;hashCode&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * methods are no longer well defined on such a list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Some list implementations have restrictions on the elements that</span></span><br><span class="line"><span class="comment"> * they may contain.  For example, some implementations prohibit null elements,</span></span><br><span class="line"><span class="comment"> * and some have restrictions on the types of their elements.  Attempting to</span></span><br><span class="line"><span class="comment"> * add an ineligible element throws an unchecked exception, typically</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;NullPointerException&lt;/tt&gt; or &lt;tt&gt;ClassCastException&lt;/tt&gt;.  Attempting</span></span><br><span class="line"><span class="comment"> * to query the presence of an ineligible element may throw an exception,</span></span><br><span class="line"><span class="comment"> * or it may simply return false; some implementations will exhibit the former</span></span><br><span class="line"><span class="comment"> * behavior and some will exhibit the latter.  More generally, attempting an</span></span><br><span class="line"><span class="comment"> * operation on an ineligible element whose completion would not result in</span></span><br><span class="line"><span class="comment"> * the insertion of an ineligible element into the list may throw an</span></span><br><span class="line"><span class="comment"> * exception or it may succeed, at the option of the implementation.</span></span><br><span class="line"><span class="comment"> * Such exceptions are marked as "optional" in the specification for this</span></span><br><span class="line"><span class="comment"> * interface.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This interface is a member of the</span></span><br><span class="line"><span class="comment"> * &lt;a href="&#123;<span class="doctag">@docRoot</span>&#125;/../technotes/guides/collections/index.html"&gt;</span></span><br><span class="line"><span class="comment"> * Java Collections Framework&lt;/a&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt; the type of elements in this list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Josh Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Neal Gafter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Collection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Set</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ArrayList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> LinkedList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Vector</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Arrays#asList(Object[])</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Collections#nCopies(int, Object)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Collections#EMPTY_LIST</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> AbstractList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> AbstractSequentialList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="AbstractList"><a href="#AbstractList" class="headerlink" title="AbstractList"></a>AbstractList</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="modConut"><a href="#modConut" class="headerlink" title="modConut"></a>modConut</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of times this list has been &lt;i&gt;structurally modified&lt;/i&gt;.</span></span><br><span class="line"><span class="comment"> * Structural modifications are those that change the size of the</span></span><br><span class="line"><span class="comment"> * list, or otherwise perturb it in such a fashion that iterations in</span></span><br><span class="line"><span class="comment"> * progress may yield incorrect results.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This field is used by the iterator and list iterator implementation</span></span><br><span class="line"><span class="comment"> * returned by the &#123;<span class="doctag">@code</span> iterator&#125; and &#123;<span class="doctag">@code</span> listIterator&#125; methods.</span></span><br><span class="line"><span class="comment"> * If the value of this field changes unexpectedly, the iterator (or list</span></span><br><span class="line"><span class="comment"> * iterator) will throw a &#123;<span class="doctag">@code</span> ConcurrentModificationException&#125; in</span></span><br><span class="line"><span class="comment"> * response to the &#123;<span class="doctag">@code</span> next&#125;, &#123;<span class="doctag">@code</span> remove&#125;, &#123;<span class="doctag">@code</span> previous&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> set&#125; or &#123;<span class="doctag">@code</span> add&#125; operations.  This provides</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;fail-fast&lt;/i&gt; behavior, rather than non-deterministic behavior in</span></span><br><span class="line"><span class="comment"> * the face of concurrent modification during iteration.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;Use of this field by subclasses is optional.&lt;/b&gt; If a subclass</span></span><br><span class="line"><span class="comment"> * wishes to provide fail-fast iterators (and list iterators), then it</span></span><br><span class="line"><span class="comment"> * merely has to increment this field in its &#123;<span class="doctag">@code</span> add(int, E)&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> remove(int)&#125; methods (and any other methods that it overrides</span></span><br><span class="line"><span class="comment"> * that result in structural modifications to the list).  A single call to</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> add(int, E)&#125; or &#123;<span class="doctag">@code</span> remove(int)&#125; must add no more than</span></span><br><span class="line"><span class="comment"> * one to this field, or the iterators (and list iterators) will throw</span></span><br><span class="line"><span class="comment"> * bogus &#123;<span class="doctag">@code</span> ConcurrentModificationExceptions&#125;.  If an implementation</span></span><br><span class="line"><span class="comment"> * does not wish to provide fail-fast iterators, this field may be</span></span><br><span class="line"><span class="comment"> * ignored.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<h2 id="Itr"><a href="#Itr" class="headerlink" title="Itr"></a>Itr</h2><h2 id="ListItr"><a href="#ListItr" class="headerlink" title="ListItr"></a>ListItr</h2><h1 id="AbstractSequentialList"><a href="#AbstractSequentialList" class="headerlink" title="AbstractSequentialList"></a>AbstractSequentialList</h1><blockquote>
<p>有序List</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="get-–-AbstractObjectList"><a href="#get-–-AbstractObjectList" class="headerlink" title="get() – AbstractObjectList"></a>get() – AbstractObjectList</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; getLength()) &#123;</span><br><span class="line">        <span class="keyword">return</span> item(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span> + index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="get-–-AbstractSequentialList"><a href="#get-–-AbstractSequentialList" class="headerlink" title="get() – AbstractSequentialList"></a>get() – AbstractSequentialList</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the element at the specified position in this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This implementation first gets a list iterator pointing to the</span></span><br><span class="line"><span class="comment"> * indexed element (with &lt;tt&gt;listIterator(index)&lt;/tt&gt;).  Then, it gets</span></span><br><span class="line"><span class="comment"> * the element using &lt;tt&gt;ListIterator.next&lt;/tt&gt; and returns it.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> listIterator(index).next();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchElementException exc) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="listIterator-index"><a href="#listIterator-index" class="headerlink" title="listIterator(index)"></a>listIterator(index)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a list-iterator of the elements in this list (in proper</span></span><br><span class="line"><span class="comment"> * sequence), starting at the specified position in the list.</span></span><br><span class="line"><span class="comment"> * Obeys the general contract of &#123;<span class="doctag">@code</span> List.listIterator(int)&#125;.&lt;p&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * The list-iterator is &lt;i&gt;fail-fast&lt;/i&gt;: if the list is structurally</span></span><br><span class="line"><span class="comment"> * modified at any time after the Iterator is created, in any way except</span></span><br><span class="line"><span class="comment"> * through the list-iterator's own &#123;<span class="doctag">@code</span> remove&#125; or &#123;<span class="doctag">@code</span> add&#125;</span></span><br><span class="line"><span class="comment"> * methods, the list-iterator will throw a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> ConcurrentModificationException&#125;.  Thus, in the face of</span></span><br><span class="line"><span class="comment"> * concurrent modification, the iterator fails quickly and cleanly, rather</span></span><br><span class="line"><span class="comment"> * than risking arbitrary, non-deterministic behavior at an undetermined</span></span><br><span class="line"><span class="comment"> * time in the future.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index index of the first element to be returned from the</span></span><br><span class="line"><span class="comment"> *              list-iterator (by a call to &#123;<span class="doctag">@code</span> next&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a ListIterator of the elements in this list (in proper</span></span><br><span class="line"><span class="comment"> * sequence), starting at the specified position in the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IndexOutOfBoundsException &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> List#listIterator(int)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An iterator for lists that allows the programmer</span></span><br><span class="line"><span class="comment"> * to traverse the list in either direction, modify</span></span><br><span class="line"><span class="comment"> * the list during iteration, and obtain the iterator's</span></span><br><span class="line"><span class="comment"> * current position in the list. A &#123;<span class="doctag">@code</span> ListIterator&#125;</span></span><br><span class="line"><span class="comment"> * has no current element; its &lt;I&gt;cursor position&lt;/I&gt; always</span></span><br><span class="line"><span class="comment"> * lies between the element that would be returned by a call</span></span><br><span class="line"><span class="comment"> * to &#123;<span class="doctag">@code</span> previous()&#125; and the element that would be</span></span><br><span class="line"><span class="comment"> * returned by a call to &#123;<span class="doctag">@code</span> next()&#125;.</span></span><br><span class="line"><span class="comment"> * An iterator for a list of length &#123;<span class="doctag">@code</span> n&#125; has &#123;<span class="doctag">@code</span> n+1&#125; possible</span></span><br><span class="line"><span class="comment"> * cursor positions, as illustrated by the carets (&#123;<span class="doctag">@code</span> ^&#125;) below:</span></span><br><span class="line"><span class="comment"> * &lt;PRE&gt;</span></span><br><span class="line"><span class="comment"> *                      Element(0)   Element(1)   Element(2)   ... Element(n-1)</span></span><br><span class="line"><span class="comment"> * cursor positions:  ^            ^            ^            ^                  ^</span></span><br><span class="line"><span class="comment"> * &lt;/PRE&gt;</span></span><br><span class="line"><span class="comment"> * Note that the &#123;<span class="doctag">@link</span> #remove&#125; and &#123;<span class="doctag">@link</span> #set(Object)&#125; methods are</span></span><br><span class="line"><span class="comment"> * &lt;i&gt;not&lt;/i&gt; defined in terms of the cursor position;  they are defined to</span></span><br><span class="line"><span class="comment"> * operate on the last element returned by a call to &#123;<span class="doctag">@link</span> #next&#125; or</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #previous()&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This interface is a member of the</span></span><br><span class="line"><span class="comment"> * &lt;a href="&#123;<span class="doctag">@docRoot</span>&#125;/../technotes/guides/collections/index.html"&gt;</span></span><br><span class="line"><span class="comment"> * Java Collections Framework&lt;/a&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Josh Bloch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Collection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> List</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Iterator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Enumeration</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> List#listIterator()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   1.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the next element in the list and advances the cursor position.</span></span><br><span class="line"><span class="comment"> * This method may be called repeatedly to iterate through the list,</span></span><br><span class="line"><span class="comment"> * or intermixed with calls to &#123;<span class="doctag">@link</span> #previous&#125; to go back and forth.</span></span><br><span class="line"><span class="comment"> * (Note that alternating calls to &#123;<span class="doctag">@code</span> next&#125; and &#123;<span class="doctag">@code</span> previous&#125;</span></span><br><span class="line"><span class="comment"> * will return the same element repeatedly.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the next element in the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchElementException if the iteration has no next element</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h2 id="previous"><a href="#previous" class="headerlink" title="previous()"></a>previous()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the previous element in the list and moves the cursor</span></span><br><span class="line"><span class="comment"> * position backwards.  This method may be called repeatedly to</span></span><br><span class="line"><span class="comment"> * iterate through the list backwards, or intermixed with calls to</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #next&#125; to go back and forth.  (Note that alternating calls</span></span><br><span class="line"><span class="comment"> * to &#123;<span class="doctag">@code</span> next&#125; and &#123;<span class="doctag">@code</span> previous&#125; will return the same</span></span><br><span class="line"><span class="comment"> * element repeatedly.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous element in the list</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchElementException if the iteration has no previous</span></span><br><span class="line"><span class="comment"> *         element</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">E <span class="title">previous</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h1 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h1><blockquote>
<p>线程安全的ArrayList结构</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A thread-safe variant of &#123;<span class="doctag">@link</span> java.util.ArrayList&#125; in which all mutative</span></span><br><span class="line"><span class="comment"> * operations (&#123;<span class="doctag">@code</span> add&#125;, &#123;<span class="doctag">@code</span> set&#125;, and so on) are implemented by</span></span><br><span class="line"><span class="comment"> * making a fresh copy of the underlying array.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This is ordinarily too costly, but may be &lt;em&gt;more&lt;/em&gt; efficient</span></span><br><span class="line"><span class="comment"> * than alternatives when traversal operations vastly outnumber</span></span><br><span class="line"><span class="comment"> * mutations, and is useful when you cannot or don't want to</span></span><br><span class="line"><span class="comment"> * synchronize traversals, yet need to preclude interference among</span></span><br><span class="line"><span class="comment"> * concurrent threads.  The "snapshot" style iterator method uses a</span></span><br><span class="line"><span class="comment"> * reference to the state of the array at the point that the iterator</span></span><br><span class="line"><span class="comment"> * was created. This array never changes during the lifetime of the</span></span><br><span class="line"><span class="comment"> * iterator, so interference is impossible and the iterator is</span></span><br><span class="line"><span class="comment"> * guaranteed not to throw &#123;<span class="doctag">@code</span> ConcurrentModificationException&#125;.</span></span><br><span class="line"><span class="comment"> * The iterator will not reflect additions, removals, or changes to</span></span><br><span class="line"><span class="comment"> * the list since the iterator was created.  Element-changing</span></span><br><span class="line"><span class="comment"> * operations on iterators themselves (&#123;<span class="doctag">@code</span> remove&#125;, &#123;<span class="doctag">@code</span> set&#125;, and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> add&#125;) are not supported. These methods throw</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> UnsupportedOperationException&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;All elements are permitted, including &#123;<span class="doctag">@code</span> null&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Memory consistency effects: As with other concurrent</span></span><br><span class="line"><span class="comment"> * collections, actions in a thread prior to placing an object into a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> CopyOnWriteArrayList&#125;</span></span><br><span class="line"><span class="comment"> * &lt;a href="package-summary.html#MemoryVisibility"&gt;&lt;i&gt;happen-before&lt;/i&gt;&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * actions subsequent to the access or removal of that element from</span></span><br><span class="line"><span class="comment"> * the &#123;<span class="doctag">@code</span> CopyOnWriteArrayList&#125; in another thread.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This class is a member of the</span></span><br><span class="line"><span class="comment"> * &lt;a href="&#123;<span class="doctag">@docRoot</span>&#125;/../technotes/guides/collections/index.html"&gt;</span></span><br><span class="line"><span class="comment"> * Java Collections Framework&lt;/a&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;E&gt; the type of elements held in this collection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Doug Lea</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArrayList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="COWIterator"><a href="#COWIterator" class="headerlink" title="COWIterator"></a>COWIterator</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">COWIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><h2 id="get-–-arrayList"><a href="#get-–-arrayList" class="headerlink" title="get() – arrayList"></a>get() – arrayList</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line">		</span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>检查是否越界，返回对应下标元素</p>
</blockquote>
<h2 id="elementData"><a href="#elementData" class="headerlink" title="elementData"></a>elementData</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The array buffer into which the elements of the ArrayList are stored.</span></span><br><span class="line"><span class="comment">    * The capacity of the ArrayList is the length of this array buffer. Any</span></span><br><span class="line"><span class="comment">    * empty ArrayList with elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA</span></span><br><span class="line"><span class="comment">    * will be expanded to DEFAULT_CAPACITY when the first element is added.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>存储ArrayList中的元素</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>空ArrayList</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>初始化时的默认大小<br>当初始化ArrayList实例时，若为实例赋大小，则使用 EMPTY_ELEMENTDATA，若不赋大小，则使用 DEFAULTCAPACITY_EMPTY_ELEMENTDATA<br>区别在当向空的ArrayList添加元素时</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span> +</span><br><span class="line">                   initialCapacity);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">calculateCapacity</span><span class="params">(Object[] elementData, <span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">           <span class="keyword">return</span> Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> minCapacity;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       modCount++;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">           grow(minCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">       elementData[size++] = e;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// overflow-conscious code</span></span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = minCapacity;</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">       <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="next-1"><a href="#next-1" class="headerlink" title="next()"></a>next()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="keyword">int</span> i = cursor;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    cursor = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="previous-1"><a href="#previous-1" class="headerlink" title="previous()"></a>previous()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="keyword">int</span> i = cursor - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    cursor = i;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h1><h2 id="next-2"><a href="#next-2" class="headerlink" title="next()"></a>next()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="keyword">if</span> (!hasNext())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">    lastReturned = next;</span><br><span class="line">    next = next.next;</span><br><span class="line">    nextIndex++;</span><br><span class="line">    <span class="keyword">return</span> lastReturned.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="previous-2"><a href="#previous-2" class="headerlink" title="previous()"></a>previous()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="keyword">if</span> (!hasPrevious())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">    lastReturned = next = (next == <span class="keyword">null</span>) ? last : next.prev;</span><br><span class="line">    nextIndex--;</span><br><span class="line">    <span class="keyword">return</span> lastReturned.item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk源码_Collection</title>
    <url>/2020/10/07/jdk%E6%BA%90%E7%A0%81-Collection/</url>
    <content><![CDATA[<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><blockquote>
<p>集合结构中的根接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><blockquote>
<p>继承Iterable接口，故可调用默认方法forEach</p>
</blockquote>
<h1 id="AbstractCollection"><a href="#AbstractCollection" class="headerlink" title="AbstractCollection"></a>AbstractCollection</h1><blockquote>
<p>提供了 Collection 接口的基本实现</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCollection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="iterator"><a href="#iterator" class="headerlink" title="iterator()"></a>iterator()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an iterator over the elements contained in this collection.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an iterator over the elements contained in this collection</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h3 id="AbstractList-iterator"><a href="#AbstractList-iterator" class="headerlink" title="AbstractList.iterator"></a>AbstractList.iterator</h3><blockquote>
<p>public abstract class AbstractList<E> extends AbstractCollection<E> implements List<E> </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Itr"><a href="#Itr" class="headerlink" title="Itr"></a>Itr</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Index of element to be returned by subsequent call to next.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Index of element returned by most recent call to next or</span></span><br><span class="line"><span class="comment">         * previous.  Reset to -1 if this element is deleted by a call</span></span><br><span class="line"><span class="comment">         * to remove.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> lastRet = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The modCount value that the iterator believes that the backing</span></span><br><span class="line"><span class="comment">         * List should have.  If this expectation is violated, the iterator</span></span><br><span class="line"><span class="comment">         * has detected concurrent modification.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> i = cursor;</span><br><span class="line">                E next = get(i);</span><br><span class="line">                lastRet = i;</span><br><span class="line">                cursor = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">                checkForComodification();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h2 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>public abstract class AbstractList<E> extends AbstractCollection<E> implements List<E><br>public class ArrayList<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, java.io.Serializable</p>
</blockquote>
<h3 id="ArrayList-size"><a href="#ArrayList-size" class="headerlink" title="ArrayList.size()"></a>ArrayList.size()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The size of the ArrayList (the number of elements it contains).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@serial</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the number of elements in this list.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the number of elements in this list</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="boolean-isEmpty"><a href="#boolean-isEmpty" class="headerlink" title="boolean isEmpty()"></a>boolean isEmpty()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> size() == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="boolean-contains-Object-o"><a href="#boolean-contains-Object-o" class="headerlink" title="boolean contains(Object o)"></a>boolean contains(Object o)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">            <span class="keyword">if</span> (it.next() == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())</span><br><span class="line">            <span class="keyword">if</span> (o.equals(it.next()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>集合可以存入空对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Collection collection = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    collection.add(<span class="keyword">null</span>);</span><br><span class="line">    System.out.println(collection.size()==<span class="number">0</span>);<span class="comment">//false</span></span><br><span class="line">    System.out.println(collection.contains(<span class="keyword">null</span>));<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="toArray"><a href="#toArray" class="headerlink" title="toArray()"></a>toArray()</h2><h3 id="Object-toArray"><a href="#Object-toArray" class="headerlink" title="Object[] toArray()"></a>Object[] toArray()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">    <span class="comment">// Estimate size of array; be prepared to see more or fewer elements</span></span><br><span class="line">    Object[] r = <span class="keyword">new</span> Object[size()];</span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!it.hasNext()) <span class="comment">// fewer elements than expected</span></span><br><span class="line">            <span class="keyword">return</span> Arrays.copyOf(r, i);</span><br><span class="line">        r[i] = it.next();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> it.hasNext() ? finishToArray(r, it) : r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>先根据Size()方法预建立一个与集合长度相等的数组，然后进行判断，若迭代过程中发现对象没有预期的多，则直接截取当前的数组返回</p>
</blockquote>
<h3 id="T-toArray-T-a"><a href="#T-toArray-T-a" class="headerlink" title=" T[] toArray(T[] a)"></a><T> T[] toArray(T[] a)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">    <span class="comment">// Estimate size of array; be prepared to see more or fewer elements</span></span><br><span class="line">    <span class="keyword">int</span> size = size();</span><br><span class="line">    T[] r = a.length &gt;= size ? a :</span><br><span class="line">            (T[]) java.lang.reflect.Array</span><br><span class="line">                    .newInstance(a.getClass().getComponentType(), size);</span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!it.hasNext()) &#123; <span class="comment">// fewer elements than expected</span></span><br><span class="line">            <span class="keyword">if</span> (a == r) &#123;</span><br><span class="line">                r[i] = <span class="keyword">null</span>; <span class="comment">// null-terminate</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.length &lt; i) &#123;</span><br><span class="line">                <span class="keyword">return</span> Arrays.copyOf(r, i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.arraycopy(r, <span class="number">0</span>, a, <span class="number">0</span>, i);</span><br><span class="line">                <span class="keyword">if</span> (a.length &gt; i) &#123;</span><br><span class="line">                    a[i] = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        r[i] = (T) it.next();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// more elements than expected</span></span><br><span class="line">    <span class="keyword">return</span> it.hasNext() ? finishToArray(r, it) : r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>若参数数组a的长度大于集合的长度，则直接用a数组赋值，若小于则利用反射建立一个长度等于集合长度的数组</p>
</blockquote>
<h2 id="boolean-remove-Object-o"><a href="#boolean-remove-Object-o" class="headerlink" title="boolean remove(Object o)"></a>boolean remove(Object o)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (it.next() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(it.next())) &#123;</span><br><span class="line">                it.remove();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Object-equals"><a href="#Object-equals" class="headerlink" title="Object.equals"></a>Object.equals</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="boolean-containsAll-Collection-lt-gt-c"><a href="#boolean-containsAll-Collection-lt-gt-c" class="headerlink" title="boolean containsAll(Collection&lt;?&gt; c)"></a>boolean containsAll(Collection&lt;?&gt; c)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Object e : c)</span><br><span class="line">        <span class="keyword">if</span> (!contains(e))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="boolean-addAll-Collection-lt-extends-E-gt-c"><a href="#boolean-addAll-Collection-lt-extends-E-gt-c" class="headerlink" title="boolean addAll(Collection&lt;? extends E&gt; c)"></a>boolean addAll(Collection&lt;? extends E&gt; c)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (E e : c)</span><br><span class="line">        <span class="keyword">if</span> (add(e))</span><br><span class="line">            modified = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">return</span> modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="boolean-removeAll-Collection-lt-gt-c"><a href="#boolean-removeAll-Collection-lt-gt-c" class="headerlink" title="boolean removeAll(Collection&lt;?&gt; c)"></a>boolean removeAll(Collection&lt;?&gt; c)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(c);</span><br><span class="line">    <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">    Iterator&lt;?&gt; it = iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c.contains(it.next())) &#123;</span><br><span class="line">            it.remove();</span><br><span class="line">            modified = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Objects-requireNonNull-c"><a href="#Objects-requireNonNull-c" class="headerlink" title="Objects.requireNonNull(c)"></a>Objects.requireNonNull(c)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">requireNonNull</span><span class="params">(T obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="default-boolean-removeIf-Predicate-lt-super-E-gt-filter"><a href="#default-boolean-removeIf-Predicate-lt-super-E-gt-filter" class="headerlink" title="default boolean removeIf(Predicate&lt;? super E&gt; filter)"></a>default boolean removeIf(Predicate&lt;? super E&gt; filter)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">removeIf</span><span class="params">(Predicate&lt;? <span class="keyword">super</span> E&gt; filter)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(filter);</span><br><span class="line">    <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">final</span> Iterator&lt;E&gt; each = iterator();</span><br><span class="line">    <span class="keyword">while</span> (each.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (filter.test(each.next())) &#123;</span><br><span class="line">            each.remove();</span><br><span class="line">            removed = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> removed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>传入一个断言型功能函数，判断，若符合断言要求，remove</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collection&lt;String&gt; collection = <span class="keyword">new</span> ArrayList&lt;String&gt;(Arrays.asList(<span class="string">"first"</span>,<span class="string">"second"</span>,<span class="string">"third"</span>,<span class="string">"--------"</span>));</span><br><span class="line">collection.removeIf(s-&gt;s.equals(<span class="string">"first"</span>));</span><br></pre></td></tr></table></figure>
<h2 id="boolean-retainAll-Collection-lt-gt-c"><a href="#boolean-retainAll-Collection-lt-gt-c" class="headerlink" title="boolean retainAll(Collection&lt;?&gt; c)"></a>boolean retainAll(Collection&lt;?&gt; c)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(c);</span><br><span class="line">    <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!c.contains(it.next())) &#123;</span><br><span class="line">            it.remove();</span><br><span class="line">            modified = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>取交集 遍历集合，若元素存在于参数集合C，则移除，并将modified置为true返回</p>
</blockquote>
<h2 id="boolean-equals-Object-o"><a href="#boolean-equals-Object-o" class="headerlink" title="boolean equals(Object o)"></a>boolean equals(Object o)</h2><blockquote>
<p>AbstractList</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">this</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> List))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    ListIterator&lt;E&gt; e1 = listIterator();</span><br><span class="line">    ListIterator&lt;?&gt; e2 = ((List&lt;?&gt;) o).listIterator();</span><br><span class="line">    <span class="keyword">while</span> (e1.hasNext() &amp;&amp; e2.hasNext()) &#123;</span><br><span class="line">        E o1 = e1.next();</span><br><span class="line">        Object o2 = e2.next();</span><br><span class="line">        <span class="keyword">if</span> (!(o1 == <span class="keyword">null</span> ? o2 == <span class="keyword">null</span> : o1.equals(o2)))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !(e1.hasNext() || e2.hasNext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>先比较参数是否和当前List指向同一对象，再比较参数是否为List实例，然后将两个List中的元素一一对比（若List对象元素不为null，则用Object.equals方法对比，若为null则判断参数List对象中元素是否为null），最后判断长度是否相等</p>
</blockquote>
<h3 id="hasNext"><a href="#hasNext" class="headerlink" title="hasNext()"></a>hasNext()</h3><blockquote>
<p>ArrayList</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cursor != size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h3><blockquote>
<p>ArrayList</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="keyword">int</span> i = cursor;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    cursor = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><blockquote>
<p>instanceof是Java中的二元运算符，左边是对象，右边是类；当对象是右边类或子类所创建对象时，返回true；否则，返回false。</p>
</blockquote>
<ul>
<li>类的实例包含本身的实例，以及所有直接或间接子类的实例</li>
<li>instanceof左边显式声明的类型与右边操作元必须是同种类或存在继承关系，也就是说需要位于同一个继承树，否则会编译错误</li>
<li>左边的对象实例不能是基础数据类型</li>
<li>null用instanceof跟任何类型比较时都是false </li>
</ul>
<h2 id="int-hashCode"><a href="#int-hashCode" class="headerlink" title="int hashCode()"></a>int hashCode()</h2><blockquote>
<p>重写Object.equals方法时必须同样重写Object.hashCode方法 </p>
</blockquote>
<ul>
<li>如果两个对象equals相等，那么这两个对象的HashCode一定也相同</li>
<li>如果两个对象的HashCode相同，不代表两个对象就相同，只能说明这两个对象在散列存储结构中，存放于同一个位置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the hash code value for this collection.  While the</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;Collection&lt;/tt&gt; interface adds no stipulations to the general</span></span><br><span class="line"><span class="comment"> * contract for the &lt;tt&gt;Object.hashCode&lt;/tt&gt; method, programmers should</span></span><br><span class="line"><span class="comment"> * take note that any class that overrides the &lt;tt&gt;Object.equals&lt;/tt&gt;</span></span><br><span class="line"><span class="comment"> * method must also override the &lt;tt&gt;Object.hashCode&lt;/tt&gt; method in order</span></span><br><span class="line"><span class="comment"> * to satisfy the general contract for the &lt;tt&gt;Object.hashCode&lt;/tt&gt; method.</span></span><br><span class="line"><span class="comment"> * In particular, &lt;tt&gt;c1.equals(c2)&lt;/tt&gt; implies that</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;c1.hashCode()==c2.hashCode()&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the hash code value for this collection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Object#hashCode()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Object#equals(Object)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h2 id="default-Stream-stream"><a href="#default-Stream-stream" class="headerlink" title="default Stream stream()"></a>default Stream<E> stream()</h2><blockquote>
<p>返回一个不影响数据源的数据序列</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a sequential &#123;<span class="doctag">@code</span> Stream&#125; with this collection as its source.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This method should be overridden when the &#123;<span class="doctag">@link</span> #spliterator()&#125;</span></span><br><span class="line"><span class="comment"> * method cannot return a spliterator that is &#123;<span class="doctag">@code</span> IMMUTABLE&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> CONCURRENT&#125;, or &lt;em&gt;late-binding&lt;/em&gt;. (See &#123;<span class="doctag">@link</span> #spliterator()&#125;</span></span><br><span class="line"><span class="comment"> * for details.)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a sequential &#123;<span class="doctag">@code</span> Stream&#125; over the elements in this collection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@implSpec</span> The default implementation creates a sequential &#123;<span class="doctag">@code</span> Stream&#125; from the</span></span><br><span class="line"><span class="comment"> * collection's &#123;<span class="doctag">@code</span> Spliterator&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title">stream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> StreamSupport.stream(spliterator(), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>源码</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>开窗函数</title>
    <url>/2020/10/21/%E5%BC%80%E7%AA%97%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="开窗函数"><a href="#开窗函数" class="headerlink" title="开窗函数"></a>开窗函数</h1><blockquote>
<p>与聚合函数一样，开窗函数也是对行集组进行聚合计算，但是它不像普通聚合函数那样每组只返回一个值，开窗函数可以为每组返回多个值，因为开窗函数所执行聚合计算的行集组是窗口。在 ISO SQL 规定了这样的函数为开窗函数，在 Oracle 中则被称为分析函数。</p>
</blockquote>
<h2 id="PARTITION-BY"><a href="#PARTITION-BY" class="headerlink" title="PARTITION BY"></a>PARTITION BY</h2><blockquote>
<p>分组<br>开窗函数的OVER关键字后括号中的可以使用PARTITION BY 子句来定义行的分区来供进行聚合计算。与GROUP BY 子句不同，PARTITION BY 子句创建的分区是独立于结果集的，创建的分区只是供进行聚合计算的，而且不同的开窗函数所创建的分区也不互相影响。</p>
</blockquote>
<h2 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h2><blockquote>
<p>排序</p>
</blockquote>
<h2 id="聚合开窗函数"><a href="#聚合开窗函数" class="headerlink" title="聚合开窗函数"></a>聚合开窗函数</h2><blockquote>
<p>聚合函数(列) OVER (选项)，这里的选项可以是PARTITION BY子句，但不可是ORDER BY子句</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">name</span>,</span><br><span class="line">new_age,</span><br><span class="line"><span class="keyword">SUM</span>(new_age)<span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> new_age) max_age</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Account</span></span><br></pre></td></tr></table></figure>
<h2 id="排序开窗函数"><a href="#排序开窗函数" class="headerlink" title="排序开窗函数"></a>排序开窗函数</h2><blockquote>
<p>排序函数(列) OVER(选项)，这里的选项可以是ORDER BY子句，也可以是　OVER（PARTITION BY子句　ORDER BY子句），但不可以是PARTITION BY子句</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">name</span>,</span><br><span class="line">AccountNumber,</span><br><span class="line">row_number()<span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> AccountNumber <span class="keyword">ORDER</span> <span class="keyword">BY</span> AccountNumber) <span class="keyword">repeat</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Account</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SQL Server</tag>
        <tag>数据库</tag>
        <tag>SQL语法</tag>
      </tags>
  </entry>
  <entry>
    <title>成品资源报表</title>
    <url>/2020/11/18/%E6%88%90%E5%93%81%E8%B5%84%E6%BA%90%E6%8A%A5%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="从字符串中提取数字、字母、中文"><a href="#从字符串中提取数字、字母、中文" class="headerlink" title="从字符串中提取数字、字母、中文"></a>从字符串中提取数字、字母、中文</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*方法一: 一个一个找出来*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> [dbo].[Fun_GetNumPart] </span><br><span class="line">( @<span class="keyword">Str</span> <span class="keyword">NVARCHAR</span>(<span class="keyword">MAX</span>) )</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="keyword">NVARCHAR</span>(<span class="keyword">MAX</span>)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        <span class="keyword">DECLARE</span> @<span class="keyword">Start</span> <span class="built_in">INT</span>;</span><br><span class="line">        <span class="keyword">DECLARE</span> @<span class="keyword">End</span> <span class="built_in">INT</span>; </span><br><span class="line">        <span class="keyword">DECLARE</span> @Part <span class="keyword">NVARCHAR</span>(<span class="keyword">MAX</span>)</span><br><span class="line">        <span class="keyword">SET</span> @<span class="keyword">Start</span> = <span class="keyword">PATINDEX</span>(<span class="string">'%[0-9]%'</span>, @<span class="keyword">Str</span>);</span><br><span class="line">        <span class="keyword">SET</span> @<span class="keyword">End</span> = <span class="keyword">PATINDEX</span>(<span class="string">'%[0-9]%'</span>,<span class="keyword">SUBSTRING</span>(@<span class="keyword">Str</span>, @<span class="keyword">Start</span>+<span class="number">1</span>,<span class="keyword">LEN</span>(@<span class="keyword">Str</span>) - @<span class="keyword">Start</span>));</span><br><span class="line">        <span class="keyword">SET</span> @Part = <span class="keyword">SUBSTRING</span>(@<span class="keyword">Str</span>,@<span class="keyword">Start</span>,<span class="number">1</span>) </span><br><span class="line">        <span class="keyword">WHILE</span>  @<span class="keyword">End</span> &gt;<span class="number">0</span> </span><br><span class="line">        <span class="keyword">BEGIN</span> </span><br><span class="line">                <span class="keyword">SET</span> @<span class="keyword">Start</span> = @<span class="keyword">start</span>+@<span class="keyword">End</span></span><br><span class="line">                <span class="keyword">SET</span> @Part = @Part+<span class="keyword">SUBSTRING</span>(@<span class="keyword">Str</span>,@<span class="keyword">Start</span>,<span class="number">1</span>)       </span><br><span class="line">                <span class="keyword">SET</span> @<span class="keyword">End</span> = <span class="keyword">PATINDEX</span>(<span class="string">'%[0-9]%'</span>,<span class="keyword">SUBSTRING</span>(@<span class="keyword">Str</span>, @<span class="keyword">Start</span>+<span class="number">1</span>,<span class="keyword">LEN</span>(@<span class="keyword">Str</span>) - @<span class="keyword">Start</span>)); </span><br><span class="line">        <span class="keyword">END</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">RETURN</span>  @Part;</span><br><span class="line">    <span class="keyword">END</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*方法二：一个一个去掉*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> [dbo].[Fun_GetNumPart]  </span><br><span class="line">( @<span class="keyword">Str</span> <span class="keyword">NVARCHAR</span>(<span class="keyword">MAX</span>) ) </span><br><span class="line"><span class="keyword">RETURNS</span> <span class="keyword">NVARCHAR</span>(<span class="keyword">MAX</span>)   </span><br><span class="line"><span class="keyword">AS</span>   </span><br><span class="line"><span class="keyword">BEGIN</span>   </span><br><span class="line">    <span class="keyword">WHILE</span> <span class="keyword">PATINDEX</span>(<span class="string">'%[^0-9]%'</span>,@<span class="keyword">Str</span>)&gt;<span class="number">0</span>   </span><br><span class="line">    <span class="keyword">BEGIN</span>   </span><br><span class="line">        <span class="keyword">SET</span> @<span class="keyword">Str</span>=<span class="keyword">STUFF</span>(@<span class="keyword">Str</span>,<span class="keyword">PATINDEX</span>(<span class="string">'%[^0-9]%'</span>,@<span class="keyword">Str</span>),<span class="number">1</span>,<span class="string">''</span>) <span class="comment">--删掉非数字的字符</span></span><br><span class="line">    <span class="keyword">END</span>   </span><br><span class="line">    <span class="keyword">RETURN</span> @<span class="keyword">Str</span> </span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--可以通过将函数中的 ‘%[0-9]%’ 替换成 ‘%[A-Z]%’、’%[吖-做]%’，，改造成找字母、找中文的函数</span></span><br></pre></td></tr></table></figure>
<h2 id="Convert函数"><a href="#Convert函数" class="headerlink" title="Convert函数"></a>Convert函数</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CONVERT(data_type(length),data_to_be_converted,style)</span><br><span class="line">eg:</span><br><span class="line">CONVERT(int,dbo.Fun_GetNumPart(right(new_vinidname,8))) AS sort_vin,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>CRM</tag>
        <tag>成品资源</tag>
        <tag>vsReport</tag>
      </tags>
  </entry>
  <entry>
    <title>发货通知单二维码</title>
    <url>/2020/11/17/%E5%8F%91%E8%B4%A7%E9%80%9A%E7%9F%A5%E5%8D%95%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><blockquote>
<p>成品资源出库时使用的发货通知单中二维码信息增加：<br>1、产品信息(物料名称) new_contractdetail_id<br>2、合同号 (合同单号) new_contract_id<br>3、最终客户 new_finalaccount_id<br>4、运输方式 new_shiptype –单行文本<br>5、产品送达地 new_shipplace  –单行文本<br>6、交货联系人 new_contact2 –单行文本</p>
</blockquote>
<h2 id="代码位置"><a href="#代码位置" class="headerlink" title="代码位置"></a>代码位置</h2><blockquote>
<p>RekTec.Crm.Workflow.Sales.ShipmentController.CreateQRCode</p>
</blockquote>
<h2 id="OrganizationService-Retrieve"><a href="#OrganizationService-Retrieve" class="headerlink" title="OrganizationService.Retrieve"></a>OrganizationService.Retrieve</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OrganizationService.Retrieve(<span class="string">"new_ord_shipment"</span>, <span class="keyword">new</span> Guid(shipmentid), <span class="keyword">new</span> ColumnSet(<span class="keyword">new</span> string[] &#123; <span class="string">"new_name"</span> &#125;));</span><br><span class="line">Entity accountclassification = OrganizationService.Retrieve(<span class="string">"new_accountclassification"</span>, classificationId, <span class="keyword">new</span> ColumnSet(<span class="keyword">true</span>));</span><br><span class="line">columnSet: 传入字段时为字段，传入<span class="keyword">true</span>为所有字段，传入<span class="keyword">false</span>只查询主键</span><br></pre></td></tr></table></figure>

<h2 id="修改字段大小"><a href="#修改字段大小" class="headerlink" title="修改字段大小"></a>修改字段大小</h2><blockquote>
<p>自定义项字段详情中可设置字段长度</p>
</blockquote>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>CRM</tag>
        <tag>销售</tag>
        <tag>报表</tag>
      </tags>
  </entry>
  <entry>
    <title>报表翻页保留静态标题</title>
    <url>/2020/11/12/%E6%8A%A5%E8%A1%A8%E7%BF%BB%E9%A1%B5%E4%BF%9D%E7%95%99%E9%9D%99%E6%80%81%E6%A0%87%E9%A2%98/</url>
    <content><![CDATA[<ol>
<li>搜索栏搜索属性或f4打开属性面板</li>
<li>点击行组中的静态</li>
<li>将RepeatOnNewPage置为true</li>
</ol>
<p><img src="1.jpg" alt=""></p>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>CRM</tag>
        <tag>vsReport</tag>
      </tags>
  </entry>
  <entry>
    <title>rtcrm.js常用脚本库方法解析</title>
    <url>/2020/11/15/rtcrm-js%E5%B8%B8%E7%94%A8%E8%84%9A%E6%9C%AC%E5%BA%93%E6%96%B9%E6%B3%95%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***********************************************************</span></span><br><span class="line"><span class="comment">将Xrm对象下的常用的方法封装为 Rt对象，使用类似JQuery的Selector 方式访问 </span></span><br><span class="line"><span class="comment">选择器，支持如 #new_name, :section #section01 ,#tab tab01 三种的选择器</span></span><br><span class="line"><span class="comment">************************************************************/</span></span><br><span class="line"><span class="keyword">var</span> rtcrm = <span class="function"><span class="keyword">function</span> (<span class="params">selector</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_isNull</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;check if object null&lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;param name="v"&gt;&lt;/param&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;returns type=""&gt;&lt;/returns&gt;</span></span><br><span class="line">        <span class="keyword">return</span> v === <span class="literal">null</span> || v === <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_isNullOrEmpty</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;check if stirng is null or empty&lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;param name="v"&gt;&lt;/param&gt;</span></span><br><span class="line">        <span class="keyword">return</span> _isNull(v) || v === <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_gets</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;根据selector返回CRM的对象数组&lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;returns type="Array"&gt;CRM对象数组&lt;/returns&gt;</span></span><br><span class="line">        <span class="keyword">if</span> (_isNullOrEmpty(selector)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将形如 #new_name,#new_date,:tab #tab01 的selector拆分逐个判断查找</span></span><br><span class="line">        <span class="keyword">var</span> strList = selector.split(<span class="string">','</span>);</span><br><span class="line">        <span class="keyword">if</span> (_isNull(strList) || strList.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要返回的UI 对象数据，包括界面上的控件、Tab、Section三种类型</span></span><br><span class="line">        <span class="keyword">var</span> uis = [];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//逐个的Selector判断</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; strList.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> str = strList[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// # 号开头的是Id Selector</span></span><br><span class="line">            <span class="keyword">if</span> (str.charAt(<span class="number">0</span>) == <span class="string">"#"</span>) &#123;</span><br><span class="line">				<span class="comment">//去掉前缀</span></span><br><span class="line">                <span class="keyword">var</span> ui = Xrm.Page.ui.controls.get(str.substring(<span class="number">1</span>));</span><br><span class="line">                <span class="keyword">if</span> (ui) &#123;</span><br><span class="line">                    uis[uis.length] = ui;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// * 代表选择所有的界面UI控件</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str.charAt(<span class="number">0</span>) == <span class="string">"*"</span>) &#123;</span><br><span class="line">                Xrm.Page.ui.controls.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">uiA</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (uiA) &#123;</span><br><span class="line">                        uis[uis.length] = uiA;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//：好开头的代表伪类，只支持 ;tab :section两种伪类</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (str.charAt(<span class="number">0</span>) == <span class="string">":"</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> tabStrList = str.split(<span class="string">' '</span>);</span><br><span class="line">                <span class="keyword">if</span> (_isNull(tabStrList) || tabStrList.length &lt; <span class="number">2</span> || tabStrList[<span class="number">1</span>].substring(<span class="number">0</span>, <span class="number">1</span>) != <span class="string">"#"</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> tabName = tabStrList[<span class="number">1</span>].substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// :tab 伪类 selector</span></span><br><span class="line">                <span class="keyword">var</span> obj = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (tabStrList[<span class="number">0</span>] == <span class="string">":tab"</span>) &#123;</span><br><span class="line">                    obj = Xrm.Page.ui.tabs.get(tabName);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//:section 伪类 selector</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (tabStrList[<span class="number">0</span>] == <span class="string">":section"</span>) &#123;</span><br><span class="line">                    <span class="keyword">var</span> tabs = Xrm.Page.ui.tabs.get();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> tabs) &#123;</span><br><span class="line">                        obj = tabs[index].sections.get(tabName);</span><br><span class="line">                        <span class="keyword">if</span> (!_isNull(obj))</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (_isNull(obj)) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">//如果Selector内容只有2个字符串，如 :tab #tab01 ,则代表选择的是tab本身</span></span><br><span class="line">                <span class="keyword">if</span> (tabStrList.length == <span class="number">2</span>) &#123;</span><br><span class="line">                    uis[uis.length] = obj;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//如果Selector内容只有3 个字符串，如 :tab #tab01 * ,代表选择tab下的所有的 控件，第三个字符串必须是 * 号</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (tabStrList.length == <span class="number">3</span>) &#123;</span><br><span class="line">                    tabStrList[<span class="number">2</span>] == <span class="string">"*"</span> &amp;&amp; obj &amp;&amp; obj.controls &amp;&amp; obj.controls.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">uiA</span>) </span>&#123;</span><br><span class="line">                        uis[uis.length] = uiA;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_each</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;对于 选择到的所有的CRM UI元素调用 fn函数，fn函数形如： function(ui,index)&lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;param name="fn"&gt;回调函数&lt;/param&gt;</span></span><br><span class="line">        <span class="keyword">var</span> objs = _gets();</span><br><span class="line">        <span class="keyword">if</span> (_isNull(objs) || objs.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; objs.length; i++) &#123;</span><br><span class="line">            fn &amp;&amp; fn(objs[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_eachAttr</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;对于 选择到的所有的CRM attribute 调用 fn函数，fn函数形如： function(attr,index)&lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;param name="fn"&gt;回调函数&lt;/param&gt;</span></span><br><span class="line">        <span class="keyword">if</span> (_isNull(fn)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> objs = _gets();</span><br><span class="line">        <span class="keyword">if</span> (_isNull(objs) || objs.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; objs.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (objs[i] &amp;&amp; objs[i].getAttribute) &#123;</span><br><span class="line">                <span class="keyword">var</span> attr = objs[i].getAttribute();</span><br><span class="line">                fn &amp;&amp; fn(attr, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_get</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;返回selector选择到的第 i 个UI 控件，如果i 不输入，则返回第一个&lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;param name="i"&gt;字段的索引，标识第几个字段&lt;/param&gt;</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">// '&gt;'优先级大于'&amp;&amp;'大于'?:',i为undefined时,undefined&gt;0返回false,undefined&amp;&amp;false为undefined,undefined?undefined:0值为0</span></span><br><span class="line">		<span class="comment">//undefined 派生自 null，null 和 undefined 都表示空缺的值，转化为布尔值时都是假值，可以相等</span></span><br><span class="line">		<span class="comment">//null 和 undefined 属于两种不同类型，使用全等运算符（==）或 typeof 运算符可以进行检测</span></span><br><span class="line">		<span class="comment">//检测一个变量是否初始化，可以使用 、undefined或typeof快速检测 eg：(a == undefined) &amp;&amp; (a = 0);(typeof a == "undefined") &amp;&amp; (a = 0);</span></span><br><span class="line">        <span class="keyword">var</span> index = i &amp;&amp; i &gt; <span class="number">0</span> ? i : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> objs = _gets();</span><br><span class="line">		<span class="comment">//若为只传一个页面字段的情况下,如rtcrm(#new_name),则此时objs中只有一个boj为"Xrm.Page.ui.controls.get('new_name');",obj.length&gt;index为true,objs&amp;&amp;1为1,1&amp;&amp;true为true</span></span><br><span class="line">		<span class="comment">//则表达式结果为objs[0]</span></span><br><span class="line">        <span class="keyword">return</span> objs &amp;&amp; objs.length &amp;&amp; objs.length &gt; index ? objs[index] : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_getAttr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">///	&lt;summary&gt;返回selector选择到的第 1 个attribute &lt;/summary&gt;</span></span><br><span class="line">        <span class="keyword">var</span> obj = _get();</span><br><span class="line">        <span class="keyword">return</span> obj &amp;&amp; obj.getAttribute ? obj.getAttribute() : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_val</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="comment">///	&lt;summary&gt;获取字段的值，或者设定字段的值&lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">///	&lt;param name="v" type="Object"&gt;如果v==undifined，则为获取字段的值，否则为设定字段的值&lt;/param&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> attr = _getAttr();</span><br><span class="line">        <span class="keyword">if</span> (_isNull(attr)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (v === <span class="literal">undefined</span>)</span><br><span class="line">            <span class="keyword">return</span> attr.getValue ? attr.getValue() : <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> attr.setValue ? attr.setValue(v) : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_text</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;获取CRM的字段的文本表示&lt;/summary&gt;</span></span><br><span class="line">        <span class="keyword">var</span> attr = _getAttr();</span><br><span class="line">        <span class="keyword">return</span> attr &amp;&amp; attr.getText ? attr.getText() : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_req</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;获取或设定字段的Requie Level，none、&lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;param name="v"&gt;none，required，recommended&lt;/param&gt;</span></span><br><span class="line">        <span class="keyword">if</span> (_isNullOrEmpty(v)) &#123;</span><br><span class="line">            <span class="keyword">var</span> attr = _getAttr();</span><br><span class="line">            <span class="keyword">return</span> attr &amp;&amp; attr.getRequiredLevel ? attr.getRequiredLevel() : <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            _eachAttr(<span class="function"><span class="keyword">function</span> (<span class="params">attribute</span>) </span>&#123;</span><br><span class="line">                attribute &amp;&amp; attribute.setRequiredLevel &amp;&amp; attribute.setRequiredLevel(v);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_length</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;返回选择器选择到的UI控件的个数&lt;/summary&gt;</span></span><br><span class="line">        <span class="keyword">var</span> objs = _gets();</span><br><span class="line">        <span class="keyword">if</span> (_isNull(objs)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> objs.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_attrType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;字段的属性类别&lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;returns type="String"&gt;&lt;/returns&gt;</span></span><br><span class="line">        <span class="keyword">var</span> attr = _getAttr();</span><br><span class="line">        <span class="keyword">return</span> attr &amp;&amp; attr.getAttributeType ? attr.getAttributeType() : <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_fire</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;调用字段的 fireOnChange&lt;/summary&gt;</span></span><br><span class="line">        <span class="keyword">var</span> attr = _getAttr();</span><br><span class="line">        attr &amp;&amp; attr.fireOnChange &amp;&amp; attr.fireOnChange();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_isDirty</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;检查界面上的字段的值是否发生改变了&lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;returns type="Boolean"&gt;&lt;/returns&gt;</span></span><br><span class="line">        <span class="keyword">var</span> attr = _getAttr();</span><br><span class="line">        <span class="keyword">return</span> attr &amp;&amp; attr.getIsDirty ? attr.getIsDirty() : Xrm.Page.data.entity.getIsDirty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_submitMode</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;设定或者获取属性的SubmitMode&lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;param name="v"&gt;&lt;/param&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;returns type=""&gt;&lt;/returns&gt;</span></span><br><span class="line">        <span class="keyword">if</span> (_isNullOrEmpty(v)) &#123;</span><br><span class="line">            <span class="keyword">var</span> attr = _getAttr();</span><br><span class="line">            <span class="keyword">return</span> attr &amp;&amp; attr.getSubmitMode ? attr.getSubmitMode() : <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            _eachAttr(<span class="function"><span class="keyword">function</span> (<span class="params">attribute</span>) </span>&#123;</span><br><span class="line">                attribute &amp;&amp; attribute.setSubmitMode &amp;&amp; attribute.setSubmitMode(v);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_disabled</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;设定或获取UI控件是否禁用&lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;param name="v"&gt;&lt;/param&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;returns type=""&gt;&lt;/returns&gt;</span></span><br><span class="line">        <span class="keyword">if</span> (_isNull(v)) &#123;</span><br><span class="line">            <span class="keyword">var</span> obj = _get();</span><br><span class="line">            <span class="keyword">return</span> obj &amp;&amp; obj.getDisabled ? obj.getDisabled() : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            _each(<span class="function"><span class="keyword">function</span> (<span class="params">ui</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> controlType = ui.getControlType();</span><br><span class="line">                <span class="keyword">if</span> (controlType != <span class="string">"iframe"</span> &amp;&amp; controlType != <span class="string">"webresource"</span> &amp;&amp; controlType != <span class="string">"subgrid"</span> &amp;&amp; controlType != <span class="string">"searchwidget"</span> &amp;&amp; controlType != <span class="string">"kbsearch"</span>)</span><br><span class="line">                    ui &amp;&amp; ui.setDisabled &amp;&amp; ui.setDisabled(v);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_visible</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;设定或获取UI控件是否可视&lt;/summary&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;param name="v"&gt;&lt;/param&gt;</span></span><br><span class="line">        <span class="comment">/// &lt;returns type=""&gt;&lt;/returns&gt;</span></span><br><span class="line">        <span class="keyword">if</span> (_isNull(v)) &#123;</span><br><span class="line">            <span class="keyword">var</span> obj = _get();</span><br><span class="line">            <span class="keyword">return</span> obj &amp;&amp; obj.getVisible ? obj.getVisible() : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            _each(<span class="function"><span class="keyword">function</span> (<span class="params">ui</span>) </span>&#123;</span><br><span class="line">                ui &amp;&amp; ui.setVisible &amp;&amp; ui.setVisible(v);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_hide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">        <span class="comment">/// 隐藏界面UI控件</span></span><br><span class="line">        <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">        _visible(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">        <span class="comment">///显示字段或其他的UI控件</span></span><br><span class="line">        <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">        _visible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_focus</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">        <span class="comment">///设定控件获取输入焦点</span></span><br><span class="line">        <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">        <span class="keyword">var</span> obj = _get();</span><br><span class="line">        obj &amp;&amp; obj.setFocus &amp;&amp; obj.setFocus();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="keyword">get</span>: _get,</span><br><span class="line">        getAttr: _getAttr,</span><br><span class="line">        val: _val,</span><br><span class="line">        text: _text,</span><br><span class="line">        req: _req,</span><br><span class="line">        focus: _focus,</span><br><span class="line">        each: _each,</span><br><span class="line">        eachAttr: _eachAttr,</span><br><span class="line">        length: _length,</span><br><span class="line">        attrType: _attrType,</span><br><span class="line">        fire: _fire,</span><br><span class="line">        isDirty: _isDirty,</span><br><span class="line">        submitMode: _submitMode,</span><br><span class="line">        disabled: _disabled,</span><br><span class="line">        visible: _visible,</span><br><span class="line">        hide: _hide,</span><br><span class="line">        show: _show</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><h2 id="val"><a href="#val" class="headerlink" title="val()"></a>val()</h2><blockquote>
<p>rtcrm(“#new_name”).val();<br>获取new_name字段的值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找到表单上一个对象,_gets()、_get()方法</span></span><br><span class="line">Xrm.Page.ui.controls.get(<span class="string">"new_account_id"</span>);</span><br><span class="line"><span class="comment">//获取属性,_getAttr()方法</span></span><br><span class="line">Xrm.Page.ui.controls.get(<span class="string">"new_account_id"</span>).getAttribute();</span><br><span class="line"><span class="comment">//获取值,_val(v)方法</span></span><br><span class="line">Xrm.Page.ui.controls.get(<span class="string">"new_account_id"</span>).getAttribute().getValue();</span><br></pre></td></tr></table></figure>

<blockquote>
<p>便捷的写法</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接获取字段</span></span><br><span class="line">Xrm.Page.getAttribute(<span class="string">"new_account_id"</span>).getValue()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>CRM</tag>
        <tag>瑞泰框架</tag>
        <tag>rtcrm.js</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库JOIN</title>
    <url>/2020/10/21/%E6%95%B0%E6%8D%AE%E5%BA%93JOIN/</url>
    <content><![CDATA[<h1 id="JOIN关键字"><a href="#JOIN关键字" class="headerlink" title="JOIN关键字"></a>JOIN关键字</h1><pre><code class="sql"><span class="keyword">SELECT</span> <span class="keyword">column</span>
<span class="keyword">FROM</span> join_table
JOIN_TYPE join_table
<span class="keyword">ON</span> (join_condition)</code></pre>
<ol>
<li>join_table指参与连接操作的表名</li>
<li>column指查询的列</li>
<li>JOIN_TYPE 指连接类型 </li>
</ol>
<h1 id="INNER-JOIN，内连接（等同连接）"><a href="#INNER-JOIN，内连接（等同连接）" class="headerlink" title="INNER JOIN，内连接（等同连接）"></a>INNER JOIN，内连接（等同连接）</h1><blockquote>
<p><strong>返回结果集只返回满足ON字句中的搜索条件的数据，不满足则不显示。默认情况下，DBMS会将JOIN也认定为INNER JOIN</strong></p>
</blockquote>
<p><strong>表R</strong> </p>
<table>
<thead>
<tr>
<th align="left">A</th>
<th align="left">B</th>
<th align="left">C</th>
</tr>
</thead>
<tbody><tr>
<td align="left">a1</td>
<td align="left">b1</td>
<td align="left">c1</td>
</tr>
<tr>
<td align="left">a2</td>
<td align="left">b2</td>
<td align="left">c2</td>
</tr>
<tr>
<td align="left">a3</td>
<td align="left">b3</td>
<td align="left">c3</td>
</tr>
</tbody></table>
<p><strong>表S</strong> </p>
<table>
<thead>
<tr>
<th align="left">C</th>
<th align="left">D</th>
</tr>
</thead>
<tbody><tr>
<td align="left">c1</td>
<td align="left">d1</td>
</tr>
<tr>
<td align="left">c2</td>
<td align="left">d2</td>
</tr>
<tr>
<td align="left">c4</td>
<td align="left">d3</td>
</tr>
</tbody></table>
<p><strong>执行R INNER JOIN S ON R.C = S.C</strong></p>
<table>
<thead>
<tr>
<th align="left">A</th>
<th align="left">B</th>
<th align="left">C</th>
<th align="left">C</th>
<th align="left">D</th>
</tr>
</thead>
<tbody><tr>
<td align="left">a1</td>
<td align="left">b1</td>
<td align="left">c1</td>
<td align="left">c1</td>
<td align="left">d1</td>
</tr>
<tr>
<td align="left">a2</td>
<td align="left">b2</td>
<td align="left">c2</td>
<td align="left">c2</td>
<td align="left">d2</td>
</tr>
</tbody></table>
<p> <img src="1.jpg" alt="交集。"></p>
<h1 id="OUTER-JOIN，外连接"><a href="#OUTER-JOIN，外连接" class="headerlink" title="OUTER JOIN，外连接"></a>OUTER JOIN，外连接</h1><h2 id="LEFT-OUTER-JOIN-LEFT-JOIN-，左外连接"><a href="#LEFT-OUTER-JOIN-LEFT-JOIN-，左外连接" class="headerlink" title="LEFT OUTER JOIN(LEFT JOIN)，左外连接"></a>LEFT OUTER JOIN(LEFT JOIN)，左外连接</h2><blockquote>
<p><strong>结果集返回匹配行加上左表的不匹配行</strong> </p>
</blockquote>
<p><strong>表R</strong> </p>
<table>
<thead>
<tr>
<th align="left">A</th>
<th align="left">B</th>
<th align="left">C</th>
</tr>
</thead>
<tbody><tr>
<td align="left">a1</td>
<td align="left">b1</td>
<td align="left">c1</td>
</tr>
<tr>
<td align="left">a2</td>
<td align="left">b2</td>
<td align="left">c2</td>
</tr>
<tr>
<td align="left">a3</td>
<td align="left">b3</td>
<td align="left">c3</td>
</tr>
</tbody></table>
<p><strong>表S</strong> </p>
<table>
<thead>
<tr>
<th align="left">C</th>
<th align="left">D</th>
</tr>
</thead>
<tbody><tr>
<td align="left">c1</td>
<td align="left">d1</td>
</tr>
<tr>
<td align="left">c2</td>
<td align="left">d2</td>
</tr>
<tr>
<td align="left">c4</td>
<td align="left">d3</td>
</tr>
</tbody></table>
<p><strong>执行R LEFT JOIN S ON R.C = S.C</strong></p>
<table>
<thead>
<tr>
<th align="left">A</th>
<th align="left">B</th>
<th align="left">C</th>
<th align="left">C</th>
<th align="left">D</th>
</tr>
</thead>
<tbody><tr>
<td align="left">a1</td>
<td align="left">b1</td>
<td align="left">c1</td>
<td align="left">c1</td>
<td align="left">d1</td>
</tr>
<tr>
<td align="left">a2</td>
<td align="left">b2</td>
<td align="left">c2</td>
<td align="left">c2</td>
<td align="left">d2</td>
</tr>
<tr>
<td align="left">a3</td>
<td align="left">b3</td>
<td align="left">c3</td>
<td align="left">null</td>
<td align="left">null</td>
</tr>
</tbody></table>
<p><img src="4.jpg" alt="LEFT JOIN产生表1的完全集，而2表中匹配的则有值，没有匹配的则以null值取代。"></p>
<h2 id="RIGHT-OUTER-JOIN-RIGHT-JOIN-，右外连接"><a href="#RIGHT-OUTER-JOIN-RIGHT-JOIN-，右外连接" class="headerlink" title="RIGHT OUTER JOIN(RIGHT JOIN)，右外连接"></a>RIGHT OUTER JOIN(RIGHT JOIN)，右外连接</h2><blockquote>
<p><strong>结果集返回匹配行加上右表的不匹配行</strong></p>
</blockquote>
<p><strong>表R</strong> </p>
<table>
<thead>
<tr>
<th align="left">A</th>
<th align="left">B</th>
<th align="left">C</th>
</tr>
</thead>
<tbody><tr>
<td align="left">a1</td>
<td align="left">b1</td>
<td align="left">c1</td>
</tr>
<tr>
<td align="left">a2</td>
<td align="left">b2</td>
<td align="left">c2</td>
</tr>
<tr>
<td align="left">a3</td>
<td align="left">b3</td>
<td align="left">c3</td>
</tr>
</tbody></table>
<p><strong>表S</strong> </p>
<table>
<thead>
<tr>
<th align="left">C</th>
<th align="left">D</th>
</tr>
</thead>
<tbody><tr>
<td align="left">c1</td>
<td align="left">d1</td>
</tr>
<tr>
<td align="left">c2</td>
<td align="left">d2</td>
</tr>
<tr>
<td align="left">c4</td>
<td align="left">d3</td>
</tr>
</tbody></table>
<p><strong>执行R RIGHT JOIN S ON R.C = S.C</strong></p>
<table>
<thead>
<tr>
<th align="left">A</th>
<th align="left">B</th>
<th align="left">C</th>
<th align="left">C</th>
<th align="left">D</th>
</tr>
</thead>
<tbody><tr>
<td align="left">a1</td>
<td align="left">b1</td>
<td align="left">c1</td>
<td align="left">c1</td>
<td align="left">d1</td>
</tr>
<tr>
<td align="left">a2</td>
<td align="left">b2</td>
<td align="left">c2</td>
<td align="left">c2</td>
<td align="left">d2</td>
</tr>
<tr>
<td align="left">null</td>
<td align="left">null</td>
<td align="left">null</td>
<td align="left">c4</td>
<td align="left">d3</td>
</tr>
</tbody></table>
<p><img src="2.jpg" alt="RIGHT JOIN产生表2的完全集，而1表中匹配的则有值，没有匹配的则以null值取代。"></p>
<h2 id="FULL-OUTER-JOIN，全外连接"><a href="#FULL-OUTER-JOIN，全外连接" class="headerlink" title="FULL OUTER JOIN，全外连接"></a>FULL OUTER JOIN，全外连接</h2><blockquote>
<p><strong>结果集返回匹配行和左右表的不匹配行</strong> </p>
</blockquote>
<p><strong>表R</strong> </p>
<table>
<thead>
<tr>
<th align="left">A</th>
<th align="left">B</th>
<th align="left">C</th>
</tr>
</thead>
<tbody><tr>
<td align="left">a1</td>
<td align="left">b1</td>
<td align="left">c1</td>
</tr>
<tr>
<td align="left">a2</td>
<td align="left">b2</td>
<td align="left">c2</td>
</tr>
<tr>
<td align="left">a3</td>
<td align="left">b3</td>
<td align="left">c3</td>
</tr>
</tbody></table>
<p><strong>表S</strong> </p>
<table>
<thead>
<tr>
<th align="left">C</th>
<th align="left">D</th>
</tr>
</thead>
<tbody><tr>
<td align="left">c1</td>
<td align="left">d1</td>
</tr>
<tr>
<td align="left">c2</td>
<td align="left">d2</td>
</tr>
<tr>
<td align="left">c4</td>
<td align="left">d3</td>
</tr>
</tbody></table>
<p><strong>执行R FULL JOIN S ON R.C = S.C</strong></p>
<table>
<thead>
<tr>
<th align="left">A</th>
<th align="left">B</th>
<th align="left">C</th>
<th align="left">C</th>
<th align="left">D</th>
</tr>
</thead>
<tbody><tr>
<td align="left">a1</td>
<td align="left">b1</td>
<td align="left">c1</td>
<td align="left">c1</td>
<td align="left">d1</td>
</tr>
<tr>
<td align="left">a2</td>
<td align="left">b2</td>
<td align="left">c2</td>
<td align="left">c2</td>
<td align="left">d2</td>
</tr>
<tr>
<td align="left">a3</td>
<td align="left">b3</td>
<td align="left">c3</td>
<td align="left">null</td>
<td align="left">null</td>
</tr>
<tr>
<td align="left">null</td>
<td align="left">null</td>
<td align="left">null</td>
<td align="left">c4</td>
<td align="left">d3</td>
</tr>
</tbody></table>
<p><img src="3.jpg" alt="FULL OUTER JOIN产生1和2的并集。但是需要注意的是，对于没有匹配的记录，则会以null做为值。"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>SQL语法</tag>
      </tags>
  </entry>
  <entry>
    <title>简单代码演示控制反转IOC和依赖注入DI</title>
    <url>/2020/04/26/%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%A8%E4%BB%A3%E7%A0%81%E7%90%86%E8%A7%A3%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%ACIOC%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5DI/</url>
    <content><![CDATA[<h1 id="ioc（Inversion-of-Control）"><a href="#ioc（Inversion-of-Control）" class="headerlink" title="ioc（Inversion of Control）"></a>ioc（Inversion of Control）</h1><blockquote>
<p>控制反转，也可以称为依赖倒置，即当A要调用B时，A无需主动获取，会有人主动把B送过来供A使用，以减少在A的代码中存在B，导致模块间的高度耦合。</p>
</blockquote>
<h2 id="正常的代码控制流程"><a href="#正常的代码控制流程" class="headerlink" title="正常的代码控制流程"></a>正常的代码控制流程</h2><p>1.创建一个接口Car</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.定义两种车实现接口car</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"benz go......"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BMW</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"bmw go......"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.人要开车</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Car car=<span class="keyword">new</span> Benz();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">DriveCar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"begin drive"</span>);</span><br><span class="line">    car.go();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>这种方式是我们常见的代码控制流程，人想要开车，需要自己实例化，且这个人只能开一种车。</li>
<li>如何让他可以想开什么车就开什么车呢？<blockquote>
<p>通过依赖注入</p>
</blockquote>
</li>
</ul>
<h2 id="依赖注入的方式DI（Dependency-Injection）"><a href="#依赖注入的方式DI（Dependency-Injection）" class="headerlink" title="依赖注入的方式DI（Dependency Injection）"></a>依赖注入的方式DI（Dependency Injection）</h2><ul>
<li>依赖注入是实现控制反转的方式之一。</li>
<li>看一下修改后的person类  </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  Car car=<span class="keyword">null</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Car car)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.car=car;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">driveCar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"begin drive"</span>);</span><br><span class="line">    car.go();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>现在的Person类已经不自己实例化车的对象了，而是通过构造函数来获得车的对象，所以，这个类就可以开各种车了，只要这个车实现了Car接口就可以。看一下如何使用Person类</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Person person=<span class="keyword">new</span> Person(<span class="keyword">new</span> Benz());</span><br><span class="line">  person.driveCar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>现在的Person类可以开不止一种车，只要你通过构造函数传递进来。在这个例子中，Car对象就是Person类的依赖，当我们实例化Person类时，将一个Car的实例传递给Person类，就是依赖注入，我们的Person类从而实现了控制反转。<br>控制反转到底反转了什么？有种说法是这样的：所谓控制反转，反转的是获取对象依赖的过程。控制权反转后，获取依赖对象的过程由自身管理变为由IOC容器注入。</p>
</blockquote>
<h2 id="Spring实现依赖注入的方式"><a href="#Spring实现依赖注入的方式" class="headerlink" title="Spring实现依赖注入的方式"></a>Spring实现依赖注入的方式</h2><blockquote>
<p>在上面的这行代码中Person p=new Person(new Benz());，我们通过手动的方式new了一个Benz()的对象，然后将其注入到Person类中。而Spring不这么干，因为Spring觉得，你这行代码实例化了一个具体的Benz类，如果你以后想要在这里实例化一个BMW类的话，岂不是要修改代码？那我干脆写到配置文件里好了，即便你将来要该注意，至少不需要修改代码，于是就有了下面的配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.XXX.Benz"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.XXX.Person"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"car"</span> <span class="attr">ref</span>=<span class="string">"car"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>从配置文件中获取Person类的对象时，car对象会被自动装配进来，而person对象不需要关心到底是哪个具体的类被传递进来了。所以，Spring作为一个IOC框架主要做了两步：创建对象和组装对象之间的关系。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>聚合函数</title>
    <url>/2020/10/29/%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h1><blockquote>
<p>聚合函数是对列中的一系列数据进行处理，返回单个统计值</p>
</blockquote>
<h2 id="SUM"><a href="#SUM" class="headerlink" title="SUM()"></a>SUM()</h2><blockquote>
<p>获取单个列的合计值</p>
</blockquote>
<h2 id="MAX"><a href="#MAX" class="headerlink" title="MAX()"></a>MAX()</h2><blockquote>
<p>计算列的最大值</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">Name</span>,</span><br><span class="line">new_age</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line"><span class="keyword">Account</span></span><br><span class="line"><span class="keyword">WHERE</span> new_age = (<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(new_age) <span class="keyword">FROM</span> <span class="keyword">Account</span>)</span><br></pre></td></tr></table></figure>
<h2 id="MIN"><a href="#MIN" class="headerlink" title="MIN()"></a>MIN()</h2><blockquote>
<p>计算列的最小值</p>
</blockquote>
<h2 id="AVG"><a href="#AVG" class="headerlink" title="AVG()"></a>AVG()</h2><blockquote>
<p>计算某个列的平均值,忽略NULL值</p>
</blockquote>
<h2 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT()"></a>COUNT()</h2><blockquote>
<p>统计行数量<br>COUNT(*)计算表中的总行数（包括null）<br>COUNT(column)计算column列的行数（不计算null行）</p>
</blockquote>
<h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h2><blockquote>
<p>根据字句后缀的列对数据进行分组(null值为一组)</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex+<span class="string">'教师'</span> <span class="keyword">AS</span> teacher,<span class="keyword">AVG</span>(age) <span class="keyword">AS</span> avg_age</span><br><span class="line"><span class="keyword">FROM</span> t_teacher</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sex</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ROLLUP</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex+<span class="string">'教师'</span> <span class="keyword">AS</span> teacher,<span class="keyword">AVG</span>(age) <span class="keyword">AS</span> avg_age</span><br><span class="line"><span class="keyword">FROM</span> t_teacher</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="keyword">with</span> <span class="keyword">ROLLUP</span></span><br></pre></td></tr></table></figure>
<h2 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h2><blockquote>
<p>对group by分组后进行筛选</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sex+<span class="string">'教师'</span> <span class="keyword">AS</span> teacher,<span class="keyword">COUNT</span>(*) <span class="keyword">AS</span> num_teacher</span><br><span class="line"><span class="keyword">FROM</span> t_teacher</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> teacher</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;=<span class="number">2</span></span><br><span class="line"><span class="comment">--显示男女教师分组中人数大于2的</span></span><br></pre></td></tr></table></figure>
<h2 id="重复值处理-DISTINCT"><a href="#重复值处理-DISTINCT" class="headerlink" title="重复值处理 DISTINCT"></a>重复值处理 DISTINCT</h2><blockquote>
<p>在聚合函数中，默认为ALL关键字，即不论是否有重复值，对所有数据进行处理<br>使用DISTINCT关键字后，则会进行非重值处理，即每个重复的值只取一次参与计算</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="keyword">Name</span>,</span><br><span class="line">new_age</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line"><span class="keyword">Account</span></span><br><span class="line"><span class="keyword">WHERE</span> new_age = (<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(<span class="keyword">DISTINCT</span> new_age) <span class="keyword">FROM</span> <span class="keyword">Account</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>SQL语法</tag>
      </tags>
  </entry>
  <entry>
    <title>钉钉数据对接说明</title>
    <url>/2020/09/30/%E9%92%89%E9%92%89%E6%95%B0%E6%8D%AE%E5%AF%B9%E6%8E%A5%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<h1 id="API调用说明"><a href="#API调用说明" class="headerlink" title="API调用说明"></a>API调用说明</h1><blockquote>
<p>钉钉服务端api文档 <a href="https://ding-doc.dingtalk.com/doc#/serverapi2/gh60vz" target="_blank" rel="noopener">https://ding-doc.dingtalk.com/doc#/serverapi2/gh60vz</a><br>钉钉api调试工具 <a href="https://open-dev.dingtalk.com/apiExplorer#/?devType=org&amp;api=/get_jsapi_ticket" target="_blank" rel="noopener">https://open-dev.dingtalk.com/apiExplorer#/?devType=org&amp;api=/get_jsapi_ticket</a></p>
</blockquote>
<h2 id="部门"><a href="#部门" class="headerlink" title="部门"></a>部门</h2><h3 id="获取部门信息"><a href="#获取部门信息" class="headerlink" title="获取部门信息"></a>获取部门信息</h3><ol>
<li>获取部门ID列表<blockquote>
<p><a href="https://oapi.dingtalk.com/department/list?access_token=ACCESS_TOKEN" target="_blank" rel="noopener">https://oapi.dingtalk.com/department/list?access_token=ACCESS_TOKEN</a></p>
</blockquote>
</li>
<li>根据部门ID获取部门详情<blockquote>
<p><a href="https://oapi.dingtalk.com/department/get?access_token=ACCESS_TOKEN&amp;id=123" target="_blank" rel="noopener">https://oapi.dingtalk.com/department/get?access_token=ACCESS_TOKEN&amp;id=123</a></p>
</blockquote>
</li>
</ol>
<h4 id="关键字段说明"><a href="#关键字段说明" class="headerlink" title="关键字段说明"></a>关键字段说明</h4><ol>
<li>department_id <blockquote>
<p>部门id</p>
</blockquote>
</li>
<li>department_name <blockquote>
<p>部门名称</p>
</blockquote>
</li>
<li>department_parent_id <blockquote>
<p>父部门id，根部门为1</p>
</blockquote>
</li>
<li>department_status <blockquote>
<p>部门状态：(空值表示正常) 、CHANGED(改动过)、DELETED(部门取消)</p>
</blockquote>
</li>
</ol>
<h3 id="部门表"><a href="#部门表" class="headerlink" title="部门表"></a>部门表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ding_department (</span><br><span class="line">  department_id <span class="built_in">VARCHAR</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  department_name <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  department_parent_id <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  department_status <span class="built_in">VARCHAR</span>(<span class="number">64</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (department_id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_department.department_id <span class="keyword">IS</span> <span class="string">'部门id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_department.department_name <span class="keyword">IS</span> <span class="string">'部门名称'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_department.department_parent_id <span class="keyword">IS</span> <span class="string">'上级部门id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_department.department_status <span class="keyword">IS</span> <span class="string">'可用状态'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="员工"><a href="#员工" class="headerlink" title="员工"></a>员工</h2><h3 id="员工信息"><a href="#员工信息" class="headerlink" title="员工信息"></a>员工信息</h3><ol>
<li>获取员工ID列表<blockquote>
<p><a href="https://oapi.dingtalk.com/topapi/smartwork/hrm/employee/queryonjob?access_token=ACCESS_TOKEN" target="_blank" rel="noopener">https://oapi.dingtalk.com/topapi/smartwork/hrm/employee/queryonjob?access_token=ACCESS_TOKEN</a><br>参数说明:<a href="https://ding-doc.dingtalk.com/doc#/serverapi2/rafx8t" target="_blank" rel="noopener">https://ding-doc.dingtalk.com/doc#/serverapi2/rafx8t</a></p>
</blockquote>
</li>
<li>根据ID获得员工信息<blockquote>
<p><a href="https://oapi.dingtalk.com/user/get?access_token=ACCESS_TOKEN&amp;userid=zhangsan" target="_blank" rel="noopener">https://oapi.dingtalk.com/user/get?access_token=ACCESS_TOKEN&amp;userid=zhangsan</a></p>
</blockquote>
</li>
</ol>
<h4 id="关键字段说明-1"><a href="#关键字段说明-1" class="headerlink" title="关键字段说明"></a>关键字段说明</h4><ol>
<li>employee_department_ids<blockquote>
<p>用户所在部门id列表，注意，是列表。</p>
</blockquote>
</li>
<li>employee_identity_card<blockquote>
<p>身份证号</p>
</blockquote>
</li>
<li>employee_status<blockquote>
<p>员工状态：可用，禁用</p>
</blockquote>
</li>
</ol>
<h3 id="员工表"><a href="#员工表" class="headerlink" title="员工表"></a>员工表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ding_employee (</span><br><span class="line">  employee_union_id <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  employee_name <span class="built_in">VARCHAR</span>(<span class="number">64</span>),</span><br><span class="line">  employee_department_ids <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  employee_identity_card <span class="built_in">VARCHAR2</span>(<span class="number">64</span>),</span><br><span class="line">  employee_status <span class="built_in">VARCHAR2</span>(<span class="number">64</span>),</span><br><span class="line">  employee_user_id <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (employee_union_id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_employee.employee_union_id <span class="keyword">IS</span> <span class="string">'员工unionid'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_employee.employee_name <span class="keyword">IS</span> <span class="string">'员工姓名'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_employee.employee_department_ids <span class="keyword">IS</span> <span class="string">'员工部门名称'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_employee.employee_identity_card <span class="keyword">IS</span> <span class="string">'员工身份证号码'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_employee.employee_status <span class="keyword">IS</span> <span class="string">'员工状态：可用，禁用'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_employee.employee_user_id <span class="keyword">IS</span> <span class="string">'员工id'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><ol>
<li>获取流程模板process_code<blockquote>
<p>process_code流程模板唯一标识，可在OA管理后台编辑审批表单部分的url中获取<br><img src="1.jpg" alt=""><br><img src="2.jpg" alt=""><br><img src="3.jpg" alt=""></p>
</blockquote>
</li>
<li>根据process_code批量获取据当前时间120天之内的任意时间段审批实例ID列表<blockquote>
<p><a href="https://ding-doc.dingtalk.com/doc#/serverapi2/hh8lx5" target="_blank" rel="noopener">https://ding-doc.dingtalk.com/doc#/serverapi2/hh8lx5</a></p>
</blockquote>
</li>
<li>根据审批实例id获取审批实例详情<blockquote>
<p><a href="https://ding-doc.dingtalk.com/doc#/serverapi2/xgqkvx" target="_blank" rel="noopener">https://ding-doc.dingtalk.com/doc#/serverapi2/xgqkvx</a> </p>
</blockquote>
</li>
</ol>
<h3 id="关键字段说明-2"><a href="#关键字段说明-2" class="headerlink" title="关键字段说明"></a>关键字段说明</h3><ol>
<li>business_id<blockquote>
<p>审批实例业务编号 一条审批流虽然会因为更新或撤销等操作新建审批流实例，但business_id仍保留一致</p>
</blockquote>
</li>
<li>Attached_process_instance_ids<blockquote>
<p>审批附属实例列表，当已经通过的审批实例被修改或重置，会生成一个新的实例，作为继承审批实例的附属。如果想知道当前已经通过的审批实例的状态，可以依次遍历它的附属列表，查询里面每个实例的biz_action</p>
</blockquote>
</li>
<li>biz biz_action<blockquote>
<p>审批实例业务动作，MODIFY表示该审批实例是基于原来的实例修改而来的，REVOKE表示该审批实例对原来的实例进行撤销，NONE表示正常发起</p>
</blockquote>
</li>
<li>form_component_values<blockquote>
<p>表单详情列表,流程中表单数据的集合</p>
</blockquote>
</li>
<li>status<blockquote>
<p>审批状态，分为NEW（新创造）RUNNING（运行中）终止（被终止）完成（完成）</p>
</blockquote>
</li>
</ol>
<h3 id="重型员工请假流程表"><a href="#重型员工请假流程表" class="headerlink" title="重型员工请假流程表"></a>重型员工请假流程表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ding_leave_approval (</span><br><span class="line">  leave_id <span class="built_in">NUMBER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  leave_employee_user_id <span class="built_in">NUMBER</span>,</span><br><span class="line">  leave_start <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_end <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_duration <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_type <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_reason <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_title <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_result <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_status <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_business_id <span class="built_in">NUMBER</span>,</span><br><span class="line">  leave_attached_ids <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  leave_biz_action <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (leave_id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_id <span class="keyword">IS</span> <span class="string">'请假id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_employee_user_id <span class="keyword">IS</span> <span class="string">'请假职员id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_start <span class="keyword">IS</span> <span class="string">'请假开始时间'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_end <span class="keyword">IS</span> <span class="string">'请假结束时间'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_duration <span class="keyword">IS</span> <span class="string">'请假时长'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_type <span class="keyword">IS</span> <span class="string">'请假类型'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_reason <span class="keyword">IS</span> <span class="string">'请假原因'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_title <span class="keyword">IS</span> <span class="string">'标题'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_result <span class="keyword">IS</span> <span class="string">'结果'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_status <span class="keyword">IS</span> <span class="string">'状态'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_business_id <span class="keyword">IS</span> <span class="string">'业务流程id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_attached_ids <span class="keyword">IS</span> <span class="string">'附属流程id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_leave_approval.leave_biz_action <span class="keyword">IS</span> <span class="string">'审批实例业务动作'</span>;</span><br></pre></td></tr></table></figure>

<h2 id="考勤"><a href="#考勤" class="headerlink" title="考勤"></a>考勤</h2><ol>
<li>根据用户ID列表获取180天内的考勤结果，一次最多50条<blockquote>
<p><a href="https://oapi.dingtalk.com/attendance/list?access_token=ACCESS_TOKEN" target="_blank" rel="noopener">https://oapi.dingtalk.com/attendance/list?access_token=ACCESS_TOKEN</a></p>
</blockquote>
</li>
<li>参数说明:<blockquote>
<p><a href="https://ding-doc.dingtalk.com/doc#/serverapi2/ul33mm" target="_blank" rel="noopener">https://ding-doc.dingtalk.com/doc#/serverapi2/ul33mm</a></p>
</blockquote>
</li>
</ol>
<h3 id="关键字段说明-3"><a href="#关键字段说明-3" class="headerlink" title="关键字段说明"></a>关键字段说明</h3><ol>
<li>base_check_time<blockquote>
<p>打卡基准时间</p>
</blockquote>
</li>
<li>user_check_time<blockquote>
<p>员工实际打卡时间</p>
</blockquote>
</li>
<li>check_type<blockquote>
<p>打卡类型-上下班</p>
</blockquote>
</li>
<li>time_result<blockquote>
<p>打卡的时间结果</p>
</blockquote>
</li>
<li>locationResult<blockquote>
<p>位置结果(范围外/范围内)</p>
</blockquote>
</li>
</ol>
<h3 id="考勤表"><a href="#考勤表" class="headerlink" title="考勤表"></a>考勤表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> ding_attendance (</span><br><span class="line">  attendance_id <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  attendance_employee_user_id <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  attendance_base_check_time <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  attendance_user_check_time <span class="built_in">VARCHAR</span>(<span class="number">128</span>),</span><br><span class="line">  attendance_group_id <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  attendance_check_type <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  attendance_time_result <span class="built_in">VARCHAR</span>(<span class="number">64</span>),</span><br><span class="line">  attendance_location_result <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  attendance_work_date <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (attendance_id)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_id <span class="keyword">IS</span> <span class="string">'考勤id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_employee_user_id <span class="keyword">IS</span> <span class="string">'考勤员工id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_base_check_time <span class="keyword">IS</span> <span class="string">'打卡基准时间'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_user_check_time <span class="keyword">IS</span> <span class="string">'员工实际打卡时间'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_group_id <span class="keyword">IS</span> <span class="string">'考勤组id'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_check_type <span class="keyword">IS</span> <span class="string">'打卡类型-上下班'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_time_result <span class="keyword">IS</span> <span class="string">'时间结果'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_location_result <span class="keyword">IS</span> <span class="string">'打卡范围结果'</span>;</span><br><span class="line"><span class="keyword">COMMENT</span> <span class="keyword">ON</span> <span class="keyword">COLUMN</span> ding_attendance.attendance_work_date <span class="keyword">IS</span> <span class="string">'工作日'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>钉钉</tag>
      </tags>
  </entry>
  <entry>
    <title>销售内部联络单</title>
    <url>/2020/11/05/%E9%94%80%E5%94%AE%E5%86%85%E9%83%A8%E8%81%94%E7%BB%9C%E5%8D%95/</url>
    <content><![CDATA[<ol>
<li>内部联络单号 <ul>
<li>设置 &gt; 自动编号 &gt; new_sal_contactform</li>
</ul>
</li>
<li>根据销售信息单自动带出 √<ul>
<li>销售信息    new_opportunity_id（内联单)</li>
<li>客户名称    new_account_id（内联单)        new_account_id(销售信息)</li>
<li>主要联系人    new_pkcontact（内联单)          new_contactname(销售信息-联系人姓名)</li>
<li>联系电话     new_telephone（内联单)        new_contacttel（销售信息-联系人电话）</li>
<li>联系地址     new_address（内联单)            new_address（销售信息-详细地址）</li>
<li>提报单位     new_dept_id（内联单)         new_dept_id（销售信息-提报单位）</li>
<li>跟踪人     new_sales_id（内联单)        new_trackor（销售信息-跟踪人）</li>
<li>所属组织   new_organisation_id         new_organisation_id(销售信息)</li>
</ul>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">opportunityOnchange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">///&lt;summary&gt;销售信息Onchange事件&lt;/summary&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//销售信息id</span></span><br><span class="line">    <span class="keyword">var</span> new_opportunity_id = rtcrm.getLookupId(<span class="string">"new_opportunity_id"</span>);</span><br><span class="line">    <span class="comment">//查询销售信息字段（客户名称、主要联系人、联系电话、联系地址、提报单位、跟踪人）</span></span><br><span class="line">    <span class="keyword">var</span> opportunity = rtcrm.getFieldValue(new_opportunity_id, <span class="string">"opportunities"</span>,</span><br><span class="line">        <span class="string">"_new_account_id_value,new_contactname,new_contacttel,new_address,_new_dept_id_value,_new_trackor_value"</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//客户名称赋值</span></span><br><span class="line">    <span class="keyword">if</span> (opportunity[<span class="string">"_new_account_id_value"</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> new_account_id = opportunity[<span class="string">"_new_account_id_value"</span>];</span><br><span class="line">        <span class="keyword">var</span> new_account_id_name = opportunity[<span class="string">"_new_account_id_value@OData.Community.Display.V1.FormattedValue"</span>];</span><br><span class="line">        <span class="keyword">var</span> lookupValue = rtcrm.buildLookup(new_account_id,</span><br><span class="line">            new_account_id_name, <span class="string">"account"</span>);</span><br><span class="line">        rtcrm(<span class="string">'#new_account_id'</span>).val(lookupValue);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"客户名称为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//主要联系人赋值</span></span><br><span class="line">    <span class="keyword">if</span> (opportunity[<span class="string">"new_contactname"</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> new_contactname = opportunity[<span class="string">"new_contactname"</span>];</span><br><span class="line">        rtcrm(<span class="string">"#new_pkcontact"</span>).val(new_contactname);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"主要联系人为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//联系电话赋值</span></span><br><span class="line">    <span class="keyword">if</span> (opportunity[<span class="string">"new_contacttel"</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> new_contacttel = opportunity[<span class="string">"new_contacttel"</span>];</span><br><span class="line">        rtcrm(<span class="string">"#new_telephone"</span>).val(new_contacttel);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"联系电话为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//联系地址赋值</span></span><br><span class="line">    <span class="keyword">if</span> (opportunity[<span class="string">"new_address"</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> new_address = opportunity[<span class="string">"new_address"</span>];</span><br><span class="line">        rtcrm(<span class="string">"#new_address"</span>).val(new_address);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"联系地址为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提报单位赋值</span></span><br><span class="line">    <span class="keyword">if</span> (opportunity[<span class="string">"_new_dept_id_value"</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> new_dept_id = opportunity[<span class="string">"_new_dept_id_value"</span>];</span><br><span class="line">        <span class="keyword">var</span> new_dept_id_name = opportunity[<span class="string">"_new_dept_id_value@OData.Community.Display.V1.FormattedValue"</span>];</span><br><span class="line">        <span class="keyword">var</span> lookupValue = rtcrm.buildLookup(new_dept_id,</span><br><span class="line">            new_dept_id_name, <span class="string">"businessunit"</span>);</span><br><span class="line">        rtcrm(<span class="string">'#new_dept_id'</span>).val(lookupValue);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"提报单位为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//跟踪人赋值</span></span><br><span class="line">    <span class="keyword">if</span> (opportunity[<span class="string">"_new_trackor_value"</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> new_trackor_id = opportunity[<span class="string">"_new_trackor_value"</span>];</span><br><span class="line">        <span class="keyword">var</span> new_trackor_id_name = opportunity[<span class="string">"_new_trackor_value@OData.Community.Display.V1.FormattedValue"</span>];</span><br><span class="line">        <span class="keyword">var</span> lookupValue = rtcrm.buildLookup(new_trackor_id,</span><br><span class="line">            new_trackor_id_name, <span class="string">"new_ord_sales"</span>);</span><br><span class="line">        rtcrm(<span class="string">'#new_sales_id'</span>).val(lookupValue);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"跟踪人为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>处理状态 <ul>
<li>picklist字段；分为：制单、处理中、已处理、已完成；</li>
<li>1.处理状态初始值默认为’制单‘；</li>
<li>2.点击处理后，更新处理状态为’已处理‘；</li>
<li>new_dealstatus</li>
</ul>
</li>
<li>审核状态<ul>
<li>picklist字段：分为：制单、审核中、已审核、已驳回、已否决</li>
<li>1.审核状态初始值为制单；</li>
<li>2.点击提交后，更新审核状态为审核中；</li>
<li>3.审核后，更新审核状态为已审核或者已驳回；</li>
<li>new_approvalstatus</li>
</ul>
</li>
<li>处理按钮<ul>
<li>点击处理后，更新处理状态为’已处理‘</li>
<li>处理中已审核时,责任人和当前账户一致时显示</li>
<li>注册按钮<ul>
<li>显示隐藏控制 enable rules<ul>
<li>customRule</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<p><img src="1.jpg" alt=""></p>
<ol start="6">
<li><p>完成按钮</p>
<ul>
<li>点击完成按钮，更新处理状态为‘已完成’</li>
<li>已处理已审核时，单据负责人和当前账户一致时显示</li>
</ul>
</li>
<li><p>场景动作</p>
<ul>
<li>1.点击提交 <ul>
<li>1.1 更新处理状态为‘处理中’</li>
<li>1.2 更新审核状态为‘审核中’</li>
<li>电商运营部负责人审核</li>
</ul>
</li>
<li>2.同意<ul>
<li>2.1更新审核状态为‘已审核’</li>
</ul>
</li>
<li>3.驳回<ul>
<li>3.1更新处理状态为‘制单’</li>
<li>3.2更新审核状态为‘已驳回’</li>
</ul>
</li>
</ul>
</li>
<li><p>签核流程自动化</p>
<ul>
<li>新建解决方案</li>
<li>添加现有实体</li>
<li>添加必须组件 &gt; 否</li>
<li>设置 &gt; 签核流程自动化</li>
<li>输入解决方案名称 &gt; 无审核驳回等字段点添加字段（标准签核流不建议自己建） &gt; 无提交撤回等按钮选择添加按钮</li>
</ul>
</li>
<li><p>销售内联单产品明细</p>
<ul>
<li>new_contactformproduct 销售内联单产品明细   </li>
<li>test 销售信息 4CBB33BE-B2A7-4873-8246-E855F762D60B</li>
<li>new_name 名称</li>
<li>new_productgroup_id 产品组</li>
<li>new_tonlevel_id 吨级</li>
<li>new_productmodel_id 产品型号</li>
<li>new_number 需求数量</li>
<li>new_plandealmoney 预计成交单价</li>
<li>new_actualdealmoney 实际成交单价</li>
<li>new_plandealtime 预计成交年月</li>
<li>new_actualamount 实际成交金额 </li>
<li>配置窗体时选择子网格属性即可将明细与主档根据字段关联</li>
</ul>
</li>
</ol>
<p><img src="2.jpg" alt=""></p>
<ol start="10">
<li>js打开视图表单</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">openEntityForm: <span class="function"><span class="keyword">function</span> (<span class="params">name, id, parameters, windowOptions</span>) </span>&#123;</span><br><span class="line">    <span class="comment">///	&lt;summary&gt;对openEntityForm函数的封装，打开CRM页面&lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">///	&lt;param name="name" type="String"&gt;实体名称&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">///	&lt;param name="id" type="String"&gt;实体ID，若为空，则打开新建页面&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">///	&lt;param name="parameters" type="Object"&gt;将参数带入窗体中&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">///	&lt;param name="windowOptions" type="Object"&gt;若 openInNewWindow 属性设置为 true，则将在新窗体中打开一个窗口。此参数在 Dynamics 365 移动客户端（电话和平板）中被忽略。&lt;/param&gt;</span></span><br><span class="line">    Xrm.Utility.openEntityForm(name, id, parameters, windowOptions);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">OpenNewContact</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	 <span class="keyword">var</span> parameters = &#123;&#125;;</span><br><span class="line">	 <span class="comment">//Set the Parent Customer field value to "Contoso".</span></span><br><span class="line">	 parameters[<span class="string">"parentcustomerid"</span>] = <span class="string">"2878282E-94D6-E111-9B1D-00155D9D700B"</span>;</span><br><span class="line">	 parameters[<span class="string">"parentcustomeridname"</span>] = <span class="string">"Contoso"</span>;</span><br><span class="line">	 parameters[<span class="string">"parentcustomeridtype"</span>] = <span class="string">"account"</span>;</span><br><span class="line">	 <span class="comment">//Set the Address Type to "Primary".</span></span><br><span class="line">	 parameters[<span class="string">"address1_addresstypecode"</span>] = <span class="string">"3"</span>;</span><br><span class="line">	 <span class="comment">//Set text in the Description field.</span></span><br><span class="line">	 parameters[<span class="string">"description"</span>] = <span class="string">"Default values for this record were set programmatically."</span>;</span><br><span class="line">	 <span class="comment">//Set Do not allow E-mails to "Do Not Allow".</span></span><br><span class="line">	 parameters[<span class="string">"donotemail"</span>] = <span class="string">"1"</span>;</span><br><span class="line"></span><br><span class="line">	 <span class="comment">// Open the window.</span></span><br><span class="line">	 Xrm.Utility.openEntityForm(<span class="string">"contact"</span>, <span class="literal">null</span>, parameters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="11">
<li>小细节<ul>
<li>pickList赋值用OptionSetValue（int）</li>
<li>js文件无法上传至正式环境web资源时，先在测试环境上传，并新建解决方案，将web资源添加至解决方案后导出再导入正式环境</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>CRM</tag>
        <tag>销售</tag>
      </tags>
  </entry>
  <entry>
    <title>首次收到打赏</title>
    <url>/2020/09/30/%E9%A6%96%E6%AC%A1%E6%94%B6%E5%88%B0%E6%89%93%E8%B5%8F/</url>
    <content><![CDATA[<h1 id="收到了来自师傅的打赏"><a href="#收到了来自师傅的打赏" class="headerlink" title="收到了来自师傅的打赏"></a>收到了来自师傅的打赏</h1><h2 id="有师傅真是太好了！-●’◡’●"><a href="#有师傅真是太好了！-●’◡’●" class="headerlink" title="有师傅真是太好了！(●’◡’●)"></a>有师傅真是太好了！(●’◡’●)</h2><p><img src="1.jpg" alt=""><br><img src="2.jpg" alt=""></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>销售信息自定义页面</title>
    <url>/2020/11/09/%E9%94%80%E5%94%AE%E4%BF%A1%E6%81%AF%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="1-脉络整理"><a href="#1-脉络整理" class="headerlink" title="1. 脉络整理"></a>1. 脉络整理</h2><pre><code>- opportunity 销售信息
    - 取 new_account_id 字段
- new_delaymanagement 逾期催收管理
    - 取 new_account_id 字段
    - new_name 单号
    - new_overdate 逾期时间
    - new_delaytimes 逾期期数
    - new_overamount 逾期金额
    - new_overduetype 逾期分类
- new_srv_disputes 客户服务纠纷单
    - 取 new_account_id 字段
    - new_name 单号
    - new_requirements 用户要求
    - new_dealtype 处理类型
    - new_consensus 达成共识</code></pre><h2 id="2-hiddenApi"><a href="#2-hiddenApi" class="headerlink" title="2. hiddenApi"></a>2. hiddenApi</h2><pre><code>- 空工作流，plugin触发，plugin根据请求寻找对应controller
- broker ——&gt; Dapper</code></pre><h2 id="3-脚本"><a href="#3-脚本" class="headerlink" title="3. 脚本"></a>3. 脚本</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//徐庶 销售信息</span></span><br><span class="line">rtcrm(<span class="string">"#new_account_id"</span>).val()[<span class="number">0</span>].id.replace(<span class="string">"&#123;"</span>,<span class="string">""</span>).replace(<span class="string">"&#125;"</span>,<span class="string">""</span>);</span><br><span class="line"><span class="keyword">var</span> paramList = &#123;<span class="attr">accountId</span>:<span class="string">"F8B6B7CB-D3D6-EA11-8ABD-005056AF9937"</span>&#125;;</span><br><span class="line">rtcrm.invokeHiddenApi(<span class="string">"new_Sales"</span>, <span class="string">"Opportunity/GetDelaymanagementDetailList"</span>, paramList)</span><br><span class="line">rtcrm.invokeHiddenApi(<span class="string">"new_Sales"</span>, <span class="string">"Opportunity/GetDisputesDetailModelData"</span>, paramList)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找到表单上一个对象</span></span><br><span class="line">Xrm.Page.ui.controls.get(<span class="string">"new_account_id"</span>);</span><br><span class="line"><span class="comment">//获取属性</span></span><br><span class="line">Xrm.Page.ui.controls.get(<span class="string">"new_account_id"</span>).getAttribute();</span><br><span class="line"><span class="comment">//获取值</span></span><br><span class="line">Xrm.Page.ui.controls.get(<span class="string">"new_account_id"</span>).getAttribute().getValue();</span><br><span class="line"><span class="comment">//直接获取字段</span></span><br><span class="line">Xrm.Page.getAttribute(<span class="string">"new_account_id"</span>).getValue()</span><br></pre></td></tr></table></figure>
<p><img src="1.jpg" alt=""><br><img src="2.jpg" alt=""></p>
<h2 id="4-sql语法"><a href="#4-sql语法" class="headerlink" title="4. sql语法"></a>4. sql语法</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">Convert(decimal(18,2),new_overamount) new_overamount, <span class="comment">--保留小数位2位</span></span><br><span class="line"></span><br><span class="line">测试数据：</span><br><span class="line">销售信息 NOS202008050001 </span><br><span class="line">服务纠纷单 CSN202008130002</span><br><span class="line">逾期催收管理 BET202009290029</span><br><span class="line">new_account_id F8B6B7CB-D3D6-EA11-8ABD-005056AF9937</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>CRM</tag>
        <tag>销售</tag>
      </tags>
  </entry>
</search>
